[
  {
    "objectID": "practice.html",
    "href": "practice.html",
    "title": "practice1",
    "section": "",
    "text": "practice1\n\n\n%pip install pandas matplotlib numpy lets_plot\n\nRequirement already satisfied: pandas in c:\\users\\hp\\anaconda3\\lib\\site-packages (2.2.2)\nRequirement already satisfied: matplotlib in c:\\users\\hp\\anaconda3\\lib\\site-packages (3.9.2)\nRequirement already satisfied: numpy in c:\\users\\hp\\anaconda3\\lib\\site-packages (1.26.4)\nCollecting lets_plot\n  Using cached lets_plot-4.5.1-cp312-cp312-win_amd64.whl.metadata (11 kB)\nRequirement already satisfied: python-dateutil&gt;=2.8.2 in c:\\users\\hp\\anaconda3\\lib\\site-packages (from pandas) (2.9.0.post0)\nRequirement already satisfied: pytz&gt;=2020.1 in c:\\users\\hp\\anaconda3\\lib\\site-packages (from pandas) (2024.1)\nRequirement already satisfied: tzdata&gt;=2022.7 in c:\\users\\hp\\anaconda3\\lib\\site-packages (from pandas) (2023.3)\nRequirement already satisfied: contourpy&gt;=1.0.1 in c:\\users\\hp\\anaconda3\\lib\\site-packages (from matplotlib) (1.2.0)\nRequirement already satisfied: cycler&gt;=0.10 in c:\\users\\hp\\anaconda3\\lib\\site-packages (from matplotlib) (0.11.0)\nRequirement already satisfied: fonttools&gt;=4.22.0 in c:\\users\\hp\\anaconda3\\lib\\site-packages (from matplotlib) (4.51.0)\nRequirement already satisfied: kiwisolver&gt;=1.3.1 in c:\\users\\hp\\anaconda3\\lib\\site-packages (from matplotlib) (1.4.4)\nRequirement already satisfied: packaging&gt;=20.0 in c:\\users\\hp\\anaconda3\\lib\\site-packages (from matplotlib) (24.1)\nRequirement already satisfied: pillow&gt;=8 in c:\\users\\hp\\anaconda3\\lib\\site-packages (from matplotlib) (10.4.0)\nRequirement already satisfied: pyparsing&gt;=2.3.1 in c:\\users\\hp\\anaconda3\\lib\\site-packages (from matplotlib) (3.1.2)\nCollecting pypng (from lets_plot)\n  Using cached pypng-0.20220715.0-py3-none-any.whl.metadata (13 kB)\nCollecting palettable (from lets_plot)\n  Using cached palettable-3.3.3-py2.py3-none-any.whl.metadata (3.3 kB)\nRequirement already satisfied: six&gt;=1.5 in c:\\users\\hp\\anaconda3\\lib\\site-packages (from python-dateutil&gt;=2.8.2-&gt;pandas) (1.16.0)\nUsing cached lets_plot-4.5.1-cp312-cp312-win_amd64.whl (3.1 MB)\nUsing cached palettable-3.3.3-py2.py3-none-any.whl (332 kB)\nUsing cached pypng-0.20220715.0-py3-none-any.whl (58 kB)\nInstalling collected packages: pypng, palettable, lets_plot\nSuccessfully installed lets_plot-4.5.1 palettable-3.3.3 pypng-0.20220715.0\nNote: you may need to restart the kernel to use updated packages.\n\n\n\nimport pandas as pd\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom pathlib import Path\n\nfrom lets_plot import *\nLetsPlot.setup_html(no_js=True)\nplt.style.use(\n    \"https://raw.githubusercontent.com/aeturrell/core_python/main/plot_style.txt\"\n)\n\n\ndf = pd.read_csv(\n    \"https://data.giss.nasa.gov/gistemp/tabledata_v4/NH.Ts+dSST.csv\",\n    skiprows=1,\n    na_values=\"***\",\n)\n\n\n1.Why have researchers chosen this particular measure over other measures (such as absolute temperature)?\n\nTemperature anomalies indicate how much warmer or colder it is than normal for a particular place and time. For the GISS analysis, normal always means the average over the 30-year period 1951-1980 for that place and time of year. This base period is specific to GISS, not universal. But note that trends do not depend on the choice of the base period: If the absolute temperature at a specific location is 2 degrees higher than a year ago, so is the corresponding temperature anomaly, no matter what base period is selected, since the normal temperature used as base point (which is subtracted from the absolute temperature to get the anomaly) is the same for both years.\nNote that regional mean anomalies (in particular global anomalies) are not computed from the current absolute mean and the 1951-80 mean for that region, but from station temperature anomalies. Finding absolute regional means encounters significant difficulties that create large uncertainties. This is why the GISS analysis deals with anomalies rather than absolute temperatures. For a more detailed discussion of that topic, please see “The Elusive Absolute Temperature”.\n\ndf.head()\n\n\n\n\n\n\n\n\nYear\nJan\nFeb\nMar\nApr\nMay\nJun\nJul\nAug\nSep\nOct\nNov\nDec\nJ-D\nD-N\nDJF\nMAM\nJJA\nSON\n\n\n\n\n0\n1880\n-0.39\n-0.54\n-0.24\n-0.31\n-0.06\n-0.18\n-0.22\n-0.26\n-0.25\n-0.31\n-0.44\n-0.43\n-0.30\nNaN\nNaN\n-0.20\n-0.22\n-0.33\n\n\n1\n1881\n-0.31\n-0.25\n-0.06\n-0.02\n0.05\n-0.34\n0.09\n-0.06\n-0.29\n-0.45\n-0.37\n-0.23\n-0.19\n-0.20\n-0.33\n-0.01\n-0.10\n-0.37\n\n\n2\n1882\n0.26\n0.21\n0.02\n-0.30\n-0.23\n-0.29\n-0.28\n-0.15\n-0.25\n-0.52\n-0.34\n-0.69\n-0.21\n-0.18\n0.08\n-0.17\n-0.24\n-0.37\n\n\n3\n1883\n-0.58\n-0.66\n-0.15\n-0.30\n-0.26\n-0.12\n-0.06\n-0.23\n-0.34\n-0.17\n-0.45\n-0.15\n-0.29\n-0.33\n-0.64\n-0.24\n-0.14\n-0.32\n\n\n4\n1884\n-0.16\n-0.11\n-0.64\n-0.59\n-0.36\n-0.42\n-0.41\n-0.52\n-0.45\n-0.45\n-0.58\n-0.47\n-0.43\n-0.40\n-0.14\n-0.53\n-0.45\n-0.50\n\n\n\n\n\n\n\n\ndf.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 145 entries, 0 to 144\nData columns (total 19 columns):\n #   Column  Non-Null Count  Dtype  \n---  ------  --------------  -----  \n 0   Year    145 non-null    int64  \n 1   Jan     145 non-null    float64\n 2   Feb     145 non-null    float64\n 3   Mar     145 non-null    float64\n 4   Apr     145 non-null    float64\n 5   May     145 non-null    float64\n 6   Jun     145 non-null    float64\n 7   Jul     145 non-null    float64\n 8   Aug     145 non-null    float64\n 9   Sep     145 non-null    float64\n 10  Oct     144 non-null    float64\n 11  Nov     144 non-null    float64\n 12  Dec     144 non-null    float64\n 13  J-D     144 non-null    float64\n 14  D-N     143 non-null    float64\n 15  DJF     144 non-null    float64\n 16  MAM     145 non-null    float64\n 17  JJA     145 non-null    float64\n 18  SON     144 non-null    float64\ndtypes: float64(18), int64(1)\nmemory usage: 21.7 KB\n\n\n\ndf = df.set_index(\"Year\")\ndf.head()\n\n\n\n\n\n\n\n\nJan\nFeb\nMar\nApr\nMay\nJun\nJul\nAug\nSep\nOct\nNov\nDec\nJ-D\nD-N\nDJF\nMAM\nJJA\nSON\n\n\nYear\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1880\n-0.39\n-0.54\n-0.24\n-0.31\n-0.06\n-0.18\n-0.22\n-0.26\n-0.25\n-0.31\n-0.44\n-0.43\n-0.30\nNaN\nNaN\n-0.20\n-0.22\n-0.33\n\n\n1881\n-0.31\n-0.25\n-0.06\n-0.02\n0.05\n-0.34\n0.09\n-0.06\n-0.29\n-0.45\n-0.37\n-0.23\n-0.19\n-0.20\n-0.33\n-0.01\n-0.10\n-0.37\n\n\n1882\n0.26\n0.21\n0.02\n-0.30\n-0.23\n-0.29\n-0.28\n-0.15\n-0.25\n-0.52\n-0.34\n-0.69\n-0.21\n-0.18\n0.08\n-0.17\n-0.24\n-0.37\n\n\n1883\n-0.58\n-0.66\n-0.15\n-0.30\n-0.26\n-0.12\n-0.06\n-0.23\n-0.34\n-0.17\n-0.45\n-0.15\n-0.29\n-0.33\n-0.64\n-0.24\n-0.14\n-0.32\n\n\n1884\n-0.16\n-0.11\n-0.64\n-0.59\n-0.36\n-0.42\n-0.41\n-0.52\n-0.45\n-0.45\n-0.58\n-0.47\n-0.43\n-0.40\n-0.14\n-0.53\n-0.45\n-0.50\n\n\n\n\n\n\n\n\ndf.tail()\n\n\n\n\n\n\n\n\nJan\nFeb\nMar\nApr\nMay\nJun\nJul\nAug\nSep\nOct\nNov\nDec\nJ-D\nD-N\nDJF\nMAM\nJJA\nSON\n\n\nYear\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2020\n1.58\n1.69\n1.66\n1.39\n1.26\n1.14\n1.10\n1.12\n1.19\n1.20\n1.58\n1.18\n1.34\n1.36\n1.56\n1.44\n1.12\n1.32\n\n\n2021\n1.25\n0.95\n1.20\n1.12\n1.04\n1.20\n1.07\n1.02\n1.04\n1.29\n1.29\n1.16\n1.14\n1.14\n1.13\n1.12\n1.10\n1.21\n\n\n2022\n1.24\n1.16\n1.41\n1.08\n1.02\n1.12\n1.06\n1.16\n1.14\n1.31\n1.09\n1.06\n1.15\n1.16\n1.19\n1.17\n1.11\n1.18\n\n\n2023\n1.29\n1.29\n1.63\n1.01\n1.12\n1.19\n1.44\n1.57\n1.67\n1.88\n1.97\n1.85\n1.49\n1.43\n1.21\n1.26\n1.40\n1.84\n\n\n2024\n1.66\n1.93\n1.77\n1.79\n1.44\n1.54\n1.42\n1.42\n1.57\nNaN\nNaN\nNaN\nNaN\nNaN\n1.81\n1.67\n1.46\nNaN\n\n\n\n\n\n\n\n\nfig, ax = plt.subplots()\ndf[\"Jan\"].plot(ax=ax)\nax.set_ylabel(\"y label\")\nax.set_xlabel(\"x label\")\nax.set_title(\"title\")\nplt.show()\n\n\n\n\n\n\n\n\n\nfig, ax = plt.subplots()\nax.plot(df.index, df[\"Jan\"])\nax.set_ylabel(\"y label\")\nax.set_xlabel(\"x label\")\nax.set_title(\"title\")\nplt.show()\n\n\n\n\n\n\n\n\n\nmonth = \"Jan\"\nfig, ax = plt.subplots()\nax.axhline(0, color=\"orange\")\nax.annotate(\"1951—1980 average\", xy=(0.66, -0.2), xycoords=(\"figure fraction\", \"data\"))\ndf[month].plot(ax=ax)\nax.set_title(\n    f\"Average temperature anomaly in {month} \\n in the northern hemisphere (1880—{df.index.max()})\"\n)\nax.set_ylabel(\"Annual temperature anomalies\");\n\n\n\n\n\n\n\n\n\nmonth = \"J-D\"\nfig, ax = plt.subplots()\nax.axhline(0, color=\"orange\")\nax.annotate(\"1951—1980 average\", xy=(0.68, -0.2), xycoords=(\"figure fraction\", \"data\"))\ndf[month].plot(ax=ax)\nax.set_title(\n    f\"Average annual temperature anomaly in \\n in the northern hemisphere (1880—{df.index.max()})\"\n)\nax.set_ylabel(\"Annual temperature anomalies\");\n\n\n\n\n\n\n\n\n\ndf[\"Period\"] = pd.cut(\n    df.index,\n    bins=[1921, 1950, 1980, 2010],\n    labels=[\"1921—1950\", \"1951—1980\", \"1981—2010\"],\n    ordered=True,\n)\ndf[\"Period\"].tail(20)\n\nYear\n2005    1981—2010\n2006    1981—2010\n2007    1981—2010\n2008    1981—2010\n2009    1981—2010\n2010    1981—2010\n2011          NaN\n2012          NaN\n2013          NaN\n2014          NaN\n2015          NaN\n2016          NaN\n2017          NaN\n2018          NaN\n2019          NaN\n2020          NaN\n2021          NaN\n2022          NaN\n2023          NaN\n2024          NaN\nName: Period, dtype: category\nCategories (3, object): ['1921—1950' &lt; '1951—1980' &lt; '1981—2010']\n\n\n\nlist_of_months = [\"Jun\", \"Jul\", \"Aug\"]\ndf[list_of_months].stack().head()\n\nYear     \n1880  Jun   -0.18\n      Jul   -0.22\n      Aug   -0.26\n1881  Jun   -0.34\n      Jul    0.09\ndtype: float64\n\n\n\nfig, axes = plt.subplots(ncols=3, figsize=(9, 4), sharex=True, sharey=True)\nfor ax, period in zip(axes, df[\"Period\"].dropna().unique()):\n    df.loc[df[\"Period\"] == period, list_of_months].stack().hist(ax=ax)\n    ax.set_title(period)\nplt.suptitle(\"Histogram of temperature anomalies\")\naxes[1].set_xlabel(\"Summer temperature distribution\")\nplt.tight_layout();\n\n\n\n\n\n\n\n\n\n# Create a variable that has years 1951 to 1980, and months Jan to Dec (inclusive)\ntemp_all_months = df.loc[(df.index &gt;= 1951) & (df.index &lt;= 1980), \"Jan\":\"Dec\"]\n# Put all the data in stacked format and give the new columns sensible names\ntemp_all_months = (\n    temp_all_months.stack()\n    .reset_index()\n    .rename(columns={\"level_1\": \"month\", 0: \"values\"})\n)\n# Take a look at this data:\ntemp_all_months\n\n\n\n\n\n\n\n\nYear\nmonth\nvalues\n\n\n\n\n0\n1951\nJan\n-0.36\n\n\n1\n1951\nFeb\n-0.51\n\n\n2\n1951\nMar\n-0.19\n\n\n3\n1951\nApr\n0.07\n\n\n4\n1951\nMay\n0.17\n\n\n...\n...\n...\n...\n\n\n355\n1980\nAug\n0.09\n\n\n356\n1980\nSep\n0.10\n\n\n357\n1980\nOct\n0.12\n\n\n358\n1980\nNov\n0.20\n\n\n359\n1980\nDec\n0.09\n\n\n\n\n360 rows × 3 columns\n\n\n\n\nquantiles = [0.3, 0.7]\nlist_of_percentiles = np.quantile(temp_all_months[\"values\"], q=quantiles)\n\nprint(f\"The cold threshold of {quantiles[0]*100}% is {list_of_percentiles[0]}\")\nprint(f\"The hot threshold of {quantiles[1]*100}% is {list_of_percentiles[1]}\")\n\nThe cold threshold of 30.0% is -0.1\nThe hot threshold of 70.0% is 0.1\n\n\n\n# Create a variable that has years 1981 to 2010, and months Jan to Dec (inclusive)\ntemp_all_months = df.loc[(df.index &gt;= 1981) & (df.index &lt;= 2010), \"Jan\":\"Dec\"]\n# Put all the data in stacked format and give the new columns sensible names\ntemp_all_months = (\n    temp_all_months.stack()\n    .reset_index()\n    .rename(columns={\"level_1\": \"month\", 0: \"values\"})\n)\n# Take a look at the start of this data data:\ntemp_all_months.head()\n\n\n\n\n\n\n\n\nYear\nmonth\nvalues\n\n\n\n\n0\n1981\nJan\n0.79\n\n\n1\n1981\nFeb\n0.62\n\n\n2\n1981\nMar\n0.68\n\n\n3\n1981\nApr\n0.39\n\n\n4\n1981\nMay\n0.18\n\n\n\n\n\n\n\n\nentries_less_than_q30 = temp_all_months[\"values\"] &lt; list_of_percentiles[0]\nproportion_under_q30 = entries_less_than_q30.mean()\nprint(\n    f\"The proportion under {list_of_percentiles[0]} is {proportion_under_q30*100:.2f}%\"\n)\n\nThe proportion under -0.1 is 1.94%\n\n\n\nproportion_over_q70 = (temp_all_months[\"values\"] &gt; list_of_percentiles[1]).mean()\nprint(f\"The proportion over {list_of_percentiles[1]} is {proportion_over_q70*100:.2f}%\")\n\nThe proportion over 0.1 is 84.72%\n\n\n\ntemp_all_months = (\n    df.loc[:, \"DJF\":\"SON\"]\n    .stack()\n    .reset_index()\n    .rename(columns={\"level_1\": \"Season\", 0: \"Values\"})\n)\ntemp_all_months[\"Period\"] = pd.cut(\n    temp_all_months[\"Year\"],\n    bins=[1921, 1950, 1980, 2010],\n    labels=[\"1921—1950\", \"1951—1980\", \"1981—2010\"],\n    ordered=True,\n)\n# Take a look at a cut of the data using `.iloc`, which provides position\ntemp_all_months.iloc[-135:-125]\n\n\n\n\n\n\n\n\nYear\nSeason\nValues\nPeriod\n\n\n\n\n443\n1991\nDJF\n0.51\n1981—2010\n\n\n444\n1991\nMAM\n0.45\n1981—2010\n\n\n445\n1991\nJJA\n0.42\n1981—2010\n\n\n446\n1991\nSON\n0.32\n1981—2010\n\n\n447\n1992\nDJF\n0.43\n1981—2010\n\n\n448\n1992\nMAM\n0.30\n1981—2010\n\n\n449\n1992\nJJA\n-0.04\n1981—2010\n\n\n450\n1992\nSON\n-0.15\n1981—2010\n\n\n451\n1993\nDJF\n0.37\n1981—2010\n\n\n452\n1993\nMAM\n0.31\n1981—2010\n\n\n\n\n\n\n\n\ngrp_mean_var = temp_all_months.groupby([\"Season\", \"Period\"])[\"Values\"].agg(\n    [np.mean, np.var]\n)\ngrp_mean_var\n\n\n\n\n\n\n\n\n\nmean\nvar\n\n\nSeason\nPeriod\n\n\n\n\n\n\nDJF\n1921—1950\n-0.027931\n0.057703\n\n\n1951—1980\n-0.003333\n0.050375\n\n\n1981—2010\n0.522000\n0.078644\n\n\nJJA\n1921—1950\n-0.054483\n0.021611\n\n\n1951—1980\n0.001333\n0.014640\n\n\n1981—2010\n0.399000\n0.067775\n\n\nMAM\n1921—1950\n-0.041724\n0.031136\n\n\n1951—1980\n0.000333\n0.025272\n\n\n1981—2010\n0.507667\n0.075812\n\n\nSON\n1921—1950\n0.081379\n0.027798\n\n\n1951—1980\n-0.001333\n0.026384\n\n\n1981—2010\n0.427000\n0.110739\n\n\n\n\n\n\n\n\nmin_year = 1880\n(\n    ggplot(temp_all_months, aes(x=\"Year\", y=\"Values\", color=\"Season\"))\n    + geom_abline(slope=0, color=\"black\", size=1)\n    + geom_line(size=1)\n    + labs(\n        title=f\"Average annual temperature anomaly in \\n in the northern hemisphere ({min_year}—{temp_all_months['Year'].max()})\",\n        y=\"Annual temperature anomalies\",\n    )\n    + scale_x_continuous(format=\"d\")\n    + geom_text(\n        x=min_year, y=0.1, label=\"1951—1980 average\", hjust=\"left\", color=\"black\"\n    )\n)\n\n\n  \n  \n    \n    \n    \n      \n        \n          \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n          \n        \n        \n          \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n          \n        \n      \n      \n        \n          \n            \n              \n              \n            \n            \n              \n                \n                \n              \n              \n                \n                \n              \n              \n                \n                \n              \n              \n                \n                \n              \n            \n            \n              \n                \n                  \n                    1951—1980 average\n                  \n                \n              \n            \n          \n        \n        \n          \n            \n            \n          \n        \n        \n          \n            \n            \n          \n        \n        \n          \n            \n            \n          \n        \n      \n      \n        \n          \n            \n            \n            \n              \n                1880\n              \n            \n          \n          \n            \n            \n            \n              \n                1900\n              \n            \n          \n          \n            \n            \n            \n              \n                1920\n              \n            \n          \n          \n            \n            \n            \n              \n                1940\n              \n            \n          \n          \n            \n            \n            \n              \n                1960\n              \n            \n          \n          \n            \n            \n            \n              \n                1980\n              \n            \n          \n          \n            \n            \n            \n              \n                2000\n              \n            \n          \n          \n            \n            \n            \n              \n                2020\n              \n            \n          \n          \n          \n        \n        \n          \n            \n              \n                -1.0\n              \n            \n          \n          \n            \n              \n                -0.5\n              \n            \n          \n          \n            \n              \n                0.0\n              \n            \n          \n          \n            \n              \n                0.5\n              \n            \n          \n          \n            \n              \n                1.0\n              \n            \n          \n          \n            \n              \n                1.5\n              \n            \n          \n        \n      \n    \n    \n      \n        Average annual temperature anomaly in \n      \n      \n         in the northern hemisphere (1880—2024)\n      \n    \n    \n      \n        Annual temperature anomalies\n      \n    \n    \n      \n        Year\n      \n    \n    \n      \n      \n      \n        \n          \n            Season\n          \n        \n        \n          \n            \n              \n                \n                  \n                  \n                \n              \n            \n            \n              \n                MAM\n              \n            \n          \n          \n            \n              \n                \n                  \n                  \n                \n              \n            \n            \n              \n                JJA\n              \n            \n          \n          \n            \n              \n                \n                  \n                  \n                \n              \n            \n            \n              \n                SON\n              \n            \n          \n          \n            \n              \n                \n                  \n                  \n                \n              \n            \n            \n              \n                DJF\n              \n            \n          \n        \n      \n    \n    \n    \n  \n  \n  \n\n\n\n\ndf_co2 = pd.read_csv(\"D:\\Yang Fan\\data\\data2(1).csv\")\ndf_co2.head()\n\n\n\n\n\n\n\n\nYear\nMonth\nMonthly average\nInterpolated\nTrend\n\n\n\n\n0\n1958\n3\n315.71\n315.71\n314.62\n\n\n1\n1958\n4\n317.45\n317.45\n315.29\n\n\n2\n1958\n5\n317.50\n317.50\n314.71\n\n\n3\n1958\n6\n-99.99\n317.10\n314.85\n\n\n4\n1958\n7\n315.86\n315.86\n314.98\n\n\n\n\n\n\n\n\ndf_co2_june = df_co2.loc[df_co2[\"Month\"] == 6]\ndf_co2_june.head()\n\n\n\n\n\n\n\n\nYear\nMonth\nMonthly average\nInterpolated\nTrend\n\n\n\n\n3\n1958\n6\n-99.99\n317.10\n314.85\n\n\n15\n1959\n6\n318.15\n318.15\n315.92\n\n\n27\n1960\n6\n319.59\n319.59\n317.36\n\n\n39\n1961\n6\n319.77\n319.77\n317.48\n\n\n51\n1962\n6\n320.55\n320.55\n318.27\n\n\n\n\n\n\n\n\ndf_temp_co2 = pd.merge(df_co2_june, df, on=\"Year\")\ndf_temp_co2[[\"Year\", \"Jun\", \"Trend\"]].head()\n\n\n\n\n\n\n\n\nYear\nJun\nTrend\n\n\n\n\n0\n1958\n0.05\n314.85\n\n\n1\n1959\n0.14\n315.92\n\n\n2\n1960\n0.18\n317.36\n\n\n3\n1961\n0.18\n317.48\n\n\n4\n1962\n-0.13\n318.27\n\n\n\n\n\n\n\n\n(\n    ggplot(df_temp_co2, aes(x=\"Jun\", y=\"Trend\"))\n    + geom_point(color=\"black\", size=3)\n    + labs(\n        title=\"Scatterplot of temperature anomalies vs carbon dioxide emissions\",\n        y=\"Carbon dioxide levels (trend, mole fraction)\",\n        x=\"Temperature anomaly (degrees Celsius)\",\n    )\n)\n\n\n  \n  \n    \n    \n    \n      \n        \n          \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n          \n        \n        \n          \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n          \n        \n      \n      \n        \n          \n            \n              \n                \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                  \n                \n              \n            \n          \n        \n        \n          \n            \n            \n          \n        \n      \n      \n        \n          \n            \n            \n            \n              \n                -0.2\n              \n            \n          \n          \n            \n            \n            \n              \n                0.0\n              \n            \n          \n          \n            \n            \n            \n              \n                0.2\n              \n            \n          \n          \n            \n            \n            \n              \n                0.4\n              \n            \n          \n          \n            \n            \n            \n              \n                0.6\n              \n            \n          \n          \n            \n            \n            \n              \n                0.8\n              \n            \n          \n          \n            \n            \n            \n              \n                1.0\n              \n            \n          \n          \n          \n        \n        \n          \n            \n              \n                320\n              \n            \n          \n          \n            \n              \n                340\n              \n            \n          \n          \n            \n              \n                360\n              \n            \n          \n          \n            \n              \n                380\n              \n            \n          \n          \n            \n              \n                400\n              \n            \n          \n        \n      \n    \n    \n      \n        Scatterplot of temperature anomalies vs carbon dioxide emissions\n      \n    \n    \n      \n        Carbon dioxide levels (trend, mole fraction)\n      \n    \n    \n      \n        Temperature anomaly (degrees Celsius)\n      \n    \n    \n    \n  \n  \n  \n\n\n\n\ndf_temp_co2[[\"Jun\", \"Trend\"]].corr(method=\"pearson\")\n\n\n\n\n\n\n\n\nJun\nTrend\n\n\n\n\nJun\n1.000000\n0.914371\n\n\nTrend\n0.914371\n1.000000\n\n\n\n\n\n\n\n\n(\n    ggplot(df_temp_co2, aes(x=\"Year\", y=\"Jun\"))\n    + geom_line(size=1)\n    + labs(\n        title=\"June temperature anomalies\",\n    )\n    + scale_x_continuous(format=\"d\")\n)\n\n\n  \n  \n    \n    \n    \n      \n        \n          \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n          \n        \n        \n          \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n          \n        \n      \n      \n        \n          \n            \n              \n                \n                \n              \n            \n          \n        \n        \n          \n            \n            \n          \n        \n      \n      \n        \n          \n            \n            \n            \n              \n                1960\n              \n            \n          \n          \n            \n            \n            \n              \n                1970\n              \n            \n          \n          \n            \n            \n            \n              \n                1980\n              \n            \n          \n          \n            \n            \n            \n              \n                1990\n              \n            \n          \n          \n            \n            \n            \n              \n                2000\n              \n            \n          \n          \n            \n            \n            \n              \n                2010\n              \n            \n          \n          \n          \n        \n        \n          \n            \n              \n                -0.2\n              \n            \n          \n          \n            \n              \n                0.0\n              \n            \n          \n          \n            \n              \n                0.2\n              \n            \n          \n          \n            \n              \n                0.4\n              \n            \n          \n          \n            \n              \n                0.6\n              \n            \n          \n          \n            \n              \n                0.8\n              \n            \n          \n          \n            \n              \n                1.0\n              \n            \n          \n        \n      \n    \n    \n      \n        June temperature anomalies\n      \n    \n    \n      \n        Jun\n      \n    \n    \n      \n        Year\n      \n    \n    \n    \n  \n  \n  \n\n\n\n\nbase_plot = ggplot(df_temp_co2) + scale_x_continuous(format=\"d\")\nplot_p = (\n    base_plot\n    + geom_line(aes(x=\"Year\", y=\"Jun\"), size=1)\n    + labs(title=\"June temperature anomalies\")\n)\nplot_q = (\n    base_plot\n    + geom_line(aes(x=\"Year\", y=\"Trend\"), size=1)\n    + labs(title=\"Carbon dioxide emissions\")\n)\ngggrid([plot_p, plot_q], ncol=2)\n\n\n  \n    \n    \n  \n  \n    \n    \n      \n      \n      \n        \n          \n            \n              \n              \n              \n              \n              \n              \n              \n              \n              \n              \n              \n              \n            \n          \n          \n            \n              \n              \n              \n              \n              \n              \n              \n              \n              \n              \n              \n              \n              \n              \n            \n          \n        \n        \n          \n            \n              \n                \n                  \n                  \n                \n              \n            \n          \n          \n            \n              \n              \n            \n          \n        \n        \n          \n            \n              \n              \n              \n                \n                  1960\n                \n              \n            \n            \n              \n              \n              \n                \n                  1970\n                \n              \n            \n            \n              \n              \n              \n                \n                  1980\n                \n              \n            \n            \n              \n              \n              \n                \n                  1990\n                \n              \n            \n            \n              \n              \n              \n                \n                  2000\n                \n              \n            \n            \n              \n              \n              \n                \n                  2010\n                \n              \n            \n            \n            \n          \n          \n            \n              \n                \n                  -0.2\n                \n              \n            \n            \n              \n                \n                  0.0\n                \n              \n            \n            \n              \n                \n                  0.2\n                \n              \n            \n            \n              \n                \n                  0.4\n                \n              \n            \n            \n              \n                \n                  0.6\n                \n              \n            \n            \n              \n                \n                  0.8\n                \n              \n            \n            \n              \n                \n                  1.0\n                \n              \n            \n          \n        \n      \n      \n        \n          June temperature anomalies\n        \n      \n      \n        \n          Jun\n        \n      \n      \n        \n          Year\n        \n      \n      \n      \n    \n    \n    \n  \n  \n    \n    \n      \n      \n      \n        \n          \n            \n              \n              \n              \n              \n              \n              \n              \n              \n              \n              \n              \n              \n            \n          \n          \n            \n              \n              \n              \n              \n              \n              \n              \n              \n              \n              \n            \n          \n        \n        \n          \n            \n              \n                \n                  \n                  \n                \n              \n            \n          \n          \n            \n              \n              \n            \n          \n        \n        \n          \n            \n              \n              \n              \n                \n                  1960\n                \n              \n            \n            \n              \n              \n              \n                \n                  1970\n                \n              \n            \n            \n              \n              \n              \n                \n                  1980\n                \n              \n            \n            \n              \n              \n              \n                \n                  1990\n                \n              \n            \n            \n              \n              \n              \n                \n                  2000\n                \n              \n            \n            \n              \n              \n              \n                \n                  2010\n                \n              \n            \n            \n            \n          \n          \n            \n              \n                \n                  320\n                \n              \n            \n            \n              \n                \n                  340\n                \n              \n            \n            \n              \n                \n                  360\n                \n              \n            \n            \n              \n                \n                  380\n                \n              \n            \n            \n              \n                \n                  400\n                \n              \n            \n          \n        \n      \n      \n        \n          Carbon dioxide emissions\n        \n      \n      \n        \n          Trend\n        \n      \n      \n        \n          Year\n        \n      \n      \n      \n    \n    \n    \n  \n\n\n\nSource: Create a variable that has years 1951 to 1980, and months Jan to Dec (inclusive)\n\n\npractice2\n\n\nimport pandas as pd\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom pathlib import Path\nimport pingouin as pg\nfrom lets_plot import *\n\n\nLetsPlot.setup_html(no_js=True)\n\n\nplt.style.use(\n\n    \"https://raw.githubusercontent.com/aeturrell/core_python/main/plot_style.txt\"\n)\n\nPart 2.1 Collecting data by playing a public goods game\n\nimport matplotlib.pyplot as plt\nrounds = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\naverage_contributions = [56.3, 53.1, 42.8, 59.1, 73.3, 48.6, 64.1, 45.5, 66, 52.6]\nplt.figure(figsize=(10, 6))\nplt.plot(rounds, average_contributions, marker='o', color='blue', label='平均贡献')\nplt.title(\"每回合的平均贡献变化趋势\", fontsize=14)\nplt.xlabel(\"回合 (Round)\", fontsize=12)\nplt.ylabel(\"平均贡献 (Average Contribution)\", fontsize=12)\nplt.xticks(rounds)\nplt.grid(True, linestyle='--', alpha=0.7)\nplt.legend()\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\nPython walk-through 2.1\nCompare your line chart with Figure 3 of Herrmann et al. (2008).1 Comment on any similarities or differences between the results (for example, the amount contributed at the start and end, or the change in average contributions over the course of the game).\nCan you think of any reasons why your results are similar to (or different from) those in Figure 3? You may find it helpful to read the ‘Experiments’ section of the Herrmann et al. (2008) study for a more detailed description of how the experiments were conducted.\nPart 2.2 Describing the data\n\ndata_np = pd.read_excel(\n    \"doing-economics-datafile-working-in-excel-project-2.xlsx\",\n    usecols=\"A:Q\",\n    header=1,\n    index_col=\"Period\",\n)\ndata_n = data_np.iloc[:10, :].copy()\ndata_p = data_np.iloc[14:24, :].copy()\n\n\ntest_data = {\n    \"City A\": [14.1, 14.1, 13.7],\n    \"City B\": [11.0, 12.6, 12.1],\n}\n\n\n# Original dataframe\ntest_df = pd.DataFrame.from_dict(test_data)\n# A copy of the dataframe\ntest_copy = test_df.copy()\n# A pointer to the dataframe\ntest_pointer = test_df\n\n\ntest_pointer.iloc[1, 1] = 99\n\n\nprint(\"test_df=\")\nprint(f\"{test_df}\\n\")\nprint(\"test_copy=\")\nprint(f\"{test_copy}\\n\")\n\ntest_df=\n   City A  City B\n0    14.1    11.0\n1    14.1    99.0\n2    13.7    12.1\n\ntest_copy=\n   City A  City B\n0    14.1    11.0\n1    14.1    12.6\n2    13.7    12.1\n\n\n\nUsing the data for Figures 2A and 3 of Herrmann et al. (2008): Calculate the mean contribution in each period (row) separately for both experiments. Plot a line chart of mean contribution on the vertical axis and time period (from 1 to 10) on the horizontal axis (with a separate line for each experiment). Make sure the lines in the legend are clearly labelled according to the experiment (with punishment or without punishment). Describe any differences and similarities you see in the mean contribution over time in both experiments.\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n\ndata_without_punishment = {\n    \"Period\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n    \"Copenhagen\": [14.102941176470589, 14.132352941176471, 13.720588235294118, 12.897058823529411, 12.338235294117647, 11.676470588235293, 10.779411764705882, 10.632352941176471, 9.764705882352942, 5.294117647058823],\n    \"Dnipropetrovs’k\": [10.954545272727273, 12.636363454545455, 12.068181636363636, 11.181818, 11.272727454545453, 10.477272545454547, 9.454545272727273, 10.340909272727272, 9.022727272727273, 8.681818181818182],\n    \"Minsk\": [12.7941, 12.3382, 12.5882, 12.2647, 11.8235, 9.88235, 9.88235, 8.42647, 8.26471, 6.94118],\n    \"St. Gallen\": [13.6875, 12.80206675, 12.354183500000001, 10.60418325, 10.989583249999999, 10.70831675, 10.14581675, 9.510415, 7.37499825, 2.97916825],\n}\n\n# 带惩罚的贡献数据 (Figure 2A)\ndata_with_punishment = {\n    \"Period\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n    \"Copenhagen\": [15.411765098571777, 16.97058868408203, 17.735294342041016, 18.16176414489746, 18.367647171020508, 18.691177368164062, 18.735294342041016, 18.323530197143555, 18.073530197143555, 17.014705657958984],\n    \"Dnipropetrovs’k\": [9.477272987365723, 9.909090995788574, 11.840909004211426, 11.454545021057129, 12.681818008422852, 11.75, 11.227272987365723, 10.681818008422852, 9.704545021057129, 10.068181991577148],\n    \"Minsk\": [11.75, 13.235294342041016, 12.897058486938477, 13.382352828979492, 13.970588684082031, 13.014705657958984, 13.176470756530762, 13.691176414489746, 12.411765098571777, 11.70588207244873],\n    \"St. Gallen\": [15.041666984558105, 16.71875, 17.57291603088379, 17.42708396911621, 17.64583396911621, 17.34375, 16.79166603088379, 16.75, 16.88541603088379, 15.15625],\n    # 其余城市数据省略，但可以按照同样格式添加\n}\n\n# 转换为DataFrame\ndf_without_punishment = pd.DataFrame(data_without_punishment)\ndf_with_punishment = pd.DataFrame(data_with_punishment)\n\n# 计算每个时间段的平均贡献值\ndf_without_punishment[\"Mean Contribution\"] = df_without_punishment.iloc[:, 1:].mean(axis=1)\ndf_with_punishment[\"Mean Contribution\"] = df_with_punishment.iloc[:, 1:].mean(axis=1)\n\n# 绘制折线图\nplt.figure(figsize=(10, 6))\nplt.plot(df_without_punishment[\"Period\"], df_without_punishment[\"Mean Contribution\"], label=\"不带惩罚\", color=\"blue\", marker='o')\nplt.plot(df_with_punishment[\"Period\"], df_with_punishment[\"Mean Contribution\"], label=\"带惩罚\", color=\"red\", marker='o')\n\n# 添加图例、标题和轴标签\nplt.title(\"平均贡献随时间的变化趋势\", fontsize=14)\nplt.xlabel(\"时间段 (Period)\", fontsize=12)\nplt.ylabel(\"平均贡献 (Mean Contribution)\", fontsize=12)\nplt.legend()\nplt.grid(True, linestyle='--', alpha=0.7)\n\n# 显示图形\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\nPython walk-through 2.3\n\nmean_n_c = data_n.mean(axis=1)\nmean_p_c = data_p.agg(np.mean, axis=1)\n\n\nfig, ax = plt.subplots()\nmean_n_c.plot(ax=ax, label=\"Without punishment\")\nmean_p_c.plot(ax=ax, label=\"With punishment\")\nax.set_title(\"Average contributions to the public goods game\")\nax.set_ylabel(\"Average contribution\")\nax.legend();\n\n\n\n\n\n\n\n\n2.Instead of looking at all periods, we can focus on contributions in the first and last period. Plot a column chart showing the mean contribution in the first and last period for both experiments.\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# 数据输入\n# 不带惩罚的贡献数据 (Figure 3)\ndata_without_punishment = {\n    \"Period\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n    \"Copenhagen\": [14.102941176470589, 14.132352941176471, 13.720588235294118, 12.897058823529411, 12.338235294117647, 11.676470588235293, 10.779411764705882, 10.632352941176471, 9.764705882352942, 5.294117647058823],\n    \"Dnipropetrovs’k\": [10.954545272727273, 12.636363454545455, 12.068181636363636, 11.181818, 11.272727454545453, 10.477272545454547, 9.454545272727273, 10.340909272727272, 9.022727272727273, 8.681818181818182],\n    \"Minsk\": [12.7941, 12.3382, 12.5882, 12.2647, 11.8235, 9.88235, 9.88235, 8.42647, 8.26471, 6.94118],\n    \"St. Gallen\": [13.6875, 12.80206675, 12.354183500000001, 10.60418325, 10.989583249999999, 10.70831675, 10.14581675, 9.510415, 7.37499825, 2.97916825],\n}\n\n# 带惩罚的贡献数据 (Figure 2A)\ndata_with_punishment = {\n    \"Period\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n    \"Copenhagen\": [15.411765098571777, 16.97058868408203, 17.735294342041016, 18.16176414489746, 18.367647171020508, 18.691177368164062, 18.735294342041016, 18.323530197143555, 18.073530197143555, 17.014705657958984],\n    \"Dnipropetrovs’k\": [9.477272987365723, 9.909090995788574, 11.840909004211426, 11.454545021057129, 12.681818008422852, 11.75, 11.227272987365723, 10.681818008422852, 9.704545021057129, 10.068181991577148],\n    \"Minsk\": [11.75, 13.235294342041016, 12.897058486938477, 13.382352828979492, 13.970588684082031, 13.014705657958984, 13.176470756530762, 13.691176414489746, 12.411765098571777, 11.70588207244873],\n    \"St. Gallen\": [15.041666984558105, 16.71875, 17.57291603088379, 17.42708396911621, 17.64583396911621, 17.34375, 16.79166603088379, 16.75, 16.88541603088379, 15.15625],\n}\n\n# 转换为DataFrame\ndf_without_punishment = pd.DataFrame(data_without_punishment)\ndf_with_punishment = pd.DataFrame(data_with_punishment)\n\n# 计算第1期和第10期的平均贡献值\nmean_without_punishment_first = df_without_punishment.iloc[0, 1:].mean()\nmean_without_punishment_last = df_without_punishment.iloc[-1, 1:].mean()\nmean_with_punishment_first = df_with_punishment.iloc[0, 1:].mean()\nmean_with_punishment_last = df_with_punishment.iloc[-1, 1:].mean()\n\n# 准备柱状图数据\ncategories = ['第1期', '第10期']\nmean_without_punishment = [mean_without_punishment_first, mean_without_punishment_last]\nmean_with_punishment = [mean_with_punishment_first, mean_with_punishment_last]\n\n# 绘制柱状图\nx = range(len(categories))\nwidth = 0.35  # 柱宽\n\nplt.figure(figsize=(8, 6))\nplt.bar(x, mean_without_punishment, width=width, label='不带惩罚', color='blue', alpha=0.7)\nplt.bar([i + width for i in x], mean_with_punishment, width=width, label='带惩罚', color='red', alpha=0.7)\n\n# 添加标签和图例\nplt.xlabel('时间段', fontsize=12)\nplt.ylabel('平均贡献', fontsize=12)\nplt.title('第1期和第10期的平均贡献比较', fontsize=14)\nplt.xticks([i + width / 2 for i in x], categories)\nplt.legend()\nplt.grid(axis='y', linestyle='--', alpha=0.7)\n\n# 显示图形\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\nPython walk-through 2.4\n3.Using the data for Figures 2A and 3 of Herrmann et al. (2008): Calculate the standard deviation for Periods 1 and 10 separately, for both experiments. Does the rule of thumb apply? (In other words, are most values within two standard deviations of the mean?) As shown in Figure 2.3, the mean contribution for both experiments was 10.6 in Period 1. With reference to your standard deviation calculations, explain whether this means that the two sets of data are the same.\n\nimport pandas as pd\nimport numpy as np\n\n# 数据输入\n# 不带惩罚的贡献数据 (Figure 3)\ndata_without_punishment = {\n    \"Period\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n    \"Copenhagen\": [14.102941176470589, 14.132352941176471, 13.720588235294118, 12.897058823529411, 12.338235294117647, 11.676470588235293, 10.779411764705882, 10.632352941176471, 9.764705882352942, 5.294117647058823],\n    \"Dnipropetrovs’k\": [10.954545272727273, 12.636363454545455, 12.068181636363636, 11.181818, 11.272727454545453, 10.477272545454547, 9.454545272727273, 10.340909272727272, 9.022727272727273, 8.681818181818182],\n    \"Minsk\": [12.7941, 12.3382, 12.5882, 12.2647, 11.8235, 9.88235, 9.88235, 8.42647, 8.26471, 6.94118],\n    \"St. Gallen\": [13.6875, 12.80206675, 12.354183500000001, 10.60418325, 10.989583249999999, 10.70831675, 10.14581675, 9.510415, 7.37499825, 2.97916825],\n}\n\n# 带惩罚的贡献数据 (Figure 2A)\ndata_with_punishment = {\n    \"Period\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n    \"Copenhagen\": [15.411765098571777, 16.97058868408203, 17.735294342041016, 18.16176414489746, 18.367647171020508, 18.691177368164062, 18.735294342041016, 18.323530197143555, 18.073530197143555, 17.014705657958984],\n    \"Dnipropetrovs’k\": [9.477272987365723, 9.909090995788574, 11.840909004211426, 11.454545021057129, 12.681818008422852, 11.75, 11.227272987365723, 10.681818008422852, 9.704545021057129, 10.068181991577148],\n    \"Minsk\": [11.75, 13.235294342041016, 12.897058486938477, 13.382352828979492, 13.970588684082031, 13.014705657958984, 13.176470756530762, 13.691176414489746, 12.411765098571777, 11.70588207244873],\n    \"St. Gallen\": [15.041666984558105, 16.71875, 17.57291603088379, 17.42708396911621, 17.64583396911621, 17.34375, 16.79166603088379, 16.75, 16.88541603088379, 15.15625],\n}\n\n# 转换为DataFrame\ndf_without_punishment = pd.DataFrame(data_without_punishment)\ndf_with_punishment = pd.DataFrame(data_with_punishment)\n\n# 提取第1期和第10期数据\ndata_without_punishment_period1 = df_without_punishment.iloc[0, 1:]\ndata_without_punishment_period10 = df_without_punishment.iloc[-1, 1:]\n\ndata_with_punishment_period1 = df_with_punishment.iloc[0, 1:]\ndata_with_punishment_period10 = df_with_punishment.iloc[-1, 1:]\n\n# 计算标准差\nstd_without_punishment_period1 = np.std(data_without_punishment_period1, ddof=1)\nstd_without_punishment_period10 = np.std(data_without_punishment_period10, ddof=1)\nstd_with_punishment_period1 = np.std(data_with_punishment_period1, ddof=1)\nstd_with_punishment_period10 = np.std(data_with_punishment_period10, ddof=1)\n\n# 输出结果\nprint(\"不带惩罚 - 第1期标准差:\", std_without_punishment_period1)\nprint(\"不带惩罚 - 第10期标准差:\", std_without_punishment_period10)\nprint(\"带惩罚 - 第1期标准差:\", std_with_punishment_period1)\nprint(\"带惩罚 - 第10期标准差:\", std_with_punishment_period10)\n\n# 检验“两倍标准差法则”\nmean_contribution = 10.6  # 示例中给出的平均贡献\nrange_without_punishment_period1 = (mean_contribution - 2 * std_without_punishment_period1, mean_contribution + 2 * std_without_punishment_period1)\nrange_with_punishment_period1 = (mean_contribution - 2 * std_with_punishment_period1, mean_contribution + 2 * std_with_punishment_period1)\n\nprint(\"不带惩罚 - 第1期两倍标准差范围:\", range_without_punishment_period1)\nprint(\"带惩罚 - 第1期两倍标准差范围:\", range_with_punishment_period1)\n\n不带惩罚 - 第1期标准差: 1.397891866913462\n不带惩罚 - 第10期标准差: 2.4289211365445644\n带惩罚 - 第1期标准差: 2.824395702863708\n带惩罚 - 第10期标准差: 3.1671121545103986\n不带惩罚 - 第1期两倍标准差范围: (np.float64(7.804216266173076), np.float64(13.395783733826924))\n带惩罚 - 第1期两倍标准差范围: (np.float64(4.951208594272583), np.float64(16.248791405727417))\n\n\n4.Calculate the maximum and minimum value for Periods 1 and 10 separately, for both experiments.\n\nimport pandas as pd\n\n# 数据输入\n# 不带惩罚的贡献数据 (Figure 3)\ndata_without_punishment = {\n    \"Period\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n    \"Copenhagen\": [14.102941176470589, 14.132352941176471, 13.720588235294118, 12.897058823529411, 12.338235294117647, 11.676470588235293, 10.779411764705882, 10.632352941176471, 9.764705882352942, 5.294117647058823],\n    \"Dnipropetrovs’k\": [10.954545272727273, 12.636363454545455, 12.068181636363636, 11.181818, 11.272727454545453, 10.477272545454547, 9.454545272727273, 10.340909272727272, 9.022727272727273, 8.681818181818182],\n    \"Minsk\": [12.7941, 12.3382, 12.5882, 12.2647, 11.8235, 9.88235, 9.88235, 8.42647, 8.26471, 6.94118],\n    \"St. Gallen\": [13.6875, 12.80206675, 12.354183500000001, 10.60418325, 10.989583249999999, 10.70831675, 10.14581675, 9.510415, 7.37499825, 2.97916825],\n}\n\n# 带惩罚的贡献数据 (Figure 2A)\ndata_with_punishment = {\n    \"Period\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n    \"Copenhagen\": [15.411765098571777, 16.97058868408203, 17.735294342041016, 18.16176414489746, 18.367647171020508, 18.691177368164062, 18.735294342041016, 18.323530197143555, 18.073530197143555, 17.014705657958984],\n    \"Dnipropetrovs’k\": [9.477272987365723, 9.909090995788574, 11.840909004211426, 11.454545021057129, 12.681818008422852, 11.75, 11.227272987365723, 10.681818008422852, 9.704545021057129, 10.068181991577148],\n    \"Minsk\": [11.75, 13.235294342041016, 12.897058486938477, 13.382352828979492, 13.970588684082031, 13.014705657958984, 13.176470756530762, 13.691176414489746, 12.411765098571777, 11.70588207244873],\n    \"St. Gallen\": [15.041666984558105, 16.71875, 17.57291603088379, 17.42708396911621, 17.64583396911621, 17.34375, 16.79166603088379, 16.75, 16.88541603088379, 15.15625],\n}\n\n# 转换为DataFrame\ndf_without_punishment = pd.DataFrame(data_without_punishment)\ndf_with_punishment = pd.DataFrame(data_with_punishment)\n\n# 提取第1期和第10期数据\ndata_without_punishment_period1 = df_without_punishment.iloc[0, 1:]\ndata_without_punishment_period10 = df_without_punishment.iloc[-1, 1:]\n\ndata_with_punishment_period1 = df_with_punishment.iloc[0, 1:]\ndata_with_punishment_period10 = df_with_punishment.iloc[-1, 1:]\n\n# 计算最大值和最小值\nmax_without_punishment_period1 = data_without_punishment_period1.max()\nmin_without_punishment_period1 = data_without_punishment_period1.min()\nmax_without_punishment_period10 = data_without_punishment_period10.max()\nmin_without_punishment_period10 = data_without_punishment_period10.min()\n\nmax_with_punishment_period1 = data_with_punishment_period1.max()\nmin_with_punishment_period1 = data_with_punishment_period1.min()\nmax_with_punishment_period10 = data_with_punishment_period10.max()\nmin_with_punishment_period10 = data_with_punishment_period10.min()\n\n# 输出结果\nprint(\"不带惩罚 - 第1期最大值:\", max_without_punishment_period1)\nprint(\"不带惩罚 - 第1期最小值:\", min_without_punishment_period1)\nprint(\"不带惩罚 - 第10期最大值:\", max_without_punishment_period10)\nprint(\"不带惩罚 - 第10期最小值:\", min_without_punishment_period10)\n\nprint(\"带惩罚 - 第1期最大值:\", max_with_punishment_period1)\nprint(\"带惩罚 - 第1期最小值:\", min_with_punishment_period1)\nprint(\"带惩罚 - 第10期最大值:\", max_with_punishment_period10)\nprint(\"带惩罚 - 第10期最小值:\", min_with_punishment_period10)\n\n不带惩罚 - 第1期最大值: 14.102941176470589\n不带惩罚 - 第1期最小值: 10.954545272727273\n不带惩罚 - 第10期最大值: 8.681818181818182\n不带惩罚 - 第10期最小值: 2.97916825\n带惩罚 - 第1期最大值: 15.411765098571777\n带惩罚 - 第1期最小值: 9.477272987365723\n带惩罚 - 第10期最大值: 17.014705657958984\n带惩罚 - 第10期最小值: 10.068181991577148\n\n\n5.A concise way to describe the data is in a summary table. With just four numbers (mean, standard deviation, minimum value, maximum value), we can get a general idea of what the data looks like. Create a table of summary statistics that displays mean, variance, standard deviation, minimum, maximum and range for Periods 1 and 10 and for both experiments. Comment on any similarities and differences in the distributions, both across time and across experiments.\n\nimport pandas as pd\nimport numpy as np\n\n# 数据输入\n# 不带惩罚的贡献数据 (Figure 3)\ndata_without_punishment = {\n    \"Period\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n    \"Copenhagen\": [14.102941176470589, 14.132352941176471, 13.720588235294118, 12.897058823529411, 12.338235294117647, 11.676470588235293, 10.779411764705882, 10.632352941176471, 9.764705882352942, 5.294117647058823],\n    \"Dnipropetrovs’k\": [10.954545272727273, 12.636363454545455, 12.068181636363636, 11.181818, 11.272727454545453, 10.477272545454547, 9.454545272727273, 10.340909272727272, 9.022727272727273, 8.681818181818182],\n    \"Minsk\": [12.7941, 12.3382, 12.5882, 12.2647, 11.8235, 9.88235, 9.88235, 8.42647, 8.26471, 6.94118],\n    \"St. Gallen\": [13.6875, 12.80206675, 12.354183500000001, 10.60418325, 10.989583249999999, 10.70831675, 10.14581675, 9.510415, 7.37499825, 2.97916825],\n}\n\n# 带惩罚的贡献数据 (Figure 2A)\ndata_with_punishment = {\n    \"Period\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n    \"Copenhagen\": [15.411765098571777, 16.97058868408203, 17.735294342041016, 18.16176414489746, 18.367647171020508, 18.691177368164062, 18.735294342041016, 18.323530197143555, 18.073530197143555, 17.014705657958984],\n    \"Dnipropetrovs’k\": [9.477272987365723, 9.909090995788574, 11.840909004211426, 11.454545021057129, 12.681818008422852, 11.75, 11.227272987365723, 10.681818008422852, 9.704545021057129, 10.068181991577148],\n    \"Minsk\": [11.75, 13.235294342041016, 12.897058486938477, 13.382352828979492, 13.970588684082031, 13.014705657958984, 13.176470756530762, 13.691176414489746, 12.411765098571777, 11.70588207244873],\n    \"St. Gallen\": [15.041666984558105, 16.71875, 17.57291603088379, 17.42708396911621, 17.64583396911621, 17.34375, 16.79166603088379, 16.75, 16.88541603088379, 15.15625],\n}\n\n# 转换为DataFrame\ndf_without_punishment = pd.DataFrame(data_without_punishment)\ndf_with_punishment = pd.DataFrame(data_with_punishment)\n\n# 提取第1期和第10期数据\ndata_without_punishment_period1 = df_without_punishment.iloc[0, 1:]\ndata_without_punishment_period10 = df_without_punishment.iloc[-1, 1:]\n\ndata_with_punishment_period1 = df_with_punishment.iloc[0, 1:]\ndata_with_punishment_period10 = df_with_punishment.iloc[-1, 1:]\n\n# 定义函数计算统计量\ndef summary_statistics(data):\n    mean = data.mean()\n    variance = data.var(ddof=1)\n    std_dev = data.std(ddof=1)\n    minimum = data.min()\n    maximum = data.max()\n    data_range = maximum - minimum\n    return [mean, variance, std_dev, minimum, maximum, data_range]\n\n# 计算统计量\nsummary_without_punishment_period1 = summary_statistics(data_without_punishment_period1)\nsummary_without_punishment_period10 = summary_statistics(data_without_punishment_period10)\nsummary_with_punishment_period1 = summary_statistics(data_with_punishment_period1)\nsummary_with_punishment_period10 = summary_statistics(data_with_punishment_period10)\n\n# 创建汇总统计表\nsummary_table = pd.DataFrame(\n    {\n        \"不带惩罚 - 第1期\": summary_without_punishment_period1,\n        \"不带惩罚 - 第10期\": summary_without_punishment_period10,\n        \"带惩罚 - 第1期\": summary_with_punishment_period1,\n        \"带惩罚 - 第10期\": summary_with_punishment_period10,\n    },\n    index=[\"平均值 (Mean)\", \"方差 (Variance)\", \"标准差 (Std Dev)\", \"最小值 (Min)\", \"最大值 (Max)\", \"范围 (Range)\"],\n)\n\n# 输出汇总统计表\nprint(summary_table)\n\n               不带惩罚 - 第1期  不带惩罚 - 第10期  带惩罚 - 第1期  带惩罚 - 第10期\n平均值 (Mean)      12.884772     5.974071  12.920176   13.486255\n方差 (Variance)    1.954102     5.899658   7.977211   10.030599\n标准差 (Std Dev)    1.397892     2.428921   2.824396    3.167112\n最小值 (Min)       10.954545     2.979168   9.477273   10.068182\n最大值 (Max)       14.102941     8.681818  15.411765   17.014706\n范围 (Range)       3.148396     5.702650   5.934492    6.946524\n\n\nPart 2.3 How did changing the rules of the game affect behaviour?\nYou can conduct another experiment to understand why we might see differences in behaviour that are due to chance. First, flip a coin six times, using one hand only, and record the results (for example, Heads, Heads, Tails, etc.). Then, using the same hand, flip a coin six times and record the results again. Compare the outcomes from Question 1(a). Did you get the same number of heads in both cases? Even if you did, was the sequence of the outcomes (for example, Heads, Tails, Tails …) the same in both cases?\npython 2.7 演练\n\nfuncs_to_apply = [range_function, \"max\", \"min\", \"std\", \"mean\"]\nsumm_p = data_p.apply(funcs_to_apply, axis=1).rename(columns={\"&lt;lambda&gt;\": \"range\"})\nsumm_n = data_n.apply(funcs_to_apply, axis=1).rename(columns={\"&lt;lambda&gt;\": \"range\"})\n\n\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[14], line 1\n----&gt; 1 funcs_to_apply = [range_function, \"max\", \"min\", \"std\", \"mean\"]\n      2 summ_p = data_p.apply(funcs_to_apply, axis=1).rename(columns={\"&lt;lambda&gt;\": \"range\"})\n      3 summ_n = data_n.apply(funcs_to_apply, axis=1).rename(columns={\"&lt;lambda&gt;\": \"range\"})\n\nNameError: name 'range_function' is not defined\n\n\n\nTask2:Recreate the matplotlib plots using letsplot library\nTake a line chart as an example,if we use matplotlib plots:\n\nimport matplotlib.pyplot as plt\n\nx = [1, 2, 3, 4, 5]\ny = [2, 3, 5, 7, 11]\n\nplt.plot(x, y)  # 绘制折线图\nplt.xlabel('X-axis')  # 设置x轴标签\nplt.ylabel('Y-axis')  # 设置y轴标签\nplt.title('Simple Line Plot')  # 设置图表标题\nplt.show()  # 显示图表\n\n\n\n\n\n\n\n\nif we use letsplot library\n\n%pip install lets_plot\n\nRequirement already satisfied: lets_plot in d:\\python\\lib\\site-packages (4.5.1)\nRequirement already satisfied: pypng in d:\\python\\lib\\site-packages (from lets_plot) (0.20220715.0)\nRequirement already satisfied: palettable in d:\\python\\lib\\site-packages (from lets_plot) (3.3.3)\nNote: you may need to restart the kernel to use updated packages.\n\n\n\nfrom lets_plot import lets_plot\n\nlets_plot.plot(x=x, y=y, xlabel='X-axis', ylabel='Y-axis', title='Simple Line Plot')\n# 一行代码完成折线图的绘制、轴标签和标题的设置\n\n\n---------------------------------------------------------------------------\nImportError                               Traceback (most recent call last)\nCell In[10], line 1\n----&gt; 1 from lets_plot import lets_plot\n      3 lets_plot.plot(x=x, y=y, xlabel='X-axis', ylabel='Y-axis', title='Simple Line Plot')\n      4 # 一行代码完成折线图的绘制、轴标签和标题的设置\n\nImportError: cannot import name 'lets_plot' from 'lets_plot' (d:\\python\\Lib\\site-packages\\lets_plot\\__init__.py)\n\n\n\nSource: Original dataframe\n\n\npractice3-1\n\n\n%pip install requests beautifulsoup4\n\nRequirement already satisfied: requests in c:\\users\\hp\\anaconda3\\lib\\site-packages (2.32.3)\nRequirement already satisfied: beautifulsoup4 in c:\\users\\hp\\anaconda3\\lib\\site-packages (4.12.3)\nRequirement already satisfied: charset-normalizer&lt;4,&gt;=2 in c:\\users\\hp\\anaconda3\\lib\\site-packages (from requests) (3.3.2)\nRequirement already satisfied: idna&lt;4,&gt;=2.5 in c:\\users\\hp\\anaconda3\\lib\\site-packages (from requests) (3.7)\nRequirement already satisfied: urllib3&lt;3,&gt;=1.21.1 in c:\\users\\hp\\anaconda3\\lib\\site-packages (from requests) (2.2.3)\nRequirement already satisfied: certifi&gt;=2017.4.17 in c:\\users\\hp\\anaconda3\\lib\\site-packages (from requests) (2024.8.30)\nRequirement already satisfied: soupsieve&gt;1.2 in c:\\users\\hp\\anaconda3\\lib\\site-packages (from beautifulsoup4) (2.5)\nNote: you may need to restart the kernel to use updated packages.\n\n\n\nimport requests\n \n# 定义请求的 URL 和 headers\nurl = \"https://movie.douban.com/top250\"\nheaders = {\n    \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36\"\n}\n \n# 发送 GET 请求\nresponse = requests.get(url, headers=headers)\nresponse.encoding = 'utf-8'  # 设置编码方式\nhtml_content = response.text  # 获取网页的 HTML 内容\nprint(\"网页内容加载成功！\")\n\n网页内容加载成功！\n\n\n\nfrom bs4 import BeautifulSoup\n \n# 使用 Beautiful Soup 解析 HTML\nsoup = BeautifulSoup(html_content, 'html.parser')\n \n# 提取电影名称、描述、评分和评价人数\nmovies = []\nfor item in soup.find_all('div', class_='item'):\n    title = item.find('span', class_='title').get_text()  # 电影名称\n    description = item.find('span', class_='inq')  # 电影描述\n    rating = item.find('span', class_='rating_num').get_text()  # 评分\n    votes = item.find('div', class_='star').find_all('span')[3].get_text()  # 评价人数\n    \n    # 如果没有描述，将其置为空字符串\n    if description:\n        description = description.get_text()\n    else:\n        description = ''\n    \n    movie = {\n        \"title\": title,\n        \"description\": description,\n        \"rating\": rating,\n        \"votes\": votes.replace('人评价', '').strip()\n    }\n    movies.append(movie)\n \nprint(\"数据提取成功！\")\n\n数据提取成功！\n\n\n\nimport csv\n \n# 将数据保存到 CSV 文件\nwith open('douban_top250.csv', 'w', newline='', encoding='utf-8') as csvfile:\n    fieldnames = ['title', 'description', 'rating', 'votes']\n    writer = csv.DictWriter(csvfile, fieldnames=fieldnames)\n \n    writer.writeheader()  # 写入表头\n    for movie in movies:\n        writer.writerow(movie)  # 写入每一行数据\n \nprint(\"数据已成功保存到 douban_top250.csv\")\n\n数据已成功保存到 douban_top250.csv\n\n\nSource: 定义请求的 URL 和 headers\n\n\npractice3-2\n\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport requests\nfrom bs4 import BeautifulSoup\nimport textwrap\n\n\npd.read_csv(\n    \"https://vincentarelbundock.github.io/Rdatasets/csv/dplyr/storms.csv\", nrows=10\n)\n\n\n\n\n\n\n\n\nrownames\nname\nyear\nmonth\nday\nhour\nlat\nlong\nstatus\ncategory\nwind\npressure\ntropicalstorm_force_diameter\nhurricane_force_diameter\n\n\n\n\n0\n1\nAmy\n1975\n6\n27\n0\n27.5\n-79.0\ntropical depression\nNaN\n25\n1013\nNaN\nNaN\n\n\n1\n2\nAmy\n1975\n6\n27\n6\n28.5\n-79.0\ntropical depression\nNaN\n25\n1013\nNaN\nNaN\n\n\n2\n3\nAmy\n1975\n6\n27\n12\n29.5\n-79.0\ntropical depression\nNaN\n25\n1013\nNaN\nNaN\n\n\n3\n4\nAmy\n1975\n6\n27\n18\n30.5\n-79.0\ntropical depression\nNaN\n25\n1013\nNaN\nNaN\n\n\n4\n5\nAmy\n1975\n6\n28\n0\n31.5\n-78.8\ntropical depression\nNaN\n25\n1012\nNaN\nNaN\n\n\n5\n6\nAmy\n1975\n6\n28\n6\n32.4\n-78.7\ntropical depression\nNaN\n25\n1012\nNaN\nNaN\n\n\n6\n7\nAmy\n1975\n6\n28\n12\n33.3\n-78.0\ntropical depression\nNaN\n25\n1011\nNaN\nNaN\n\n\n7\n8\nAmy\n1975\n6\n28\n18\n34.0\n-77.0\ntropical depression\nNaN\n30\n1006\nNaN\nNaN\n\n\n8\n9\nAmy\n1975\n6\n29\n0\n34.4\n-75.8\ntropical storm\nNaN\n35\n1004\nNaN\nNaN\n\n\n9\n10\nAmy\n1975\n6\n29\n6\n34.0\n-74.8\ntropical storm\nNaN\n40\n1002\nNaN\nNaN\n\n\n\n\n\n\n\n\nimport requests\n\nurl = \"https://api.ons.gov.uk/timeseries/JP9Z/dataset/UNEM/data\"\n\n# Get the data from the ONS API:\njson_data = requests.get(url).json()\n\n# Prep the data for a quick plot\ntitle = json_data[\"description\"][\"title\"]\ndf = (\n    pd.DataFrame(pd.json_normalize(json_data[\"months\"]))\n    .assign(\n        date=lambda x: pd.to_datetime(x[\"date\"]),\n        value=lambda x: pd.to_numeric(x[\"value\"]),\n    )\n    .set_index(\"date\")\n)\n\ndf[\"value\"].plot(title=title, ylim=(0, df[\"value\"].max() * 1.2), lw=3.0);\n\n\n---------------------------------------------------------------------------\nJSONDecodeError                           Traceback (most recent call last)\nFile c:\\Users\\HP\\anaconda3\\Lib\\site-packages\\requests\\models.py:974, in Response.json(self, **kwargs)\n    973 try:\n--&gt; 974     return complexjson.loads(self.text, **kwargs)\n    975 except JSONDecodeError as e:\n    976     # Catch JSON-related errors and raise as requests.JSONDecodeError\n    977     # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n\nFile c:\\Users\\HP\\anaconda3\\Lib\\json\\__init__.py:346, in loads(s, cls, object_hook, parse_float, parse_int, parse_constant, object_pairs_hook, **kw)\n    343 if (cls is None and object_hook is None and\n    344         parse_int is None and parse_float is None and\n    345         parse_constant is None and object_pairs_hook is None and not kw):\n--&gt; 346     return _default_decoder.decode(s)\n    347 if cls is None:\n\nFile c:\\Users\\HP\\anaconda3\\Lib\\json\\decoder.py:337, in JSONDecoder.decode(self, s, _w)\n    333 \"\"\"Return the Python representation of ``s`` (a ``str`` instance\n    334 containing a JSON document).\n    335 \n    336 \"\"\"\n--&gt; 337 obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n    338 end = _w(s, end).end()\n\nFile c:\\Users\\HP\\anaconda3\\Lib\\json\\decoder.py:355, in JSONDecoder.raw_decode(self, s, idx)\n    354 except StopIteration as err:\n--&gt; 355     raise JSONDecodeError(\"Expecting value\", s, err.value) from None\n    356 return obj, end\n\nJSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nDuring handling of the above exception, another exception occurred:\n\nJSONDecodeError                           Traceback (most recent call last)\nCell In[3], line 6\n      3 url = \"https://api.ons.gov.uk/timeseries/JP9Z/dataset/UNEM/data\"\n      5 # Get the data from the ONS API:\n----&gt; 6 json_data = requests.get(url).json()\n      8 # Prep the data for a quick plot\n      9 title = json_data[\"description\"][\"title\"]\n\nFile c:\\Users\\HP\\anaconda3\\Lib\\site-packages\\requests\\models.py:978, in Response.json(self, **kwargs)\n    974     return complexjson.loads(self.text, **kwargs)\n    975 except JSONDecodeError as e:\n    976     # Catch JSON-related errors and raise as requests.JSONDecodeError\n    977     # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n--&gt; 978     raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n\nJSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n\n\n\nurl = \"http://aeturrell.com/research\"\npage = requests.get(url)\npage.text[:300]\n\n'&lt;!DOCTYPE html&gt;\\n&lt;html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"en\" xml:lang=\"en\"&gt;&lt;head&gt;\\n\\n&lt;meta charset=\"utf-8\"&gt;\\n&lt;meta name=\"generator\" content=\"quarto-1.5.56\"&gt;\\n\\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\"&gt;\\n\\n&lt;meta name=\"author\" content=\"Arthur Turrell\"&gt;\\n'\n\n\n\nsoup = BeautifulSoup(page.text, \"html.parser\")\nprint(soup.prettify()[60000:60500])\n\n       &lt;/div&gt;\n          &lt;div class=\"project-category\"&gt;\n           &lt;a href=\"#category=gender pay gap\"&gt;\n            gender pay gap\n           &lt;/a&gt;\n          &lt;/div&gt;\n          &lt;div class=\"project-category\"&gt;\n           &lt;a href=\"#category=labour\"&gt;\n            labour\n           &lt;/a&gt;\n          &lt;/div&gt;\n          &lt;div class=\"project-category\"&gt;\n           &lt;a href=\"#category=text analysis\"&gt;\n            text analysis\n           &lt;/a&gt;\n          &lt;/div&gt;\n         &lt;/div&gt;\n         &lt;div class=\"project-details-listing\n\n\n\n# Get all paragraphs\nall_paras = soup.find_all(\"p\")\n# Just show one of the paras\nall_paras[1]\n\n&lt;p&gt;Botta, Federico, Robin Lovelace, Laura Gilbert, and Arthur Turrell. \"Packaging code and data for reproducible research: A case study of journey time statistics.\" &lt;i&gt;Environment and Planning B: Urban Analytics and City Science&lt;/i&gt; (2024): 23998083241267331. doi: &lt;a href=\"https://doi.org/10.1177/23998083241267331\"&gt;&lt;code&gt;10.1177/23998083241267331&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;\n\n\n\nall_paras[1].text\n\n'Botta, Federico, Robin Lovelace, Laura Gilbert, and Arthur Turrell. \"Packaging code and data for reproducible research: A case study of journey time statistics.\" Environment and Planning B: Urban Analytics and City Science (2024): 23998083241267331. doi: 10.1177/23998083241267331'\n\n\n\nprojects = soup.find_all(\"div\", class_=\"project-content listing-pub-info\")\nprojects = [x.text.strip() for x in projects]\nprojects[:4]\n\n['Botta, Federico, Robin Lovelace, Laura Gilbert, and Arthur Turrell. \"Packaging code and data for reproducible research: A case study of journey time statistics.\" Environment and Planning B: Urban Analytics and City Science (2024): 23998083241267331. doi: 10.1177/23998083241267331',\n 'Kalamara, Eleni, Arthur Turrell, Chris Redl, George Kapetanios, and Sujit Kapadia. \"Making text count: economic forecasting using newspaper text.\" Journal of Applied Econometrics 37, no. 5 (2022): 896-919. doi: 10.1002/jae.2907',\n 'Turrell, A., Speigner, B., Copple, D., Djumalieva, J. and Thurgood, J., 2021. Is the UK’s productivity puzzle mostly driven by occupational mismatch? An analysis using big data on job vacancies. Labour Economics, 71, p.102013. doi: 10.1016/j.labeco.2021.102013',\n 'Haldane, Andrew G., and Arthur E. Turrell. \"Drawing on different disciplines: macroeconomic agent-based models.\" Journal of Evolutionary Economics 29 (2019): 39-66. doi: 10.1007/s00191-018-0557-5']\n\n\n\nstart, stop = 0, 50\nroot_url = \"www.codingforeconomists.com/page=\"\ninfo_on_pages = [scraper(root_url + str(i)) for i in range(start, stop)]\n\n\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[17], line 3\n      1 start, stop = 0, 50\n      2 root_url = \"www.codingforeconomists.com/page=\"\n----&gt; 3 info_on_pages = [scraper(root_url + str(i)) for i in range(start, stop)]\n\nNameError: name 'scraper' is not defined\n\n\n\n\ndf_list = pd.read_html(\n    \"https://simple.wikipedia.org/wiki/FIFA_World_Cup\", match=\"Sweden\"\n)\n# Retrieve first and only entry from list of dataframes\ndf = df_list[0]\ndf.head()\n\n\n\n\n\n\n\n\nYears\nHosts\nWinners\nScore\nRunner's-up\nThird place\nScore.1\nFourth place\n\n\n\n\n0\n1930 Details\nUruguay\nUruguay\n4 - 2\nArgentina\nUnited States\n[note 1]\nYugoslavia\n\n\n1\n1934 Details\nItaly\nItaly\n2 - 1\nCzechoslovakia\nGermany\n3 - 2\nAustria\n\n\n2\n1938 Details\nFrance\nItaly\n4 - 2\nHungary\nBrazil\n4 - 2\nSweden\n\n\n3\n1950 Details\nBrazil\nUruguay\n2 - 1\nBrazil\nSweden\n[note 2]\nSpain\n\n\n4\n1954 Details\nSwitzerland\nWest Germany\n3 - 2\nHungary\nAustria\n3 - 1\nUruguay\n\n\n\n\n\n\n\n\nimport pdftotext\nfrom pathlib import Path\n\n# Download the pdf_with_table.pdf file from\n# https://github.com/aeturrell/coding-for-economists/blob/main/data/pdf_with_table.pdf\n# and put it in a subfolder called data before running the next line\n\n# Load the PDF\nwith open(Path(\"data/pdf_with_table.pdf\"), \"rb\") as f:\n    pdf = pdftotext.PDF(f)\n\n# Read all the text into one string; print a chunk of the string\nprint(\"\\n\\n\".join(pdf)[:220])\n\n\n---------------------------------------------------------------------------\nModuleNotFoundError                       Traceback (most recent call last)\nCell In[19], line 1\n----&gt; 1 import pdftotext\n      2 from pathlib import Path\n      4 # Download the pdf_with_table.pdf file from\n      5 # https://github.com/aeturrell/coding-for-economists/blob/main/data/pdf_with_table.pdf\n      6 # and put it in a subfolder called data before running the next line\n      7 \n      8 # Load the PDF\n\nModuleNotFoundError: No module named 'pdftotext'\n\n\n\n\n%pip install pdftotext\n\nCollecting pdftotextNote: you may need to restart the kernel to use updated packages.\n\n  Downloading pdftotext-2.2.2.tar.gz (113 kB)\n  Preparing metadata (setup.py): started\n  Preparing metadata (setup.py): finished with status 'done'\nBuilding wheels for collected packages: pdftotext\n  Building wheel for pdftotext (setup.py): started\n  Building wheel for pdftotext (setup.py): finished with status 'error'\n  Running setup.py clean for pdftotext\nFailed to build pdftotext\n\n\nSource: Get the data from the ONS API:\n\n\npractice3-3\n\n\nfrom bs4 import BeautifulSoup\nimport requests\nimport re\nimport pandas as pd\n\n\n# Downloading imdb top 250 movie's data\nurl = 'http://www.imdb.com/chart/top'\nresponse = requests.get(url)\nsoup = BeautifulSoup(response.text, \"html.parser\")\n\n\nmovies = soup.select('td.titleColumn')\ncrew = [a.attrs.get('title') for a in soup.select('td.titleColumn a')]\nratings = [b.attrs.get('data-value')\n        for b in soup.select('td.posterColumn span[name=ir]')]\n\n\n# create a empty list for storing\n# movie information\nlist = []\n\n# Iterating over movies to extract\n# each movie's details\nfor index in range(0, len(movies)):\n    \n    # Separating movie into: 'place',\n    # 'title', 'year'\n    movie_string = movies[index].get_text()\n    movie = (' '.join(movie_string.split()).replace('.', ''))\n    movie_title = movie[len(str(index))+1:-7]\n    year = re.search('\\((.*?)\\)', movie_string).group(1)\n    place = movie[:len(str(index))-(len(movie))]\n    data = {\"place\": place,\n            \"movie_title\": movie_title,\n            \"rating\": ratings[index],\n            \"year\": year,\n            \"star_cast\": crew[index],\n            }\n    list.append(data)\n\n\nfor movie in list:\n    print(movie['place'], '-', movie['movie_title'], '('+movie['year'] +\n        ') -', 'Starring:', movie['star_cast'], movie['rating'])\n\n\n#saving the list as dataframe\n#then converting into .csv file\ndf = pd.DataFrame(list)\ndf.to_csv('imdb_top_250_movies.csv',index=False)\n\n\nfrom bs4 import BeautifulSoup\nimport requests\nimport re\nimport pandas as pd\n\n\n# Downloading imdb top 250 movie's data\nurl = 'http://www.imdb.com/chart/top'\nresponse = requests.get(url)\nsoup = BeautifulSoup(response.text, \"html.parser\")\nmovies = soup.select('td.titleColumn')\ncrew = [a.attrs.get('title') for a in soup.select('td.titleColumn a')]\nratings = [b.attrs.get('data-value')\n        for b in soup.select('td.posterColumn span[name=ir]')]\n\n\n\n\n# create a empty list for storing\n# movie information\nlist = []\n\n# Iterating over movies to extract\n# each movie's details\nfor index in range(0, len(movies)):\n    \n    # Separating movie into: 'place',\n    # 'title', 'year'\n    movie_string = movies[index].get_text()\n    movie = (' '.join(movie_string.split()).replace('.', ''))\n    movie_title = movie[len(str(index))+1:-7]\n    year = re.search('\\((.*?)\\)', movie_string).group(1)\n    place = movie[:len(str(index))-(len(movie))]\n    data = {\"place\": place,\n            \"movie_title\": movie_title,\n            \"rating\": ratings[index],\n            \"year\": year,\n            \"star_cast\": crew[index],\n            }\n    list.append(data)\n\n# printing movie details with its rating.\nfor movie in list:\n    print(movie['place'], '-', movie['movie_title'], '('+movie['year'] +\n        ') -', 'Starring:', movie['star_cast'], movie['rating'])\n\n\n##.......##\ndf = pd.DataFrame(list)\ndf.to_csv('imdb_top_250_movies.csv',index=False)\n\nSource: Downloading imdb top 250 movie's data\n\n\npractice4-1\n\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\nimdb_data = pd.read_csv('IMDB_Top250.csv')  # Replace with actual file path\ndouban_data = pd.read_csv('douban_top250.csv')  # Replace with actual file path\n\n\nfrom bs4 import BeautifulSoup\nimport re\nimport urllib.request, urllib.error  # for URL requests\nimport csv  # for saving as CSV\n\n\n# Regular expressions to extract information\nfindLink = re.compile(r'&lt;a href=\"(.*?)\"&gt;')  # detail link\nfindImgSrc = re.compile(r'&lt;img.*src=\"(.*?)\"', re.S)  # image link\nfindTitle = re.compile(r'&lt;span class=\"title\"&gt;(.*)&lt;/span&gt;')  # movie title\nfindRating = re.compile(r'&lt;span class=\"rating_num\" property=\"v:average\"&gt;(.*)&lt;/span&gt;')  # rating\nfindJudge = re.compile(r'&lt;span&gt;(\\d*)人评价&lt;/span&gt;')  # number of reviews\nfindInq = re.compile(r'&lt;span class=\"inq\"&gt;(.*)&lt;/span&gt;')  # summary\nfindBd = re.compile(r'&lt;p class=\"\"&gt;(.*?)&lt;/p&gt;', re.S)  # additional info\n\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Load datasets\ndouban_file_path = 'douban_top250.csv'  \nimdb_file_path = 'IMDB_Top250.csv'      \n\ndouban_data = pd.read_csv(douban_file_path, encoding='utf-8', on_bad_lines='skip')\nimdb_data = pd.read_csv(imdb_file_path, encoding='utf-8', on_bad_lines='skip')\n\n# Renaming columns for clarity and merging compatibility\ndouban_data.rename(columns={\n    '影片中文名': 'Title',\n    '评分': 'Douban_Score',\n    '评价数': 'Douban_Reviews',\n    '相关信息': 'Douban_Info'\n}, inplace=True)\n\n\nimdb_data.rename(columns={\n    'Name': 'Title',\n    'Year': 'Release_Year',\n    'IMDB Ranking': 'IMDB_Score',\n    'Genre': 'IMDB_Genre',\n    'Director': 'IMDB_Director'\n}, inplace=True)\n\n\n# Calculate average scores for both platforms\ndouban_avg_score = douban_data['Douban_Score'].mean()\nimdb_avg_score = imdb_data['IMDB_Score'].mean()\n\n# Find overlapping movies by title\noverlap_movies = pd.merge(douban_data, imdb_data, on='Title')\n\n# Visualize average scores\nplt.figure(figsize=(8, 5))\nplt.bar(['Douban', 'IMDb'], [douban_avg_score, imdb_avg_score], alpha=0.7)\nplt.title('Average Scores: Douban vs IMDb')\nplt.ylabel('Average Score')\nplt.show()\n\n# Analyze release year distribution\nplt.figure(figsize=(10, 5))\ndouban_data['Douban_Info'] = douban_data['Douban_Info'].astype(str)\ndouban_years = douban_data['Douban_Info'].str.extract(r'(\\d{4})').dropna()\ndouban_years = douban_years[0].astype(int).value_counts().sort_index()\n\nimdb_years = imdb_data['Release_Year'].value_counts().sort_index()\n\ndouban_years.plot(kind='bar', alpha=0.7, label='Douban', figsize=(10, 5))\nimdb_years.plot(kind='bar', alpha=0.7, label='IMDb', color='orange')\nplt.title('Release Year Distribution')\nplt.xlabel('Year')\nplt.ylabel('Number of Movies')\nplt.legend()\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Analyze genre distribution\nimdb_genres = imdb_data['IMDB_Genre'].str.split(',').explode().str.strip().value_counts()\nplt.figure(figsize=(10, 5))\nimdb_genres.head(10).plot(kind='bar', alpha=0.7, color='orange')\nplt.title('Top 10 IMDb Genres')\nplt.xlabel('Genre')\nplt.ylabel('Count')\nplt.show()\n\n# Top directors by movie count\ndouban_directors = douban_data['Douban_Info'].str.extract(r'导演: (.+?) ').dropna()\ndouban_top_directors = douban_directors[0].value_counts().head(10)\n\nimdb_top_directors = imdb_data['IMDB_Director'].value_counts().head(10)\n\nplt.figure(figsize=(10, 5))\ndouban_top_directors.plot(kind='bar', alpha=0.7, label='Douban', color='blue')\nplt.title('Top 10 Douban Directors')\nplt.xlabel('Director')\nplt.ylabel('Movie Count')\nplt.show()\n\nplt.figure(figsize=(10, 5))\nimdb_top_directors.plot(kind='bar', alpha=0.7, label='IMDb', color='orange')\nplt.title('Top 10 IMDb Directors')\nplt.xlabel('Director')\nplt.ylabel('Movie Count')\nplt.show()\n\n# Save overlapping movies to a CSV file\noverlap_movies.to_csv('overlap_movies.csv', index=False)\n\n# Print results\nprint(f\"豆瓣平均评分: {douban_avg_score}\")\nprint(f\"IMDb平均评分: {imdb_avg_score}\")\nprint(f\"重叠电影数量: {len(overlap_movies)}\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n豆瓣平均评分: 8.9396\nIMDb平均评分: 8.254\n重叠电影数量: 0\n\n\nSource: Regular expressions to extract information"
  },
  {
    "objectID": "homework/Homework-3/hw-majors.embed.html",
    "href": "homework/Homework-3/hw-majors.embed.html",
    "title": "",
    "section": "",
    "text": "P— title: “HW - What should I major in?”\n\nThe first step in the process of turning information into knowledge process is to summarize and describe the raw information - the data. In this assignment we explore data on college majors and earnings, specifically the data begin the FiveThirtyEight story “The Economic Guide To Picking A College Major”.\nThese data originally come from the American Community Survey (ACS) 2010-2012 Public Use Microdata Series.\nWe should also note that there are many considerations that go into picking a major. Earnings potential and employment prospects are two of them, and they are important, but they don’t tell the whole story. Keep this in mind as you analyze the data.\n\n\nUse pandas for data warnagling and processing,letsplot and matplotlib for visualization.\n\n\n\nThe data can be found on Kaggle.\nLet’s think about some questions we might want to answer with these data:\n\nWhich major has the lowest unemployment rate?\nWhich major has the highest percentage of women?\nHow do the distributions of median income compare across major categories?\nDo women tend to choose majors with lower or higher earnings?\n\nIn the next section we aim to answer these questions."
  },
  {
    "objectID": "homework/Homework-3/hw-majors.embed.html#packages",
    "href": "homework/Homework-3/hw-majors.embed.html#packages",
    "title": "",
    "section": "",
    "text": "Use pandas for data warnagling and processing,letsplot and matplotlib for visualization."
  },
  {
    "objectID": "homework/Homework-3/hw-majors.embed.html#data",
    "href": "homework/Homework-3/hw-majors.embed.html#data",
    "title": "",
    "section": "",
    "text": "The data can be found on Kaggle.\nLet’s think about some questions we might want to answer with these data:\n\nWhich major has the lowest unemployment rate?\nWhich major has the highest percentage of women?\nHow do the distributions of median income compare across major categories?\nDo women tend to choose majors with lower or higher earnings?\n\nIn the next section we aim to answer these questions."
  },
  {
    "objectID": "homework/Homework-3/hw-majors.embed.html#which-major-has-the-lowest-unemployment-rate",
    "href": "homework/Homework-3/hw-majors.embed.html#which-major-has-the-lowest-unemployment-rate",
    "title": "",
    "section": "Which major has the lowest unemployment rate?",
    "text": "Which major has the lowest unemployment rate?\nIn order to answer this question all you need to use pandas sorting and grouping functions."
  },
  {
    "objectID": "homework/Homework-3/hw-majors.embed.html#which-major-has-the-highest-percentage-of-women",
    "href": "homework/Homework-3/hw-majors.embed.html#which-major-has-the-highest-percentage-of-women",
    "title": "",
    "section": "Which major has the highest percentage of women?",
    "text": "Which major has the highest percentage of women?\nTo answer such a question we need to arrange the data in descending order. For example, if earlier we were interested in the major with the highest unemployment rate, we would use the following:\n\nUsing what you’ve learned so far, arrange the data in descending order with respect to proportion of women in a major, and display only the major, the total number of people with major, and proportion of women. Show only the top 3 majors."
  },
  {
    "objectID": "homework/Homework-3/hw-majors.embed.html#how-do-the-distributions-of-median-income-compare-across-major-categories",
    "href": "homework/Homework-3/hw-majors.embed.html#how-do-the-distributions-of-median-income-compare-across-major-categories",
    "title": "",
    "section": "How do the distributions of median income compare across major categories?",
    "text": "How do the distributions of median income compare across major categories?\nA percentile is a measure used in statistics indicating the value below which a given percentage of observations in a group of observations fall. For example, the 20th percentile is the value below which 20% of the observations may be found. (Source: [Wikipedia](https://en.wikipedia.org/wiki/Percentile)\nThere are three types of incomes reported in this data frame: p25th, median, and p75th. These correspond to the 25th, 50th, and 75th percentiles of the income distribution of sampled individuals for a given major.\n\nWhy do we often choose the median, rather than the mean, to describe the typical income of a group of people?\n\nThe question we want to answer “How do the distributions of median income compare across major categories?”. We need to do a few things to answer this question: First, we need to group the data by major_category. Then, we need a way to summarize the distributions of median income within these groups. This decision will depend on the shapes of these distributions. So first, we need to visualize the data.\nLet’s start simple and take a look at the distribution of all median incomes, without considering the major categories. Create a hishogram. Consider the binwidth we chose for our histogram. It’s good practice to always think in the context of the data and try out a few binwidths before settling on a binwidth. You might ask yourself: “What would be a meaningful difference in median incomes?” $1 is obviously too little, $10000 might be too high.\n\nTry binwidths of $1000 and $5000 and choose one. Explain your reasoning for your choice.\nPlot the distribution of median income using a histogram, faceted by major_category. Use the binwidth you chose in the earlier exercise.\n\nNow that we’ve seen the shapes of the distributions of median incomes for each major category, we should have a better idea for which summary statistic to use to quantify the typical median income.\n\nWhich major category has the highest typical (you’ll need to decide what this means) median income?\nWhich major category is the least popular in this sample?"
  },
  {
    "objectID": "homework/Homework-3/hw-majors.embed.html#all-stem-fields-arent-the-same",
    "href": "homework/Homework-3/hw-majors.embed.html#all-stem-fields-arent-the-same",
    "title": "",
    "section": "All STEM fields aren’t the same",
    "text": "All STEM fields aren’t the same\nOne of the sections of the FiveThirtyEight story is “All STEM fields aren’t the same”. Let’s see if this is true.\nFirst, let’s create a list called stem_categories that lists the major categories that are considered STEM fields.\nThen, use this to create a new variable in our dataframe indicating whether a major is STEM or not.\nWe can use the logical operators to also filter our data for STEM majors whose median earnings is less than median for all majors’ median earnings.\n\nWhich STEM majors have median salaries equal to or less than the median for all majors’ median earnings? Your output should only show the major name and median, 25th percentile, and 75th percentile earning for that major as and should be sorted such that the major with the highest median earning is on top."
  },
  {
    "objectID": "homework/Homework-3/hw-majors.embed.html#what-types-of-majors-do-women-tend-to-major-in",
    "href": "homework/Homework-3/hw-majors.embed.html#what-types-of-majors-do-women-tend-to-major-in",
    "title": "",
    "section": "What types of majors do women tend to major in?",
    "text": "What types of majors do women tend to major in?\n\nCreate a scatterplot of median income vs. proportion of women in that major, coloured by whether the major is in a STEM field or not. Describe the association between these three variables."
  },
  {
    "objectID": "homework/Homework-3/hw-majors.embed.html#further-exploration",
    "href": "homework/Homework-3/hw-majors.embed.html#further-exploration",
    "title": "",
    "section": "Further exploration",
    "text": "Further exploration\n\nAsk a question of interest to you, and answer it using summary statistic(s) and/or visualization(s)."
  },
  {
    "objectID": "docs/homework/Homework-3/lecture4-LiuYuting-homework.out.html",
    "href": "docs/homework/Homework-3/lecture4-LiuYuting-homework.out.html",
    "title": "",
    "section": "",
    "text": "import pandas as pd\nall_ages = pd.read_csv('D:\\shujuji/achive/all-ages.csv')\nprint(all_ages.head())\n\n   Major_code                                  Major  \\\n0        1100                    GENERAL AGRICULTURE   \n1        1101  AGRICULTURE PRODUCTION AND MANAGEMENT   \n2        1102                 AGRICULTURAL ECONOMICS   \n3        1103                        ANIMAL SCIENCES   \n4        1104                           FOOD SCIENCE   \n\n                    Major_category   Total  Employed  \\\n0  Agriculture & Natural Resources  128148     90245   \n1  Agriculture & Natural Resources   95326     76865   \n2  Agriculture & Natural Resources   33955     26321   \n3  Agriculture & Natural Resources  103549     81177   \n4  Agriculture & Natural Resources   24280     17281   \n\n   Employed_full_time_year_round  Unemployed  Unemployment_rate  Median  \\\n0                          74078        2423           0.026147   50000   \n1                          64240        2266           0.028636   54000   \n2                          22810         821           0.030248   63000   \n3                          64937        3619           0.042679   46000   \n4                          12722         894           0.049188   62000   \n\n   P25th    P75th  \n0  34000  80000.0  \n1  36000  80000.0  \n2  40000  98000.0  \n3  30000  72000.0  \n4  38500  90000.0  \n\n\n\nlowest_unemployment = all_ages.sort_values(by='Unemployment_rate').head(1)\nprint(lowest_unemployment[['Major', 'Unemployment_rate']])\n\n                                         Major  Unemployment_rate\n26  EDUCATIONAL ADMINISTRATION AND SUPERVISION                0.0\n\n\n\nprint(all_ages.columns)\n\nIndex(['Major_code', 'Major', 'Major_category', 'Total', 'Employed',\n       'Employed_full_time_year_round', 'Unemployed', 'Unemployment_rate',\n       'Median', 'P25th', 'P75th'],\n      dtype='object')\n\n\n\nimport pandas as pd\nwomen_stem = pd.read_csv('D:/shujuji/achive/women-stem.csv')\nprint(women_stem.head())\n\n   Rank  Major_code                                      Major Major_category  \\\n0     1        2419                      PETROLEUM ENGINEERING    Engineering   \n1     2        2416             MINING AND MINERAL ENGINEERING    Engineering   \n2     3        2415                  METALLURGICAL ENGINEERING    Engineering   \n3     4        2417  NAVAL ARCHITECTURE AND MARINE ENGINEERING    Engineering   \n4     5        2418                        NUCLEAR ENGINEERING    Engineering   \n\n   Total   Men  Women  ShareWomen  Median  \n0   2339  2057    282    0.120564  110000  \n1    756   679     77    0.101852   75000  \n2    856   725    131    0.153037   73000  \n3   1258  1123    135    0.107313   70000  \n4   2573  2200    373    0.144967   65000  \n\n\n\nhighest_women_share = women_stem.sort_values(by='ShareWomen', ascending=False).head(3)\nprint(highest_women_share[['Major', 'Total', 'ShareWomen']])\n\n                                            Major   Total  ShareWomen\n74  COMMUNICATION DISORDERS SCIENCES AND SERVICES   38279    0.967998\n40                     MEDICAL ASSISTING SERVICES   11123    0.927807\n26                                        NURSING  209394    0.896019\n\n\n\nimport matplotlib.pyplot as plt\nall_ages['Median'].plot(kind='hist', bins=30, width=1000)\nplt.title(\"收入中位数分布\")\nplt.xlabel(\"收入中位数\")\nplt.ylabel(\"频数\")\nplt.show()\n\n\n\n\n\n\n\n\n\nall_ages['Median'].plot(kind='hist', bins=50, width=5000)\nplt.title(\"收入中位数分布\")\nplt.xlabel(\"收入中位数\")\nplt.ylabel(\"频数\")\nplt.show()\n\n\n\n\n\n\n\n\n\ncategory_median = all_ages.groupby('Major_category')['Median'].median().sort_values(ascending=False)\nprint(category_median)\n\nMajor_category\nEngineering                            75000.0\nComputers & Mathematics                66000.0\nBusiness                               60000.0\nPhysical Sciences                      60000.0\nAgriculture & Natural Resources        53000.0\nSocial Science                         52000.0\nBiology & Life Science                 51500.0\nCommunications & Journalism            50000.0\nHealth                                 50000.0\nLaw & Public Policy                    50000.0\nIndustrial Arts & Consumer Services    48000.0\nHumanities & Liberal Arts              46000.0\nArts                                   45000.0\nPsychology & Social Work               45000.0\nInterdisciplinary                      43000.0\nEducation                              42800.0\nName: Median, dtype: float64\n\n\n\nstem_categories = ['Engineering', 'Computers & Mathematics', 'Physical Sciences']\nall_ages['Is_STEM'] = all_ages['Major_category'].apply(lambda x: x in stem_categories)\nmedian_overall = all_ages['Median'].median()\nlow_earning_stem = all_ages[(all_ages['Is_STEM']) & (all_ages['Median'] &lt;= median_overall)]\nprint(low_earning_stem[['Major', 'Median', 'P25th', 'P75th']].sort_values(by='Median', ascending=False))\n\n                         Major  Median  P25th    P75th\n17  COMMUNICATION TECHNOLOGIES   50000  34500  75000.0\n\n\n\nprint(women_stem.columns)\n\nIndex(['Rank', 'Major_code', 'Major', 'Major_category', 'Total', 'Men',\n       'Women', 'ShareWomen', 'Median'],\n      dtype='object')\n\n\n\nplt.scatter(women_stem['ShareWomen'], women_stem['Median'], c=women_stem['Major_category'].apply(lambda x: 'red' if x else 'blue'))\nplt.title(\"The relationship between the proportion of women and the median income\")\nplt.xlabel(\"ShareWomen\")\nplt.ylabel(\"Median\")\nplt.show()"
  },
  {
    "objectID": "docs/homework/Homework-2/Lecture3 LiuYuting Homework-1.out.html",
    "href": "docs/homework/Homework-2/Lecture3 LiuYuting Homework-1.out.html",
    "title": "",
    "section": "",
    "text": "import pandas as pd\ndata = pd.read_csv('nobel_data.csv')\nprint(data.info())\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 935 entries, 0 to 934\nData columns (total 26 columns):\n #   Column                 Non-Null Count  Dtype \n---  ------                 --------------  ----- \n 0   id                     935 non-null    int64 \n 1   firstname              935 non-null    object\n 2   surname                906 non-null    object\n 3   year                   935 non-null    int64 \n 4   category               935 non-null    object\n 5   affiliation            685 non-null    object\n 6   city                   680 non-null    object\n 7   country                681 non-null    object\n 8   born_date              902 non-null    object\n 9   died_date              627 non-null    object\n 10  gender                 935 non-null    object\n 11  born_city              907 non-null    object\n 12  born_country           907 non-null    object\n 13  born_country_code      907 non-null    object\n 14  died_city              608 non-null    object\n 15  died_country           614 non-null    object\n 16  died_country_code      614 non-null    object\n 17  overall_motivation     17 non-null     object\n 18  share                  935 non-null    int64 \n 19  motivation             935 non-null    object\n 20  born_country_original  907 non-null    object\n 21  born_city_original     907 non-null    object\n 22  died_country_original  614 non-null    object\n 23  died_city_original     608 non-null    object\n 24  city_original          680 non-null    object\n 25  country_original       681 non-null    object\ndtypes: int64(3), object(23)\nmemory usage: 190.1+ KB\nNone\n\n\n\nprint(data.columns)\n\nIndex(['id', 'firstname', 'surname', 'year', 'category', 'affiliation', 'city',\n       'country', 'born_date', 'died_date', 'gender', 'born_city',\n       'born_country', 'born_country_code', 'died_city', 'died_country',\n       'died_country_code', 'overall_motivation', 'share', 'motivation',\n       'born_country_original', 'born_city_original', 'died_country_original',\n       'died_city_original', 'city_original', 'country_original'],\n      dtype='object')\n\n\n\nnobel_living = data[\n    (data['country'].notna()) &  \n    (data['gender'] != 'org') &        \n    (data['died_date'].isna())        \n]\nprint(nobel_living.shape)  \n\n(228, 26)\n\n\n\nlocation_counts = nobel_living['country'].value_counts()\nmost_common_location = location_counts.idxmax()\nprint(f\": {most_common_location}\")\n\n: USA"
  },
  {
    "objectID": "docs/homework/Homework-1/lecture2 LiuYuting homework.out.html",
    "href": "docs/homework/Homework-1/lecture2 LiuYuting homework.out.html",
    "title": "",
    "section": "",
    "text": "import pandas as pd\ndata = pd.read_csv('seattle_pet_licenses.csv')\nnum_pets = data.shape[0]\nprint(f\"{num_pets}\")\n\n66042\n\n\n\nnum_variables = data.shape[1]\nprint(f\"{num_variables}\")\n\n7\n\n\n\nname_counts = data['animal_s_name'].value_counts()\ntop_three_names = name_counts.head(3)\nprint(top_three_names)\n\nanimal_s_name\nLucy       566\nBella      451\nCharlie    447\nName: count, dtype: int64"
  },
  {
    "objectID": "docs/homework/Homework-2/Lecture3 LiuYuting Homework-2.out.html",
    "href": "docs/homework/Homework-2/Lecture3 LiuYuting Homework-2.out.html",
    "title": "",
    "section": "",
    "text": "import pandas as pd\nfrom skimpy import skim\ndf = pd.read_csv(\"shujuji2.csv\")\nskim(df)\n\n╭──────────────────────────────────────────────── skimpy summary ─────────────────────────────────────────────────╮\n│          Data Summary                Data Types                                                                 │\n│ ┏━━━━━━━━━━━━━━━━━━━┳━━━━━━━━┓ ┏━━━━━━━━━━━━━┳━━━━━━━┓                                                          │\n│ ┃ dataframe         ┃ Values ┃ ┃ Column Type ┃ Count ┃                                                          │\n│ ┡━━━━━━━━━━━━━━━━━━━╇━━━━━━━━┩ ┡━━━━━━━━━━━━━╇━━━━━━━┩                                                          │\n│ │ Number of rows    │ 891    │ │ int32       │ 5     │                                                          │\n│ │ Number of columns │ 12     │ │ string      │ 5     │                                                          │\n│ └───────────────────┴────────┘ │ float64     │ 2     │                                                          │\n│                                └─────────────┴───────┘                                                          │\n│                                                     number                                                      │\n│ ┏━━━━━━━━━━━━━━━━┳━━━━━━┳━━━━━━━━━┳━━━━━━━━━━┳━━━━━━━━━━┳━━━━━━━┳━━━━━━━━┳━━━━━━━━┳━━━━━━━━┳━━━━━━━━┳━━━━━━━━┓  │\n│ ┃ column_name    ┃ NA   ┃ NA %    ┃ mean     ┃ sd       ┃ p0    ┃ p25    ┃ p50    ┃ p75    ┃ p100   ┃ hist   ┃  │\n│ ┡━━━━━━━━━━━━━━━━╇━━━━━━╇━━━━━━━━━╇━━━━━━━━━━╇━━━━━━━━━━╇━━━━━━━╇━━━━━━━━╇━━━━━━━━╇━━━━━━━━╇━━━━━━━━╇━━━━━━━━┩  │\n│ │ PassengerId    │    0 │       0 │      446 │    257.4 │     1 │  223.5 │    446 │  668.5 │    891 │ ▇▇▇▇▇▇ │  │\n│ │ Survived       │    0 │       0 │   0.3838 │   0.4866 │     0 │      0 │      0 │      1 │      1 │ ▇    ▅ │  │\n│ │ Pclass         │    0 │       0 │    2.309 │   0.8361 │     1 │      2 │      3 │      3 │      3 │ ▃  ▃ ▇ │  │\n│ │ Age            │  177 │   19.87 │     29.7 │    14.53 │  0.42 │  20.12 │     28 │     38 │     80 │ ▂▇▇▃▁  │  │\n│ │ SibSp          │    0 │       0 │    0.523 │    1.103 │     0 │      0 │      0 │      1 │      8 │   ▇    │  │\n│ │ Parch          │    0 │       0 │   0.3816 │   0.8061 │     0 │      0 │      0 │      0 │      6 │  ▇▁▁   │  │\n│ │ Fare           │    0 │       0 │     32.2 │    49.69 │     0 │   7.91 │  14.45 │     31 │  512.3 │   ▇    │  │\n│ └────────────────┴──────┴─────────┴──────────┴──────────┴───────┴────────┴────────┴────────┴────────┴────────┘  │\n│                                                     string                                                      │\n│ ┏━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━┳━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━┓  │\n│ ┃ column_name              ┃ NA       ┃ NA %       ┃ words per row                ┃ total words              ┃  │\n│ ┡━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━╇━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━┩  │\n│ │ Name                     │        0 │          0 │                          4.1 │                     3626 │  │\n│ │ Sex                      │        0 │          0 │                            1 │                      891 │  │\n│ │ Ticket                   │        0 │          0 │                          1.3 │                     1130 │  │\n│ │ Cabin                    │      687 │       77.1 │                         0.27 │                      238 │  │\n│ │ Embarked                 │        2 │       0.22 │                            1 │                      889 │  │\n│ └──────────────────────────┴──────────┴────────────┴──────────────────────────────┴──────────────────────────┘  │\n╰────────────────────────────────────────────────────── End ──────────────────────────────────────────────────────╯\n\n\n\n\nprint(df.head())\n\n   PassengerId  Survived  Pclass  \\\n0            1         0       3   \n1            2         1       1   \n2            3         1       3   \n3            4         1       1   \n4            5         0       3   \n\n                                                Name     Sex   Age  SibSp  \\\n0                            Braund, Mr. Owen Harris    male  22.0      1   \n1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n2                             Heikkinen, Miss. Laina  female  26.0      0   \n3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n4                           Allen, Mr. William Henry    male  35.0      0   \n\n   Parch            Ticket     Fare Cabin Embarked  \n0      0         A/5 21171   7.2500   NaN        S  \n1      0          PC 17599  71.2833   C85        C  \n2      0  STON/O2. 3101282   7.9250   NaN        S  \n3      0            113803  53.1000  C123        S  \n4      0            373450   8.0500   NaN        S  \n\n\n\nprint(df.describe())\n\n       PassengerId    Survived      Pclass         Age       SibSp  \\\ncount   891.000000  891.000000  891.000000  714.000000  891.000000   \nmean    446.000000    0.383838    2.308642   29.699118    0.523008   \nstd     257.353842    0.486592    0.836071   14.526497    1.102743   \nmin       1.000000    0.000000    1.000000    0.420000    0.000000   \n25%     223.500000    0.000000    2.000000   20.125000    0.000000   \n50%     446.000000    0.000000    3.000000   28.000000    0.000000   \n75%     668.500000    1.000000    3.000000   38.000000    1.000000   \nmax     891.000000    1.000000    3.000000   80.000000    8.000000   \n\n            Parch        Fare  \ncount  891.000000  891.000000  \nmean     0.381594   32.204208  \nstd      0.806057   49.693429  \nmin      0.000000    0.000000  \n25%      0.000000    7.910400  \n50%      0.000000   14.454200  \n75%      0.000000   31.000000  \nmax      6.000000  512.329200  \n\n\n\nprint(df.isnull().sum())\n\nPassengerId      0\nSurvived         0\nPclass           0\nName             0\nSex              0\nAge            177\nSibSp            0\nParch            0\nTicket           0\nFare             0\nCabin          687\nEmbarked         2\ndtype: int64\n\n\n\nprint(df.dtypes)\n\nPassengerId      int64\nSurvived         int64\nPclass           int64\nName            object\nSex             object\nAge            float64\nSibSp            int64\nParch            int64\nTicket          object\nFare           float64\nCabin           object\nEmbarked        object\ndtype: object\n\n\n\nimport matplotlib.pyplot as plt\nsurvival_counts = df['Survived'].value_counts()\nsurvival_counts.plot(kind='bar')\nplt.title('Survival Counts')\nplt.xlabel('Survived')\nplt.ylabel('Count')\nplt.xticks(ticks=[0, 1], labels=['No', 'Yes'], rotation=0)\nplt.show()\n\n\n\n\n\n\n\n\n\ngender_survival = df.groupby(['Sex', 'Survived']).size().unstack()\ngender_survival.plot(kind='bar', stacked=True)\nplt.title('Survival by Gender')\nplt.xlabel('Gender')\nplt.ylabel('Count')\nplt.xticks(rotation=0)\nplt.show()"
  },
  {
    "objectID": "docs/homework/Homework-4/liuyuting-homwork5.out.html",
    "href": "docs/homework/Homework-4/liuyuting-homwork5.out.html",
    "title": "",
    "section": "",
    "text": "pip install lets-plot -i https://pypi.tuna.tsinghua.edu.cn/simple\n\nLooking in indexes: https://pypi.tuna.tsinghua.edu.cn/simple\nRequirement already satisfied: lets-plot in d:\\python\\lib\\site-packages (4.5.1)\nRequirement already satisfied: pypng in d:\\python\\lib\\site-packages (from lets-plot) (0.20220715.0)\nRequirement already satisfied: palettable in d:\\python\\lib\\site-packages (from lets-plot) (3.3.3)\nNote: you may need to restart the kernel to use updated packages.\n\n\n\nimport lets_plot as lp\n\n\nimport pandas as pd\n\nPlot, using histograms, the distribution of plastic waste per capita faceted by continent. What can you say about how the continents compare to each other in terms of their plastic waste per capita?\n\nimport pandas as pd\nfrom lets_plot import *\nfrom lets_plot.plot import facet_wrap\nLetsPlot.setup_html()\ndata = pd.read_csv('plastic-waste.csv')\np = ggplot(data) + geom_histogram(aes(x='plastic_waste_per_cap'), bins=30) + facet_wrap('continent')\np\n\n\n            \n            \n            \n\n\n   \n   \n\n\nConvert your side-by-side box plots from the previous task to violin plots. What do the violin plots reveal that box plots do not? What features are apparent in the box plots but not in the violin plots?\n\np = ggplot(data) + geom_violin(aes(x='continent', y='plastic_waste_per_cap'))\np\n\n   \n   \n\n\nVisualize the relationship between plastic waste per capita and mismanaged plastic waste per capita using a scatterplot. Describe the relationship.\n\np = ggplot(data) + geom_point(aes(x='plastic_waste_per_cap', y='mismanaged_plastic_waste_per_cap'))\np\n\n   \n   \n\n\nColour the points in the scatterplot by continent. Does there seem to be any clear distinctions between continents with respect to how plastic waste per capita and mismanaged plastic waste per capita are associated?\n\np = ggplot(data) + geom_point(aes(x='plastic_waste_per_cap', y='mismanaged_plastic_waste_per_cap', color='continent'))\np\n\n   \n   \n\n\nVisualize the relationship between plastic waste per capita and total population as well as plastic waste per capita and coastal population. You will need to make two separate plots. Do either of these pairs of variables appear to be more strongly linearly associated?\n\np_total_pop = ggplot(data) + geom_point(aes(x='total_pop', y='plastic_waste_per_cap'))\np_total_pop\np_coastal_pop = ggplot(data) + geom_point(aes(x='coastal_pop', y='plastic_waste_per_cap'))\np_coastal_pop\n\n   \n   \n\n\nRecreate the following plot, and interpret what you see in context of the data.\n\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Load the data\ndata = {\n    \"continent\": [\"Asia\", \"Europe\", \"Africa\", \"North America\", \"South America\", \"Oceania\"],\n    \"plastic_waste_per_cap\": [0.121, 0.08, 0.144, 0.093, 0.183, 0.112],\n    \"coastal_pop\": [262892387, 4747957, 16556580, 11846863, 16449245, 17235954],\n    \"total_pop\": [1341335152, 10712066, 35468208, 34016593, 40412376, 22268384]\n}\n\ndf = pd.DataFrame(data)\n\n# Calculate the coastal population proportion\ndf['coastal_pop_proportion'] = df['coastal_pop'] / df['total_pop']\n\n# Plot\nplt.figure(figsize=(10, 8))\nsns.scatterplot(x='coastal_pop_proportion', y='plastic_waste_per_cap', hue='continent', data=df)\nsns.regplot(x='coastal_pop_proportion', y='plastic_waste_per_cap', data=df, scatter=False, color='black')\n\nplt.title('Plastic waste vs. coastal population proportion\\nby continent')\nplt.xlabel('Coastal population proportion (Coastal / total population)')\nplt.ylabel('Plastic waste per capita')\nplt.legend(title='Continent')\nplt.show()"
  },
  {
    "objectID": "labs/Labexercises/lab1/Chipotle1.out.html",
    "href": "labs/Labexercises/lab1/Chipotle1.out.html",
    "title": "Ex2 - Getting and Knowing your Data",
    "section": "",
    "text": "This time we are going to pull data directly from the internet. Special thanks to: https://github.com/justmarkham for sharing the dataset and materials.\n\nStep 1. Import the necessary libraries\n\nimport pandas as pd\n\n\n\nStep 2. Import the dataset from this address.\n\nurl = 'https://raw.githubusercontent.com/justmarkham/DAT8/master/data/chipotle.tsv'\ndata = pd.read_csv(url, sep='\\t')\nprint(data.head())\n\n   order_id  quantity                              item_name  \\\n0         1         1           Chips and Fresh Tomato Salsa   \n1         1         1                                   Izze   \n2         1         1                       Nantucket Nectar   \n3         1         1  Chips and Tomatillo-Green Chili Salsa   \n4         2         2                           Chicken Bowl   \n\n                                  choice_description item_price  \n0                                                NaN     $2.39   \n1                                       [Clementine]     $3.39   \n2                                            [Apple]     $3.39   \n3                                                NaN     $2.39   \n4  [Tomatillo-Red Chili Salsa (Hot), [Black Beans...    $16.98   \n\n\n\n\nStep 3. Assign it to a variable called chipo.\n\nurl = 'https://raw.githubusercontent.com/justmarkham/DAT8/master/data/chipotle.tsv'\nchipo = pd.read_csv(url, sep='\\t')\nprint(chipo.head())\n\n   order_id  quantity                              item_name  \\\n0         1         1           Chips and Fresh Tomato Salsa   \n1         1         1                                   Izze   \n2         1         1                       Nantucket Nectar   \n3         1         1  Chips and Tomatillo-Green Chili Salsa   \n4         2         2                           Chicken Bowl   \n\n                                  choice_description item_price  \n0                                                NaN     $2.39   \n1                                       [Clementine]     $3.39   \n2                                            [Apple]     $3.39   \n3                                                NaN     $2.39   \n4  [Tomatillo-Red Chili Salsa (Hot), [Black Beans...    $16.98   \n\n\n\n\nStep 4. See the first 10 entries\n\nurl = 'https://raw.githubusercontent.com/justmarkham/DAT8/master/data/chipotle.tsv'\nchipo = pd.read_csv(url, sep='\\t')\nprint(chipo.head(10))\n\n   order_id  quantity                              item_name  \\\n0         1         1           Chips and Fresh Tomato Salsa   \n1         1         1                                   Izze   \n2         1         1                       Nantucket Nectar   \n3         1         1  Chips and Tomatillo-Green Chili Salsa   \n4         2         2                           Chicken Bowl   \n5         3         1                           Chicken Bowl   \n6         3         1                          Side of Chips   \n7         4         1                          Steak Burrito   \n8         4         1                       Steak Soft Tacos   \n9         5         1                          Steak Burrito   \n\n                                  choice_description item_price  \n0                                                NaN     $2.39   \n1                                       [Clementine]     $3.39   \n2                                            [Apple]     $3.39   \n3                                                NaN     $2.39   \n4  [Tomatillo-Red Chili Salsa (Hot), [Black Beans...    $16.98   \n5  [Fresh Tomato Salsa (Mild), [Rice, Cheese, Sou...    $10.98   \n6                                                NaN     $1.69   \n7  [Tomatillo Red Chili Salsa, [Fajita Vegetables...    $11.75   \n8  [Tomatillo Green Chili Salsa, [Pinto Beans, Ch...     $9.25   \n9  [Fresh Tomato Salsa, [Rice, Black Beans, Pinto...     $9.25   \n\n\n\n\nStep 5. What is the number of observations in the dataset?\n\nurl = 'https://raw.githubusercontent.com/justmarkham/DAT8/master/data/chipotle.tsv'\nchipo = pd.read_csv(url, sep='\\t')\nnum_observations = chipo.shape[0]\nprint(f\"The number of observations in the dataset is: {num_observations}\")\n\n\n\nThe number of observations in the dataset is: 4622\n\n\n\n\nStep 6. What is the number of columns in the dataset?\n\nurl = 'https://raw.githubusercontent.com/justmarkham/DAT8/master/data/chipotle.tsv'\nchipo = pd.read_csv(url, sep='\\t')\nnum_columns = chipo.shape[1]\nprint(f\"The number of columns in the dataset is: {num_columns}\")\n\nThe number of columns in the dataset is: 5\n\n\n\n\nStep 7. Print the name of all the columns.\n\nurl = 'https://raw.githubusercontent.com/justmarkham/DAT8/master/data/chipotle.tsv'\nchipo = pd.read_csv(url, sep='\\t')\nprint(\"Column names:\", chipo.columns.tolist())\n\nColumn names: ['order_id', 'quantity', 'item_name', 'choice_description', 'item_price']\n\n\n\n\nStep 8. How is the dataset indexed?\n\nurl = 'https://raw.githubusercontent.com/justmarkham/DAT8/master/data/chipotle.tsv'\nchipo = pd.read_csv(url, sep='\\t')\nprint(\"Dataset Index:\", chipo.index)\n\nDataset Index: RangeIndex(start=0, stop=4622, step=1)\n\n\n\n\nStep 9. Which was the most-ordered item?\n\nurl = 'https://raw.githubusercontent.com/justmarkham/DAT8/master/data/chipotle.tsv'\nchipo = pd.read_csv(url, sep='\\t')\nmost_ordered_item = chipo.groupby('item_name')['quantity'].sum().idxmax()\nprint(f\"The most-ordered item is: {most_ordered_item}\")\n\nThe most-ordered item is: Chicken Bowl\n\n\n\n\nStep 10. For the most-ordered item, how many items were ordered?\n\nurl = 'https://raw.githubusercontent.com/justmarkham/DAT8/master/data/chipotle.tsv'\nchipo = pd.read_csv(url, sep='\\t')\nitem_order_counts = chipo.groupby('item_name')['quantity'].sum()\nmost_ordered_item = item_order_counts.idxmax()\ntotal_quantity = item_order_counts.max()\nprint(f\"The most-ordered item is: {most_ordered_item}\")\nprint(f\"Total quantity ordered: {total_quantity}\")\n\nThe most-ordered item is: Chicken Bowl\nTotal quantity ordered: 761\n\n\n\n\nStep 11. What was the most ordered item in the choice_description column?\n\nurl = 'https://raw.githubusercontent.com/justmarkham/DAT8/master/data/chipotle.tsv'\n\nchipo = pd.read_csv(url, sep='\\t')\n\nchoice_description_counts = chipo.groupby('choice_description')['quantity'].sum()\n\nmost_ordered_choice_description = choice_description_counts.idxmax()\ntotal_quantity_choice_description = choice_description_counts.max()\n\nprint(f\"The most-ordered choice description is: {most_ordered_choice_description}\")\nprint(f\"Total quantity ordered: {total_quantity_choice_description}\")\n\nThe most-ordered choice description is: [Diet Coke]\nTotal quantity ordered: 159\n\n\n\n\nStep 12. How many items were orderd in total?\n\nurl = 'https://raw.githubusercontent.com/justmarkham/DAT8/master/data/chipotle.tsv'\n\nchipo = pd.read_csv(url, sep='\\t')\n\ntotal_items_ordered = chipo['quantity'].sum()\n\nprint(f\"Total number of items ordered: {total_items_ordered}\")\n\nTotal number of items ordered: 4972\n\n\n\n\nStep 13. Turn the item price into a float\n\nurl = 'https://raw.githubusercontent.com/justmarkham/DAT8/master/data/chipotle.tsv'\n\nchipo = pd.read_csv(url, sep='\\t')\n\nchipo['item_price'] = chipo['item_price'].replace({'\\$': ''}, regex=True).astype(float)\n\nprint(chipo.head())\n\n   order_id  quantity                              item_name  \\\n0         1         1           Chips and Fresh Tomato Salsa   \n1         1         1                                   Izze   \n2         1         1                       Nantucket Nectar   \n3         1         1  Chips and Tomatillo-Green Chili Salsa   \n4         2         2                           Chicken Bowl   \n\n                                  choice_description  item_price  \n0                                                NaN        2.39  \n1                                       [Clementine]        3.39  \n2                                            [Apple]        3.39  \n3                                                NaN        2.39  \n4  [Tomatillo-Red Chili Salsa (Hot), [Black Beans...       16.98  \n\n\n\nStep 13.a. Check the item price type\n\nurl = 'https://raw.githubusercontent.com/justmarkham/DAT8/master/data/chipotle.tsv'\n\nchipo = pd.read_csv(url, sep='\\t')\n\nchipo['item_price'] = chipo['item_price'].replace({'\\$': ''}, regex=True).astype(float)\n\nprint(f\"The data type of 'item_price' is: {chipo['item_price'].dtype}\")\n\nThe data type of 'item_price' is: float64\n\n\n\n\nStep 13.b. Create a lambda function and change the type of item price\n\nchipo = pd.read_csv(url, sep='\\t')\n\nchipo['item_price'] = chipo['item_price'].apply(lambda x: float(x.replace('$', '')))\n\nprint(f\"The data type of 'item_price' is: {chipo['item_price'].dtype}\")\n\nThe data type of 'item_price' is: float64\n\n\n\n\nStep 13.c. Check the item price type\n\nurl = 'https://raw.githubusercontent.com/justmarkham/DAT8/master/data/chipotle.tsv'\n\nchipo = pd.read_csv(url, sep='\\t')\n\nchipo['item_price'] = chipo['item_price'].apply(lambda x: float(x.replace('$', '')))\n\nprint(f\"The data type of 'item_price' is: {chipo['item_price'].dtype}\")\n\nThe data type of 'item_price' is: float64\n\n\n\n\n\nStep 14. How much was the revenue for the period in the dataset?\n\nurl = 'https://raw.githubusercontent.com/justmarkham/DAT8/master/data/chipotle.tsv'\nchipo = pd.read_csv(url, sep='\\t')\n\nchipo['item_price'] = chipo['item_price'].apply(lambda x: float(x.replace('$', '')))\n\nchipo['revenue'] = chipo['item_price'] * chipo['quantity']\n\ntotal_revenue = chipo['revenue'].sum()\n\nprint(f\"Total revenue for the period: ${total_revenue:.2f}\")\n\nTotal revenue for the period: $39237.02\n\n\n\n\nStep 15. How many orders were made in the period?\n\nurl = 'https://raw.githubusercontent.com/justmarkham/DAT8/master/data/chipotle.tsv'\nchipo = pd.read_csv(url, sep='\\t')\nnum_orders = chipo.shape[0]\nprint(f\"Total number of orders in the period: {num_orders}\")\n\nTotal number of orders in the period: 4622\n\n\n\n\nStep 16. What is the average revenue amount per order?\n\nurl = 'https://raw.githubusercontent.com/justmarkham/DAT8/master/data/chipotle.tsv'\nchipo = pd.read_csv(url, sep='\\t')\nchipo['item_price'] = chipo['item_price'].apply(lambda x: float(x.replace('$', '')))\nchipo['revenue'] = chipo['item_price'] * chipo['quantity']\ntotal_revenue = chipo['revenue'].sum()\nnum_orders = chipo.shape[0]\naverage_revenue_per_order = total_revenue / num_orders\nprint(f\"Average revenue per order: ${average_revenue_per_order:.2f}\")\n\n\n\nAverage revenue per order: $8.49\n\n\n\n\nStep 17. How many different items are sold?\n\nurl = 'https://raw.githubusercontent.com/justmarkham/DAT8/master/data/chipotle.tsv'\nchipo = pd.read_csv(url, sep='\\t')\nnum_different_items = chipo['item_name'].nunique()\nprint(f\"Number of different items sold: {num_different_items}\")\n\nNumber of different items sold: 50"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Hi, I’m Liu Yuting!",
    "section": "",
    "text": "My name is Liu Yuting. I am currently pursuing a master’s degree in educational management at Belarusian State University and serve as the monitor of the educational management class C."
  },
  {
    "objectID": "about.html#education",
    "href": "about.html#education",
    "title": "Hi, I’m Liu Yuting!",
    "section": "Education",
    "text": "Education\nI graduated from Neijiang Normal University in Sichuan, China, with a bachelor’s degree in civil engineering. During my time at school, I published two provincial-level papers:\n\n“Research on the Construction of Urban Infrastructure Based on ETC” and “Sichuan Architecture”, 2022.04, as the first author;\n“Exploring the Application of 5G in Construction”, Sichuan Architecture, February 2022, second author."
  },
  {
    "objectID": "about.html#work-experience",
    "href": "about.html#work-experience",
    "title": "Hi, I’m Liu Yuting!",
    "section": "Work Experience",
    "text": "Work Experience\nAt the same time, I am also a teaching assistant in a higher education institution in Sichuan, China, with two years of work experience. The main subjects taught are “Building Structure”, “Foundation and Base”, “Building Measurement and Valuation Training”, “Building CAD”, “BIM Modeling”, “Guanglianda GTJ2021”, “Engineering Bidding and Contract Management”, “Building Construction and Drawing Recognition”, and “New Media Copywriting”. During my two years of work in higher education institutions, I have applied for two provincial and municipal research projects as a host, and successfully concluded one as a participant. He participated in the application of two university-level courses on ideological and political education."
  },
  {
    "objectID": "about.html#looking-forward",
    "href": "about.html#looking-forward",
    "title": "Hi, I’m Liu Yuting!",
    "section": "Looking Forward",
    "text": "Looking Forward\nHonors and awards obtained over the years include:\n\n2022.08 Excellent Teacher of Gangpei\n2022.11 Second Prize in the First Teacher Skills Competition of Sichuan Tianyi College\n2023.11 Excellent Award in the Guidance of the Zhongwang Cup Building Drawing Skills Competition\n2024.05 National Third Prize in the Guidance of the 2024 Nianluban Cup Digital Twin Application Competition - Group B\nParticipated in the guidance of the 2024 Belt and Road and BRICS Skills Development and Technology Innovation Competition, which was held by the BRICS Business Council China Council, the Belt and Road and BRICS Skills Development and Technology Innovation International Alliance, and the China Association for Science and Technology. The first regional competition of the construction engineering intelligent construction technology application competition was held, and the team won the second prize.\nParticipated in the anti-cult works collection activity held by Deyang City"
  },
  {
    "objectID": "homework.html",
    "href": "homework.html",
    "title": "",
    "section": "",
    "text": "import pandas as pd\ndata = pd.read_csv('seattle_pet_licenses.csv')\nnum_pets = data.shape[0]\nprint(f\"{num_pets}\")\n\n66042\n\n\n\nnum_variables = data.shape[1]\nprint(f\"{num_variables}\")\n\n7\n\n\n\nname_counts = data['animal_s_name'].value_counts()\ntop_three_names = name_counts.head(3)\nprint(top_three_names)\n\nanimal_s_name\nLucy       566\nBella      451\nCharlie    447\nName: count, dtype: int64\n\n\nSource: lecture2 LiuYuting homework.ipynb"
  },
  {
    "objectID": "homework.html#packages",
    "href": "homework.html#packages",
    "title": "",
    "section": "Packages",
    "text": "Packages\nUse pandas for data warnagling and processing,letsplot and matplotlib for visualization."
  },
  {
    "objectID": "homework.html#data",
    "href": "homework.html#data",
    "title": "",
    "section": "Data",
    "text": "Data\nThe data can be found on Kaggle.\nLet’s think about some questions we might want to answer with these data:\n\nWhich major has the lowest unemployment rate?\nWhich major has the highest percentage of women?\nHow do the distributions of median income compare across major categories?\nDo women tend to choose majors with lower or higher earnings?\n\nIn the next section we aim to answer these questions."
  },
  {
    "objectID": "homework.html#which-major-has-the-lowest-unemployment-rate",
    "href": "homework.html#which-major-has-the-lowest-unemployment-rate",
    "title": "",
    "section": "Which major has the lowest unemployment rate?",
    "text": "Which major has the lowest unemployment rate?\nIn order to answer this question all you need to use pandas sorting and grouping functions."
  },
  {
    "objectID": "homework.html#which-major-has-the-highest-percentage-of-women",
    "href": "homework.html#which-major-has-the-highest-percentage-of-women",
    "title": "",
    "section": "Which major has the highest percentage of women?",
    "text": "Which major has the highest percentage of women?\nTo answer such a question we need to arrange the data in descending order. For example, if earlier we were interested in the major with the highest unemployment rate, we would use the following:\n\nUsing what you’ve learned so far, arrange the data in descending order with respect to proportion of women in a major, and display only the major, the total number of people with major, and proportion of women. Show only the top 3 majors."
  },
  {
    "objectID": "homework.html#how-do-the-distributions-of-median-income-compare-across-major-categories",
    "href": "homework.html#how-do-the-distributions-of-median-income-compare-across-major-categories",
    "title": "",
    "section": "How do the distributions of median income compare across major categories?",
    "text": "How do the distributions of median income compare across major categories?\nA percentile is a measure used in statistics indicating the value below which a given percentage of observations in a group of observations fall. For example, the 20th percentile is the value below which 20% of the observations may be found. (Source: [Wikipedia](https://en.wikipedia.org/wiki/Percentile)\nThere are three types of incomes reported in this data frame: p25th, median, and p75th. These correspond to the 25th, 50th, and 75th percentiles of the income distribution of sampled individuals for a given major.\n\nWhy do we often choose the median, rather than the mean, to describe the typical income of a group of people?\n\nThe question we want to answer “How do the distributions of median income compare across major categories?”. We need to do a few things to answer this question: First, we need to group the data by major_category. Then, we need a way to summarize the distributions of median income within these groups. This decision will depend on the shapes of these distributions. So first, we need to visualize the data.\nLet’s start simple and take a look at the distribution of all median incomes, without considering the major categories. Create a hishogram. Consider the binwidth we chose for our histogram. It’s good practice to always think in the context of the data and try out a few binwidths before settling on a binwidth. You might ask yourself: “What would be a meaningful difference in median incomes?” $1 is obviously too little, $10000 might be too high.\n\nTry binwidths of $1000 and $5000 and choose one. Explain your reasoning for your choice.\nPlot the distribution of median income using a histogram, faceted by major_category. Use the binwidth you chose in the earlier exercise.\n\nNow that we’ve seen the shapes of the distributions of median incomes for each major category, we should have a better idea for which summary statistic to use to quantify the typical median income.\n\nWhich major category has the highest typical (you’ll need to decide what this means) median income?\nWhich major category is the least popular in this sample?"
  },
  {
    "objectID": "homework.html#all-stem-fields-arent-the-same",
    "href": "homework.html#all-stem-fields-arent-the-same",
    "title": "",
    "section": "All STEM fields aren’t the same",
    "text": "All STEM fields aren’t the same\nOne of the sections of the FiveThirtyEight story is “All STEM fields aren’t the same”. Let’s see if this is true.\nFirst, let’s create a list called stem_categories that lists the major categories that are considered STEM fields.\nThen, use this to create a new variable in our dataframe indicating whether a major is STEM or not.\nWe can use the logical operators to also filter our data for STEM majors whose median earnings is less than median for all majors’ median earnings.\n\nWhich STEM majors have median salaries equal to or less than the median for all majors’ median earnings? Your output should only show the major name and median, 25th percentile, and 75th percentile earning for that major as and should be sorted such that the major with the highest median earning is on top."
  },
  {
    "objectID": "homework.html#what-types-of-majors-do-women-tend-to-major-in",
    "href": "homework.html#what-types-of-majors-do-women-tend-to-major-in",
    "title": "",
    "section": "What types of majors do women tend to major in?",
    "text": "What types of majors do women tend to major in?\n\nCreate a scatterplot of median income vs. proportion of women in that major, coloured by whether the major is in a STEM field or not. Describe the association between these three variables."
  },
  {
    "objectID": "homework.html#further-exploration",
    "href": "homework.html#further-exploration",
    "title": "",
    "section": "Further exploration",
    "text": "Further exploration\n\nAsk a question of interest to you, and answer it using summary statistic(s) and/or visualization(s)."
  },
  {
    "objectID": "labs.html",
    "href": "labs.html",
    "title": "Chipotle1",
    "section": "",
    "text": "Chipotle1\n\n\nEx2 - Getting and Knowing your Data\nThis time we are going to pull data directly from the internet. Special thanks to: https://github.com/justmarkham for sharing the dataset and materials.\n\nStep 1. Import the necessary libraries\n\nimport pandas as pd\n\n\n\nStep 2. Import the dataset from this address.\n\nurl = 'https://raw.githubusercontent.com/justmarkham/DAT8/master/data/chipotle.tsv'\ndata = pd.read_csv(url, sep='\\t')\nprint(data.head())\n\n   order_id  quantity                              item_name  \\\n0         1         1           Chips and Fresh Tomato Salsa   \n1         1         1                                   Izze   \n2         1         1                       Nantucket Nectar   \n3         1         1  Chips and Tomatillo-Green Chili Salsa   \n4         2         2                           Chicken Bowl   \n\n                                  choice_description item_price  \n0                                                NaN     $2.39   \n1                                       [Clementine]     $3.39   \n2                                            [Apple]     $3.39   \n3                                                NaN     $2.39   \n4  [Tomatillo-Red Chili Salsa (Hot), [Black Beans...    $16.98   \n\n\n\n\nStep 3. Assign it to a variable called chipo.\n\nurl = 'https://raw.githubusercontent.com/justmarkham/DAT8/master/data/chipotle.tsv'\nchipo = pd.read_csv(url, sep='\\t')\nprint(chipo.head())\n\n   order_id  quantity                              item_name  \\\n0         1         1           Chips and Fresh Tomato Salsa   \n1         1         1                                   Izze   \n2         1         1                       Nantucket Nectar   \n3         1         1  Chips and Tomatillo-Green Chili Salsa   \n4         2         2                           Chicken Bowl   \n\n                                  choice_description item_price  \n0                                                NaN     $2.39   \n1                                       [Clementine]     $3.39   \n2                                            [Apple]     $3.39   \n3                                                NaN     $2.39   \n4  [Tomatillo-Red Chili Salsa (Hot), [Black Beans...    $16.98   \n\n\n\n\nStep 4. See the first 10 entries\n\nurl = 'https://raw.githubusercontent.com/justmarkham/DAT8/master/data/chipotle.tsv'\nchipo = pd.read_csv(url, sep='\\t')\nprint(chipo.head(10))\n\n   order_id  quantity                              item_name  \\\n0         1         1           Chips and Fresh Tomato Salsa   \n1         1         1                                   Izze   \n2         1         1                       Nantucket Nectar   \n3         1         1  Chips and Tomatillo-Green Chili Salsa   \n4         2         2                           Chicken Bowl   \n5         3         1                           Chicken Bowl   \n6         3         1                          Side of Chips   \n7         4         1                          Steak Burrito   \n8         4         1                       Steak Soft Tacos   \n9         5         1                          Steak Burrito   \n\n                                  choice_description item_price  \n0                                                NaN     $2.39   \n1                                       [Clementine]     $3.39   \n2                                            [Apple]     $3.39   \n3                                                NaN     $2.39   \n4  [Tomatillo-Red Chili Salsa (Hot), [Black Beans...    $16.98   \n5  [Fresh Tomato Salsa (Mild), [Rice, Cheese, Sou...    $10.98   \n6                                                NaN     $1.69   \n7  [Tomatillo Red Chili Salsa, [Fajita Vegetables...    $11.75   \n8  [Tomatillo Green Chili Salsa, [Pinto Beans, Ch...     $9.25   \n9  [Fresh Tomato Salsa, [Rice, Black Beans, Pinto...     $9.25   \n\n\n\n\nStep 5. What is the number of observations in the dataset?\n\nurl = 'https://raw.githubusercontent.com/justmarkham/DAT8/master/data/chipotle.tsv'\nchipo = pd.read_csv(url, sep='\\t')\nnum_observations = chipo.shape[0]\nprint(f\"The number of observations in the dataset is: {num_observations}\")\n\n\n\nThe number of observations in the dataset is: 4622\n\n\n\n\nStep 6. What is the number of columns in the dataset?\n\nurl = 'https://raw.githubusercontent.com/justmarkham/DAT8/master/data/chipotle.tsv'\nchipo = pd.read_csv(url, sep='\\t')\nnum_columns = chipo.shape[1]\nprint(f\"The number of columns in the dataset is: {num_columns}\")\n\nThe number of columns in the dataset is: 5\n\n\n\n\nStep 7. Print the name of all the columns.\n\nurl = 'https://raw.githubusercontent.com/justmarkham/DAT8/master/data/chipotle.tsv'\nchipo = pd.read_csv(url, sep='\\t')\nprint(\"Column names:\", chipo.columns.tolist())\n\nColumn names: ['order_id', 'quantity', 'item_name', 'choice_description', 'item_price']\n\n\n\n\nStep 8. How is the dataset indexed?\n\nurl = 'https://raw.githubusercontent.com/justmarkham/DAT8/master/data/chipotle.tsv'\nchipo = pd.read_csv(url, sep='\\t')\nprint(\"Dataset Index:\", chipo.index)\n\nDataset Index: RangeIndex(start=0, stop=4622, step=1)\n\n\n\n\nStep 9. Which was the most-ordered item?\n\nurl = 'https://raw.githubusercontent.com/justmarkham/DAT8/master/data/chipotle.tsv'\nchipo = pd.read_csv(url, sep='\\t')\nmost_ordered_item = chipo.groupby('item_name')['quantity'].sum().idxmax()\nprint(f\"The most-ordered item is: {most_ordered_item}\")\n\nThe most-ordered item is: Chicken Bowl\n\n\n\n\nStep 10. For the most-ordered item, how many items were ordered?\n\nurl = 'https://raw.githubusercontent.com/justmarkham/DAT8/master/data/chipotle.tsv'\nchipo = pd.read_csv(url, sep='\\t')\nitem_order_counts = chipo.groupby('item_name')['quantity'].sum()\nmost_ordered_item = item_order_counts.idxmax()\ntotal_quantity = item_order_counts.max()\nprint(f\"The most-ordered item is: {most_ordered_item}\")\nprint(f\"Total quantity ordered: {total_quantity}\")\n\nThe most-ordered item is: Chicken Bowl\nTotal quantity ordered: 761\n\n\n\n\nStep 11. What was the most ordered item in the choice_description column?\n\nurl = 'https://raw.githubusercontent.com/justmarkham/DAT8/master/data/chipotle.tsv'\n\nchipo = pd.read_csv(url, sep='\\t')\n\nchoice_description_counts = chipo.groupby('choice_description')['quantity'].sum()\n\nmost_ordered_choice_description = choice_description_counts.idxmax()\ntotal_quantity_choice_description = choice_description_counts.max()\n\nprint(f\"The most-ordered choice description is: {most_ordered_choice_description}\")\nprint(f\"Total quantity ordered: {total_quantity_choice_description}\")\n\nThe most-ordered choice description is: [Diet Coke]\nTotal quantity ordered: 159\n\n\n\n\nStep 12. How many items were orderd in total?\n\nurl = 'https://raw.githubusercontent.com/justmarkham/DAT8/master/data/chipotle.tsv'\n\nchipo = pd.read_csv(url, sep='\\t')\n\ntotal_items_ordered = chipo['quantity'].sum()\n\nprint(f\"Total number of items ordered: {total_items_ordered}\")\n\nTotal number of items ordered: 4972\n\n\n\n\nStep 13. Turn the item price into a float\n\nurl = 'https://raw.githubusercontent.com/justmarkham/DAT8/master/data/chipotle.tsv'\n\nchipo = pd.read_csv(url, sep='\\t')\n\nchipo['item_price'] = chipo['item_price'].replace({'\\\n\n\n\n\n\n\n\n\n\n# Euro12\n\n\n\n\n\n:::{.quarto-embed-nb-cell notebook=\"D:\\code\\jiedan\\12-28\\test1\\labs\\Labexercises\\lab1\\Euro12.ipynb\" notebook-title=\"Ex2 - Filtering and Sorting Data\" notebook-cellId=\"cell-0\"}\n\n# Ex2 - Filtering and Sorting Data\n\nThis time we are going to pull data directly from the internet.\n\n### Step 1. Import the necessary libraries\n\n::: {#cell-2 .cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\n\n\n\nStep 2. Import the dataset from this address.\n\n\nStep 3. Assign it to a variable called euro12.\n\n\neuro12 = pd.read_csv('https://raw.githubusercontent.com/guipsamora/pandas_exercises/master/02_Filtering_%26_Sorting/Euro12/Euro_2012_stats_TEAM.csv')\n\nprint(euro12)\n\n                   Team  Goals  Shots on target  Shots off target  \\\n0               Croatia      4               13                12   \n1        Czech Republic      4               13                18   \n2               Denmark      4               10                10   \n3               England      5               11                18   \n4                France      3               22                24   \n5               Germany     10               32                32   \n6                Greece      5                8                18   \n7                 Italy      6               34                45   \n8           Netherlands      2               12                36   \n9                Poland      2               15                23   \n10             Portugal      6               22                42   \n11  Republic of Ireland      1                7                12   \n12               Russia      5                9                31   \n13                Spain     12               42                33   \n14               Sweden      5               17                19   \n15              Ukraine      2                7                26   \n\n   Shooting Accuracy % Goals-to-shots  Total shots (inc. Blocked)  \\\n0              51.9%            16.0%                          32   \n1              41.9%            12.9%                          39   \n2              50.0%            20.0%                          27   \n3              50.0%            17.2%                          40   \n4              37.9%             6.5%                          65   \n5              47.8%            15.6%                          80   \n6              30.7%            19.2%                          32   \n7              43.0%             7.5%                         110   \n8              25.0%             4.1%                          60   \n9              39.4%             5.2%                          48   \n10             34.3%             9.3%                          82   \n11             36.8%             5.2%                          28   \n12             22.5%            12.5%                          59   \n13             55.9%            16.0%                         100   \n14             47.2%            13.8%                          39   \n15             21.2%             6.0%                          38   \n\n    Hit Woodwork  Penalty goals  Penalties not scored  ...  Saves made  \\\n0              0              0                     0  ...          13   \n1              0              0                     0  ...           9   \n2              1              0                     0  ...          10   \n3              0              0                     0  ...          22   \n4              1              0                     0  ...           6   \n5              2              1                     0  ...          10   \n6              1              1                     1  ...          13   \n7              2              0                     0  ...          20   \n8              2              0                     0  ...          12   \n9              0              0                     0  ...           6   \n10             6              0                     0  ...          10   \n11             0              0                     0  ...          17   \n12             2              0                     0  ...          10   \n13             0              1                     0  ...          15   \n14             3              0                     0  ...           8   \n15             0              0                     0  ...          13   \n\n    Saves-to-shots ratio  Fouls Won Fouls Conceded  Offsides  Yellow Cards  \\\n0                  81.3%         41             62         2             9   \n1                  60.1%         53             73         8             7   \n2                  66.7%         25             38         8             4   \n3                  88.1%         43             45         6             5   \n4                  54.6%         36             51         5             6   \n5                  62.6%         63             49        12             4   \n6                  65.1%         67             48        12             9   \n7                  74.1%        101             89        16            16   \n8                  70.6%         35             30         3             5   \n9                  66.7%         48             56         3             7   \n10                 71.5%         73             90        10            12   \n11                 65.4%         43             51        11             6   \n12                 77.0%         34             43         4             6   \n13                 93.8%        102             83        19            11   \n14                 61.6%         35             51         7             7   \n15                 76.5%         48             31         4             5   \n\n    Red Cards  Subs on  Subs off  Players Used  \n0           0        9         9            16  \n1           0       11        11            19  \n2           0        7         7            15  \n3           0       11        11            16  \n4           0       11        11            19  \n5           0       15        15            17  \n6           1       12        12            20  \n7           0       18        18            19  \n8           0        7         7            15  \n9           1        7         7            17  \n10          0       14        14            16  \n11          1       10        10            17  \n12          0        7         7            16  \n13          0       17        17            18  \n14          0        9         9            18  \n15          0        9         9            18  \n\n[16 rows x 35 columns]\n\n\n\n\nStep 4. Select only the Goal column.\n\ngoals = euro12['Goals']\nprint(goals)\n\n0      4\n1      4\n2      4\n3      5\n4      3\n5     10\n6      5\n7      6\n8      2\n9      2\n10     6\n11     1\n12     5\n13    12\n14     5\n15     2\nName: Goals, dtype: int64\n\n\n\n\nStep 5. How many team participated in the Euro2012?\n\nnum_teams = euro12.shape[0]\nprint(f'Number of teams participated: {num_teams}')\n\nNumber of teams participated: 16\n\n\n\n\nStep 6. What is the number of columns in the dataset?\n\n\neuro12.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 16 entries, 0 to 15\nData columns (total 35 columns):\n #   Column                      Non-Null Count  Dtype  \n---  ------                      --------------  -----  \n 0   Team                        16 non-null     object \n 1   Goals                       16 non-null     int64  \n 2   Shots on target             16 non-null     int64  \n 3   Shots off target            16 non-null     int64  \n 4   Shooting Accuracy           16 non-null     object \n 5   % Goals-to-shots            16 non-null     object \n 6   Total shots (inc. Blocked)  16 non-null     int64  \n 7   Hit Woodwork                16 non-null     int64  \n 8   Penalty goals               16 non-null     int64  \n 9   Penalties not scored        16 non-null     int64  \n 10  Headed goals                16 non-null     int64  \n 11  Passes                      16 non-null     int64  \n 12  Passes completed            16 non-null     int64  \n 13  Passing Accuracy            16 non-null     object \n 14  Touches                     16 non-null     int64  \n 15  Crosses                     16 non-null     int64  \n 16  Dribbles                    16 non-null     int64  \n 17  Corners Taken               16 non-null     int64  \n 18  Tackles                     16 non-null     int64  \n 19  Clearances                  16 non-null     int64  \n 20  Interceptions               16 non-null     int64  \n 21  Clearances off line         15 non-null     float64\n 22  Clean Sheets                16 non-null     int64  \n 23  Blocks                      16 non-null     int64  \n 24  Goals conceded              16 non-null     int64  \n 25  Saves made                  16 non-null     int64  \n 26  Saves-to-shots ratio        16 non-null     object \n 27  Fouls Won                   16 non-null     int64  \n 28  Fouls Conceded              16 non-null     int64  \n 29  Offsides                    16 non-null     int64  \n 30  Yellow Cards                16 non-null     int64  \n 31  Red Cards                   16 non-null     int64  \n 32  Subs on                     16 non-null     int64  \n 33  Subs off                    16 non-null     int64  \n 34  Players Used                16 non-null     int64  \ndtypes: float64(1), int64(29), object(5)\nmemory usage: 4.5+ KB\n\n\n\n\nStep 7. View only the columns Team, Yellow Cards and Red Cards and assign them to a dataframe called discipline\n\ndiscipline = euro12[['Team', 'Yellow Cards', 'Red Cards']]\nprint(discipline)\n\n                   Team  Yellow Cards  Red Cards\n0               Croatia             9          0\n1        Czech Republic             7          0\n2               Denmark             4          0\n3               England             5          0\n4                France             6          0\n5               Germany             4          0\n6                Greece             9          1\n7                 Italy            16          0\n8           Netherlands             5          0\n9                Poland             7          1\n10             Portugal            12          0\n11  Republic of Ireland             6          1\n12               Russia             6          0\n13                Spain            11          0\n14               Sweden             7          0\n15              Ukraine             5          0\n\n\n\n\nStep 8. Sort the teams by Red Cards, then to Yellow Cards\n\nsorted_discipline = discipline.sort_values(by=['Red Cards', 'Yellow Cards'], ascending=[False, False])\nprint(sorted_discipline)\n\n                   Team  Yellow Cards  Red Cards\n6                Greece             9          1\n9                Poland             7          1\n11  Republic of Ireland             6          1\n7                 Italy            16          0\n10             Portugal            12          0\n13                Spain            11          0\n0               Croatia             9          0\n1        Czech Republic             7          0\n14               Sweden             7          0\n4                France             6          0\n12               Russia             6          0\n3               England             5          0\n8           Netherlands             5          0\n15              Ukraine             5          0\n2               Denmark             4          0\n5               Germany             4          0\n\n\n\n\nStep 9. Calculate the mean Yellow Cards given per Team\n\n# Calculate the mean Yellow Cards given per Team and round to 1 decimal place\nmean_yellow_cards = round(euro12['Yellow Cards'].mean(), 1)\n\n# Display the result\nprint(mean_yellow_cards)\n\n\n\n7.4\n\n\n\n\nStep 10. Filter teams that scored more than 6 goals\n\nteams_more_than_6_goals = euro12[euro12['Goals'] &gt; 6]\n\ngermany_spain = teams_more_than_6_goals[teams_more_than_6_goals['Team'].isin(['Germany', 'Spain'])]\n\nprint(germany_spain)\n\n\n       Team  Goals  Shots on target  Shots off target Shooting Accuracy  \\\n5   Germany     10               32                32             47.8%   \n13    Spain     12               42                33             55.9%   \n\n   % Goals-to-shots  Total shots (inc. Blocked)  Hit Woodwork  Penalty goals  \\\n5             15.6%                          80             2              1   \n13            16.0%                         100             0              1   \n\n    Penalties not scored  ...  Saves made  Saves-to-shots ratio  Fouls Won  \\\n5                      0  ...          10                 62.6%         63   \n13                     0  ...          15                 93.8%        102   \n\n   Fouls Conceded  Offsides  Yellow Cards  Red Cards  Subs on  Subs off  \\\n5              49        12             4          0       15        15   \n13             83        19            11          0       17        17   \n\n    Players Used  \n5             17  \n13            18  \n\n[2 rows x 35 columns]\n\n\n\n\nStep 11. Select the teams that start with G\n\nteams_start_with_G = euro12[euro12['Team'].str.startswith('G')]\nprint(teams_start_with_G)\n\n      Team  Goals  Shots on target  Shots off target Shooting Accuracy  \\\n5  Germany     10               32                32             47.8%   \n6   Greece      5                8                18             30.7%   \n\n  % Goals-to-shots  Total shots (inc. Blocked)  Hit Woodwork  Penalty goals  \\\n5            15.6%                          80             2              1   \n6            19.2%                          32             1              1   \n\n   Penalties not scored  ...  Saves made  Saves-to-shots ratio  Fouls Won  \\\n5                     0  ...          10                 62.6%         63   \n6                     1  ...          13                 65.1%         67   \n\n  Fouls Conceded  Offsides  Yellow Cards  Red Cards  Subs on  Subs off  \\\n5             49        12             4          0       15        15   \n6             48        12             9          1       12        12   \n\n   Players Used  \n5            17  \n6            20  \n\n[2 rows x 35 columns]\n\n\n\n\nStep 12. Select the first 7 columns\n\nfirst_7_columns = euro12.iloc[:, :7]\nprint(first_7_columns)\n\n                   Team  Goals  Shots on target  Shots off target  \\\n0               Croatia      4               13                12   \n1        Czech Republic      4               13                18   \n2               Denmark      4               10                10   \n3               England      5               11                18   \n4                France      3               22                24   \n5               Germany     10               32                32   \n6                Greece      5                8                18   \n7                 Italy      6               34                45   \n8           Netherlands      2               12                36   \n9                Poland      2               15                23   \n10             Portugal      6               22                42   \n11  Republic of Ireland      1                7                12   \n12               Russia      5                9                31   \n13                Spain     12               42                33   \n14               Sweden      5               17                19   \n15              Ukraine      2                7                26   \n\n   Shooting Accuracy % Goals-to-shots  Total shots (inc. Blocked)  \n0              51.9%            16.0%                          32  \n1              41.9%            12.9%                          39  \n2              50.0%            20.0%                          27  \n3              50.0%            17.2%                          40  \n4              37.9%             6.5%                          65  \n5              47.8%            15.6%                          80  \n6              30.7%            19.2%                          32  \n7              43.0%             7.5%                         110  \n8              25.0%             4.1%                          60  \n9              39.4%             5.2%                          48  \n10             34.3%             9.3%                          82  \n11             36.8%             5.2%                          28  \n12             22.5%            12.5%                          59  \n13             55.9%            16.0%                         100  \n14             47.2%            13.8%                          39  \n15             21.2%             6.0%                          38  \n\n\n\n\nStep 13. Select all columns except the last 3.\n\ncolumns_excluding_last_3 = euro12.iloc[:, :-3]\nprint(columns_excluding_last_3)\n\n                   Team  Goals  Shots on target  Shots off target  \\\n0               Croatia      4               13                12   \n1        Czech Republic      4               13                18   \n2               Denmark      4               10                10   \n3               England      5               11                18   \n4                France      3               22                24   \n5               Germany     10               32                32   \n6                Greece      5                8                18   \n7                 Italy      6               34                45   \n8           Netherlands      2               12                36   \n9                Poland      2               15                23   \n10             Portugal      6               22                42   \n11  Republic of Ireland      1                7                12   \n12               Russia      5                9                31   \n13                Spain     12               42                33   \n14               Sweden      5               17                19   \n15              Ukraine      2                7                26   \n\n   Shooting Accuracy % Goals-to-shots  Total shots (inc. Blocked)  \\\n0              51.9%            16.0%                          32   \n1              41.9%            12.9%                          39   \n2              50.0%            20.0%                          27   \n3              50.0%            17.2%                          40   \n4              37.9%             6.5%                          65   \n5              47.8%            15.6%                          80   \n6              30.7%            19.2%                          32   \n7              43.0%             7.5%                         110   \n8              25.0%             4.1%                          60   \n9              39.4%             5.2%                          48   \n10             34.3%             9.3%                          82   \n11             36.8%             5.2%                          28   \n12             22.5%            12.5%                          59   \n13             55.9%            16.0%                         100   \n14             47.2%            13.8%                          39   \n15             21.2%             6.0%                          38   \n\n    Hit Woodwork  Penalty goals  Penalties not scored  ...  Clean Sheets  \\\n0              0              0                     0  ...             0   \n1              0              0                     0  ...             1   \n2              1              0                     0  ...             1   \n3              0              0                     0  ...             2   \n4              1              0                     0  ...             1   \n5              2              1                     0  ...             1   \n6              1              1                     1  ...             1   \n7              2              0                     0  ...             2   \n8              2              0                     0  ...             0   \n9              0              0                     0  ...             0   \n10             6              0                     0  ...             2   \n11             0              0                     0  ...             0   \n12             2              0                     0  ...             0   \n13             0              1                     0  ...             5   \n14             3              0                     0  ...             1   \n15             0              0                     0  ...             0   \n\n    Blocks  Goals conceded Saves made  Saves-to-shots ratio  Fouls Won  \\\n0       10               3         13                 81.3%         41   \n1       10               6          9                 60.1%         53   \n2       10               5         10                 66.7%         25   \n3       29               3         22                 88.1%         43   \n4        7               5          6                 54.6%         36   \n5       11               6         10                 62.6%         63   \n6       23               7         13                 65.1%         67   \n7       18               7         20                 74.1%        101   \n8        9               5         12                 70.6%         35   \n9        8               3          6                 66.7%         48   \n10      11               4         10                 71.5%         73   \n11      23               9         17                 65.4%         43   \n12       8               3         10                 77.0%         34   \n13       8               1         15                 93.8%        102   \n14      12               5          8                 61.6%         35   \n15       4               4         13                 76.5%         48   \n\n    Fouls Conceded  Offsides  Yellow Cards  Red Cards  \n0               62         2             9          0  \n1               73         8             7          0  \n2               38         8             4          0  \n3               45         6             5          0  \n4               51         5             6          0  \n5               49        12             4          0  \n6               48        12             9          1  \n7               89        16            16          0  \n8               30         3             5          0  \n9               56         3             7          1  \n10              90        10            12          0  \n11              51        11             6          1  \n12              43         4             6          0  \n13              83        19            11          0  \n14              51         7             7          0  \n15              31         4             5          0  \n\n[16 rows x 32 columns]\n\n\n\n\nStep 14. Present only the Shooting Accuracy from England, Italy and Russia\n\nshooting_accuracy = euro12[euro12['Team'].isin(['England', 'Italy', 'Russia'])][['Team', 'Shooting Accuracy']]\nprint(shooting_accuracy)\n\n       Team Shooting Accuracy\n3   England             50.0%\n7     Italy             43.0%\n12   Russia             22.5%\n\n\n\nSource: Ex2 - Getting and Knowing your Data\n\nOccupation\n\n\nEx3 - Getting and Knowing your Data\nThis time we are going to pull data directly from the internet. Special thanks to: https://github.com/justmarkham for sharing the dataset and materials.\n\nStep 1. Import the necessary libraries\n\nimport pandas as pd\n\n\n\nStep 2. Import the dataset from this address.\n\nurl = 'https://raw.githubusercontent.com/justmarkham/DAT8/master/data/u.user'\n\n\nuser_data = pd.read_csv(url, delimiter='|')\n\n\nprint(user_data.head())\n\n   user_id  age gender  occupation zip_code\n0        1   24      M  technician    85711\n1        2   53      F       other    94043\n2        3   23      M      writer    32067\n3        4   24      M  technician    43537\n4        5   33      F       other    15213\n\n\n\n\nStep 3. Assign it to a variable called users and use the ‘user_id’ as index\n\n\nurl = 'https://raw.githubusercontent.com/justmarkham/DAT8/master/data/u.user'\n\n\nusers = pd.read_csv(url, delimiter='|', index_col='user_id')\n\n\nprint(users.head())\n\n         age gender  occupation zip_code\nuser_id                                 \n1         24      M  technician    85711\n2         53      F       other    94043\n3         23      M      writer    32067\n4         24      M  technician    43537\n5         33      F       other    15213\n\n\n\n\nStep 4. See the first 25 entries\n\n\nprint(users.head(25))\n\n         age gender     occupation zip_code\nuser_id                                    \n1         24      M     technician    85711\n2         53      F          other    94043\n3         23      M         writer    32067\n4         24      M     technician    43537\n5         33      F          other    15213\n6         42      M      executive    98101\n7         57      M  administrator    91344\n8         36      M  administrator    05201\n9         29      M        student    01002\n10        53      M         lawyer    90703\n11        39      F          other    30329\n12        28      F          other    06405\n13        47      M       educator    29206\n14        45      M      scientist    55106\n15        49      F       educator    97301\n16        21      M  entertainment    10309\n17        30      M     programmer    06355\n18        35      F          other    37212\n19        40      M      librarian    02138\n20        42      F      homemaker    95660\n21        26      M         writer    30068\n22        25      M         writer    40206\n23        30      F         artist    48197\n24        21      F         artist    94533\n25        39      M       engineer    55107\n\n\n\n\nStep 5. See the last 10 entries\n\n\nprint(users.tail(10))\n\n         age gender     occupation zip_code\nuser_id                                    \n934       61      M       engineer    22902\n935       42      M         doctor    66221\n936       24      M          other    32789\n937       48      M       educator    98072\n938       38      F     technician    55038\n939       26      F        student    33319\n940       32      M  administrator    02215\n941       20      M        student    97229\n942       48      F      librarian    78209\n943       22      M        student    77841\n\n\n\n\nStep 6. What is the number of observations in the dataset?\n\n# Get the number of observations (rows) in the dataset\nnum_observations = users.shape[0]\n\n# Print the number of observations\nprint(f\"Number of observations in the dataset: {num_observations}\")\n\nNumber of observations in the dataset: 943\n\n\n\n\nStep 7. What is the number of columns in the dataset?\n\n\nnum_columns = users.shape[1]\n\n\nprint(f\"Number of columns in the dataset: {num_columns}\")\n\nNumber of columns in the dataset: 4\n\n\n\n\nStep 8. Print the name of all the columns.\n\n\nprint(users.columns)\n\nIndex(['age', 'gender', 'occupation', 'zip_code'], dtype='object')\n\n\n\n\nStep 9. How is the dataset indexed?\n\n\nprint(users.index)\n\nIndex([  1,   2,   3,   4,   5,   6,   7,   8,   9,  10,\n       ...\n       934, 935, 936, 937, 938, 939, 940, 941, 942, 943],\n      dtype='int64', name='user_id', length=943)\n\n\n\n\nStep 10. What is the data type of each column?\n\n\nprint(users.dtypes)\n\nage            int64\ngender        object\noccupation    object\nzip_code      object\ndtype: object\n\n\n\n\nStep 11. Print only the occupation column\n\n\nprint(users['occupation'])\n\nuser_id\n1         technician\n2              other\n3             writer\n4         technician\n5              other\n           ...      \n939          student\n940    administrator\n941          student\n942        librarian\n943          student\nName: occupation, Length: 943, dtype: object\n\n\n\n\nStep 12. How many different occupations are in this dataset?\n\nnum_occupations = users['occupation'].nunique()\n\nprint(f\"Number of different occupations in the dataset: {num_occupations}\")\n\nNumber of different occupations in the dataset: 21\n\n\n\n\nStep 13. What is the most frequent occupation?\n\nmost_frequent_occupation = users['occupation'].mode()[0]\n\n\nprint(f\"The most frequent occupation in the dataset is: {most_frequent_occupation}\")\n\nThe most frequent occupation in the dataset is: student\n\n\n\n\nStep 14. Summarize the DataFrame.\n\nprint(users.describe())\n\n              age\ncount  943.000000\nmean    34.051962\nstd     12.192740\nmin      7.000000\n25%     25.000000\n50%     31.000000\n75%     43.000000\nmax     73.000000\n\n\n\nprint(users.info())\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nIndex: 943 entries, 1 to 943\nData columns (total 4 columns):\n #   Column      Non-Null Count  Dtype \n---  ------      --------------  ----- \n 0   age         943 non-null    int64 \n 1   gender      943 non-null    object\n 2   occupation  943 non-null    object\n 3   zip_code    943 non-null    object\ndtypes: int64(1), object(3)\nmemory usage: 36.8+ KB\nNone\n\n\n\n\nStep 15. Summarize all the columns\n\nsummary = users.describe(include='all').transpose()\n\n\nprint(summary)\n\n\n\n            count unique      top freq       mean       std  min   25%   50%  \\\nage         943.0    NaN      NaN  NaN  34.051962  12.19274  7.0  25.0  31.0   \ngender        943      2        M  670        NaN       NaN  NaN   NaN   NaN   \noccupation    943     21  student  196        NaN       NaN  NaN   NaN   NaN   \nzip_code      943    795    55414    9        NaN       NaN  NaN   NaN   NaN   \n\n             75%   max  \nage         43.0  73.0  \ngender       NaN   NaN  \noccupation   NaN   NaN  \nzip_code     NaN   NaN  \n\n\n\n\nStep 16. Summarize only the occupation column\n\noccupation_summary = users['occupation'].describe()\n\nprint(occupation_summary)\n\ncount         943\nunique         21\ntop       student\nfreq          196\nName: occupation, dtype: object\n\n\n\n\nStep 17. What is the mean age of users?\n\nmean_age = users['age'].mean()\n\nprint(f\"The mean age of users is: {mean_age}\")\n\nThe mean age of users is: 34.05196182396607\n\n\n\n\nStep 18. What is the age with least occurrence?\n\n\nage_counts = users['age'].value_counts()\n\n\nleast_occurrence_ages = age_counts[age_counts == 1]\n\n\nleast_occurrence_ages.name = 'age'\n\n\nprint(least_occurrence_ages)\n\n\n\n\n\nage\n7     1\n66    1\n11    1\n10    1\n73    1\nName: age, dtype: int64\n\n\n\nSource: Ex3 - Getting and Knowing your Data\n\nOpen food facts\n\n\nExercise 1\n\nStep 1. Go to https://www.kaggle.com/openfoodfacts/world-food-facts/data\n\n\nStep 2. Download the dataset to your computer and unzip it.\n\nimport pandas as pd\nimport numpy as np\n\n\n\nStep 3. Use the tsv file and assign it to a dataframe called food\n\n\n\nfood  = pd.read_csv('en.openfoodfacts.org.products.tsv.zip', sep='\\t')\n\n\n\nStep 4. See the first 5 entries\n\nfood.head()\n\n\n\n\n\n\n\n\ncode\nurl\ncreator\ncreated_t\ncreated_datetime\nlast_modified_t\nlast_modified_datetime\nproduct_name\ngeneric_name\nquantity\n...\nfruits-vegetables-nuts_100g\nfruits-vegetables-nuts-estimate_100g\ncollagen-meat-protein-ratio_100g\ncocoa_100g\nchlorophyl_100g\ncarbon-footprint_100g\nnutrition-score-fr_100g\nnutrition-score-uk_100g\nglycemic-index_100g\nwater-hardness_100g\n\n\n\n\n0\n3087\nhttp://world-en.openfoodfacts.org/product/0000000003087/farine-de-ble-noir-ferme-t-y-r-nao\nopenfoodfacts-contributors\n1474103866\n2016-09-17T09:17:46Z\n1474103893\n2016-09-17T09:18:13Z\nFarine de blé noir\nNaN\n1kg\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n1\n4530\nhttp://world-en.openfoodfacts.org/product/0000000004530/banana-chips-sweetened-whole\nusda-ndb-import\n1489069957\n2017-03-09T14:32:37Z\n1489069957\n2017-03-09T14:32:37Z\nBanana Chips Sweetened (Whole)\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n14.0\n14.0\nNaN\nNaN\n\n\n2\n4559\nhttp://world-en.openfoodfacts.org/product/0000000004559/peanuts-torn-glasser\nusda-ndb-import\n1489069957\n2017-03-09T14:32:37Z\n1489069957\n2017-03-09T14:32:37Z\nPeanuts\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n0.0\n0.0\nNaN\nNaN\n\n\n3\n16087\nhttp://world-en.openfoodfacts.org/product/0000000016087/organic-salted-nut-mix-grizzlies\nusda-ndb-import\n1489055731\n2017-03-09T10:35:31Z\n1489055731\n2017-03-09T10:35:31Z\nOrganic Salted Nut Mix\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n12.0\n12.0\nNaN\nNaN\n\n\n4\n16094\nhttp://world-en.openfoodfacts.org/product/0000000016094/organic-polenta-bob-s-red-mill\nusda-ndb-import\n1489055653\n2017-03-09T10:34:13Z\n1489055653\n2017-03-09T10:34:13Z\nOrganic Polenta\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n\n\n5 rows × 163 columns\n\n\n\n\n\nStep 5. What is the number of observations in the dataset?\n\nfood.shape\n\n(356027, 163)\n\n\n\nfood.shape[0]\n\n356027\n\n\n\n\nStep 6. What is the number of columns in the dataset?\n\nprint(food.shape)\nprint(food.shape[1])\n\nfood.info()\n\n(356027, 163)\n163\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 356027 entries, 0 to 356026\nColumns: 163 entries, code to water-hardness_100g\ndtypes: float64(107), object(56)\nmemory usage: 442.8+ MB\n\n\n\n\nStep 7. Print the name of all the columns.\n\nfood.columns\n\nIndex(['code', 'url', 'creator', 'created_t', 'created_datetime',\n       'last_modified_t', 'last_modified_datetime', 'product_name',\n       'generic_name', 'quantity',\n       ...\n       'fruits-vegetables-nuts_100g', 'fruits-vegetables-nuts-estimate_100g',\n       'collagen-meat-protein-ratio_100g', 'cocoa_100g', 'chlorophyl_100g',\n       'carbon-footprint_100g', 'nutrition-score-fr_100g',\n       'nutrition-score-uk_100g', 'glycemic-index_100g',\n       'water-hardness_100g'],\n      dtype='object', length=163)\n\n\n\n\nStep 8. What is the name of 105th column?\n\nfood.columns[104]\n\n'-glucose_100g'\n\n\n\n\nStep 9. What is the type of the observations of the 105th column?\n\nfood['-glucose_100g'].dtype\n\ndtype('float64')\n\n\n\n\nStep 10. How is the dataset indexed?\n\nfood.index\n\nRangeIndex(start=0, stop=356027, step=1)\n\n\n\npd.set_option('display.max_colwidth', 300)\n\n\nfood[['code','url']]\n\n\n\n\n\n\n\n\ncode\nurl\n\n\n\n\n0\n3087\nhttp://world-en.openfoodfacts.org/product/0000...\n\n\n1\n4530\nhttp://world-en.openfoodfacts.org/product/0000...\n\n\n2\n4559\nhttp://world-en.openfoodfacts.org/product/0000...\n\n\n3\n16087\nhttp://world-en.openfoodfacts.org/product/0000...\n\n\n4\n16094\nhttp://world-en.openfoodfacts.org/product/0000...\n\n\n...\n...\n...\n\n\n356022\n99567453\nhttp://world-en.openfoodfacts.org/product/9956...\n\n\n356023\n9970229501521\nhttp://world-en.openfoodfacts.org/product/9970...\n\n\n356024\n9977471758307\nhttp://world-en.openfoodfacts.org/product/9977...\n\n\n356025\n9980282863788\nhttp://world-en.openfoodfacts.org/product/9980...\n\n\n356026\n999990026839\nhttp://world-en.openfoodfacts.org/product/9999...\n\n\n\n\n356027 rows × 2 columns\n\n\n\n\n\nStep 11. What is the product name of the 19th observation?\n\nfood.at[18, 'product_name']\n\n'Lotus Organic Brown Jasmine Rice'\n\n\n\nSource: Exercise 1\n\nScores\n\n\nScores\n\nIntroduction:\nThis time you will create the data.\nExercise based on Chris Albon work, the credits belong to him.\n\n\nStep 1. Import the necessary libraries\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\n\nStep 2. Create the DataFrame that should look like the one below.\n\n\ndata = {\n    'first_name': ['Jason', 'Molly', 'Tina', 'Jake', 'Amy'],\n    'last_name': ['Miller', 'Jacobson', 'Ali', 'Milner', 'Cooze'],\n    'age': [42, 52, 36, 24, 73],\n    'female': [0, 1, 1, 0, 1],\n    'preTestScore': [4, 24, 31, 2, 3],\n    'postTestScore': [25, 94, 57, 62, 70]\n}\n\ndf = pd.DataFrame(data)\nprint(df)\n\n  first_name last_name  age  female  preTestScore  postTestScore\n0      Jason    Miller   42       0             4             25\n1      Molly  Jacobson   52       1            24             94\n2       Tina       Ali   36       1            31             57\n3       Jake    Milner   24       0             2             62\n4        Amy     Cooze   73       1             3             70\n\n\n\n\nStep 3. Create a Scatterplot of preTestScore and postTestScore, with the size of each point determined by age\n\nHint: Don’t forget to place the labels\n\nplt.scatter(df['preTestScore'], df['postTestScore'], s=df['age'], alpha=0.5)\n\nplt.xlabel('Pre Test Score')\nplt.ylabel('Post Test Score')\nplt.title('Pre Test Score vs Post Test Score')\n\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\nStep 4. Create a Scatterplot of preTestScore and postTestScore.\n\n\nThis time the size should be 4.5 times the postTestScore and the color determined by sex\n\n\nplt.scatter(df['preTestScore'], df['postTestScore'], \n            s=4.5 * df['postTestScore'], c=df['female'], cmap='coolwarm', alpha=0.5)\n\nplt.xlabel('Pre Test Score')\nplt.ylabel('Post Test Score')\nplt.title('Pre Test Score vs Post Test Score with Size and Color')\n\nplt.show()\n\n\n\n\n\n\n\n\n\n\nBONUS: Create your own question and answer it.\nFind the correlation between preTestScore and postTestScore\n\ncorrelation = df['preTestScore'].corr(df['postTestScore'])\nprint(f\"Correlation between preTestScore and postTestScore: {correlation}\")\n\nCorrelation between preTestScore and postTestScore: 0.37803911777651406\n\n\n\nSource: Scores\n\nVisualizing Chipotle’s Data\n\n\nVisualizing Chipotle’s Data\nThis time we are going to pull data directly from the internet. Special thanks to: https://github.com/justmarkham for sharing the dataset and materials.\n\nStep 1. Import the necessary libraries\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom collections import Counter\n\n\n\nStep 2. Import the dataset from this address.\n\nurl = 'https://raw.githubusercontent.com/justmarkham/DAT8/master/data/chipotle.tsv'\n\n\n\nStep 3. Assign it to a variable called chipo.\n\nchipo = pd.read_csv(url, sep = '\\t')\n\n\n\nStep 4. See the first 10 entries\n\nchipo.head(10)\n\n\n\n\n\n\n\n\norder_id\nquantity\nitem_name\nchoice_description\nitem_price\n\n\n\n\n0\n1\n1\nChips and Fresh Tomato Salsa\nNaN\n$2.39\n\n\n1\n1\n1\nIzze\n[Clementine]\n$3.39\n\n\n2\n1\n1\nNantucket Nectar\n[Apple]\n$3.39\n\n\n3\n1\n1\nChips and Tomatillo-Green Chili Salsa\nNaN\n$2.39\n\n\n4\n2\n2\nChicken Bowl\n[Tomatillo-Red Chili Salsa (Hot), [Black Beans...\n$16.98\n\n\n5\n3\n1\nChicken Bowl\n[Fresh Tomato Salsa (Mild), [Rice, Cheese, Sou...\n$10.98\n\n\n6\n3\n1\nSide of Chips\nNaN\n$1.69\n\n\n7\n4\n1\nSteak Burrito\n[Tomatillo Red Chili Salsa, [Fajita Vegetables...\n$11.75\n\n\n8\n4\n1\nSteak Soft Tacos\n[Tomatillo Green Chili Salsa, [Pinto Beans, Ch...\n$9.25\n\n\n9\n5\n1\nSteak Burrito\n[Fresh Tomato Salsa, [Rice, Black Beans, Pinto...\n$9.25\n\n\n\n\n\n\n\n\n\nStep 5. Create a histogram of the top 5 items bought\n\nx = chipo.item_name\n\nletter_counts = Counter(x)\n\ndf = pd.DataFrame.from_dict(letter_counts, orient='index')\n\ndf = df[0].sort_values(ascending = True)[45:50]\n\ndf.plot(kind='bar')\n\nplt.xlabel('Items')\nplt.ylabel('Number of Times Ordered')\nplt.title('Most ordered Chipotle\\'s Items')\n\nplt.show()\n\n\n\n\n\n\n\n\n\n\nStep 6. Create a scatterplot with the number of items orderered per order price\n\nHint: Price should be in the X-axis and Items ordered in the Y-axis\n\nchipo.item_price = [float(value[1:-1]) for value in chipo.item_price] # strip the dollar sign and trailing space\n\norders = chipo.groupby('order_id').sum()\n\nplt.scatter(x = orders.item_price, y = orders.quantity, s = 50, c = 'green')\n\nplt.xlabel('Order Price')\nplt.ylabel('Items ordered')\nplt.title('Number of items ordered per order price')\nplt.ylim(0)\n\n\n\n\n\n\n\n\n\n\n\nStep 7. BONUS: Create a question and a graph to answer your own question.\nWhich menu items have the highest unit prices and how do the number of orders for these menu items vary?\n\nurl = 'https://raw.githubusercontent.com/justmarkham/DAT8/master/data/chipotle.tsv'\nchipo = pd.read_csv(url, sep = '\\t')\n\nchipo.item_price = [float(value[1:-1]) for value in chipo.item_price]\n\nmost_expensive_items = chipo.groupby('item_name').item_price.mean().sort_values(ascending=False).head(10)\n\ntop_items = chipo[chipo['item_name'].isin(most_expensive_items.index)]\nitem_order_counts = top_items.groupby('item_name')['quantity'].sum()\n\nfig, ax = plt.subplots(figsize=(10, 6))\nitem_order_counts.plot(kind='bar', ax=ax, color='skyblue')\n\nax.set_xlabel('Menu Item')\nax.set_ylabel('Total Quantity Ordered')\nax.set_title('Top 10 Most Expensive Menu Items and Their Order Quantities')\n\nplt.xticks(rotation=45, ha=\"right\")\nplt.show()\n\n\n\n\n\n\n\n\n\nSource: Visualizing Chipotle's Data\n: ’’}, regex=True).astype(float)\nprint(chipo.head())\n\n::: {.cell-output .cell-output-stdout}\norder_id quantity item_name\n0 1 1 Chips and Fresh Tomato Salsa\n1 1 1 Izze\n2 1 1 Nantucket Nectar\n3 1 1 Chips and Tomatillo-Green Chili Salsa\n4 2 2 Chicken Bowl\n                              choice_description  item_price  \n0 NaN 2.39\n1 [Clementine] 3.39\n2 [Apple] 3.39\n3 NaN 2.39\n4 [Tomatillo-Red Chili Salsa (Hot), [Black Beans… 16.98\n:::\n:::\n\n\n#### Step 13.a. Check the item price type\n\n::: {#cell-28 .cell execution_count=14}\n``` {.python .cell-code}\nurl = 'https://raw.githubusercontent.com/justmarkham/DAT8/master/data/chipotle.tsv'\n\nchipo = pd.read_csv(url, sep='\\t')\n\nchipo['item_price'] = chipo['item_price'].replace({'\\\n\n\n\n\n\n\n\n\n\n# Euro12\n\n\n\n\n\n:::{.quarto-embed-nb-cell notebook=\"D:\\code\\jiedan\\12-28\\test1\\labs\\Labexercises\\lab1\\Euro12.ipynb\" notebook-title=\"Ex2 - Filtering and Sorting Data\" notebook-cellId=\"cell-0\"}\n\n# Ex2 - Filtering and Sorting Data\n\nThis time we are going to pull data directly from the internet.\n\n### Step 1. Import the necessary libraries\n\n::: {#cell-2 .cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\n:::\n\nStep 2. Import the dataset from this address.\n\n\nStep 3. Assign it to a variable called euro12.\n\n\neuro12 = pd.read_csv('https://raw.githubusercontent.com/guipsamora/pandas_exercises/master/02_Filtering_%26_Sorting/Euro12/Euro_2012_stats_TEAM.csv')\n\nprint(euro12)\n\n                   Team  Goals  Shots on target  Shots off target  \\\n0               Croatia      4               13                12   \n1        Czech Republic      4               13                18   \n2               Denmark      4               10                10   \n3               England      5               11                18   \n4                France      3               22                24   \n5               Germany     10               32                32   \n6                Greece      5                8                18   \n7                 Italy      6               34                45   \n8           Netherlands      2               12                36   \n9                Poland      2               15                23   \n10             Portugal      6               22                42   \n11  Republic of Ireland      1                7                12   \n12               Russia      5                9                31   \n13                Spain     12               42                33   \n14               Sweden      5               17                19   \n15              Ukraine      2                7                26   \n\n   Shooting Accuracy % Goals-to-shots  Total shots (inc. Blocked)  \\\n0              51.9%            16.0%                          32   \n1              41.9%            12.9%                          39   \n2              50.0%            20.0%                          27   \n3              50.0%            17.2%                          40   \n4              37.9%             6.5%                          65   \n5              47.8%            15.6%                          80   \n6              30.7%            19.2%                          32   \n7              43.0%             7.5%                         110   \n8              25.0%             4.1%                          60   \n9              39.4%             5.2%                          48   \n10             34.3%             9.3%                          82   \n11             36.8%             5.2%                          28   \n12             22.5%            12.5%                          59   \n13             55.9%            16.0%                         100   \n14             47.2%            13.8%                          39   \n15             21.2%             6.0%                          38   \n\n    Hit Woodwork  Penalty goals  Penalties not scored  ...  Saves made  \\\n0              0              0                     0  ...          13   \n1              0              0                     0  ...           9   \n2              1              0                     0  ...          10   \n3              0              0                     0  ...          22   \n4              1              0                     0  ...           6   \n5              2              1                     0  ...          10   \n6              1              1                     1  ...          13   \n7              2              0                     0  ...          20   \n8              2              0                     0  ...          12   \n9              0              0                     0  ...           6   \n10             6              0                     0  ...          10   \n11             0              0                     0  ...          17   \n12             2              0                     0  ...          10   \n13             0              1                     0  ...          15   \n14             3              0                     0  ...           8   \n15             0              0                     0  ...          13   \n\n    Saves-to-shots ratio  Fouls Won Fouls Conceded  Offsides  Yellow Cards  \\\n0                  81.3%         41             62         2             9   \n1                  60.1%         53             73         8             7   \n2                  66.7%         25             38         8             4   \n3                  88.1%         43             45         6             5   \n4                  54.6%         36             51         5             6   \n5                  62.6%         63             49        12             4   \n6                  65.1%         67             48        12             9   \n7                  74.1%        101             89        16            16   \n8                  70.6%         35             30         3             5   \n9                  66.7%         48             56         3             7   \n10                 71.5%         73             90        10            12   \n11                 65.4%         43             51        11             6   \n12                 77.0%         34             43         4             6   \n13                 93.8%        102             83        19            11   \n14                 61.6%         35             51         7             7   \n15                 76.5%         48             31         4             5   \n\n    Red Cards  Subs on  Subs off  Players Used  \n0           0        9         9            16  \n1           0       11        11            19  \n2           0        7         7            15  \n3           0       11        11            16  \n4           0       11        11            19  \n5           0       15        15            17  \n6           1       12        12            20  \n7           0       18        18            19  \n8           0        7         7            15  \n9           1        7         7            17  \n10          0       14        14            16  \n11          1       10        10            17  \n12          0        7         7            16  \n13          0       17        17            18  \n14          0        9         9            18  \n15          0        9         9            18  \n\n[16 rows x 35 columns]\n\n\n\n\nStep 4. Select only the Goal column.\n\ngoals = euro12['Goals']\nprint(goals)\n\n0      4\n1      4\n2      4\n3      5\n4      3\n5     10\n6      5\n7      6\n8      2\n9      2\n10     6\n11     1\n12     5\n13    12\n14     5\n15     2\nName: Goals, dtype: int64\n\n\n\n\nStep 5. How many team participated in the Euro2012?\n\nnum_teams = euro12.shape[0]\nprint(f'Number of teams participated: {num_teams}')\n\nNumber of teams participated: 16\n\n\n\n\nStep 6. What is the number of columns in the dataset?\n\n\neuro12.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 16 entries, 0 to 15\nData columns (total 35 columns):\n #   Column                      Non-Null Count  Dtype  \n---  ------                      --------------  -----  \n 0   Team                        16 non-null     object \n 1   Goals                       16 non-null     int64  \n 2   Shots on target             16 non-null     int64  \n 3   Shots off target            16 non-null     int64  \n 4   Shooting Accuracy           16 non-null     object \n 5   % Goals-to-shots            16 non-null     object \n 6   Total shots (inc. Blocked)  16 non-null     int64  \n 7   Hit Woodwork                16 non-null     int64  \n 8   Penalty goals               16 non-null     int64  \n 9   Penalties not scored        16 non-null     int64  \n 10  Headed goals                16 non-null     int64  \n 11  Passes                      16 non-null     int64  \n 12  Passes completed            16 non-null     int64  \n 13  Passing Accuracy            16 non-null     object \n 14  Touches                     16 non-null     int64  \n 15  Crosses                     16 non-null     int64  \n 16  Dribbles                    16 non-null     int64  \n 17  Corners Taken               16 non-null     int64  \n 18  Tackles                     16 non-null     int64  \n 19  Clearances                  16 non-null     int64  \n 20  Interceptions               16 non-null     int64  \n 21  Clearances off line         15 non-null     float64\n 22  Clean Sheets                16 non-null     int64  \n 23  Blocks                      16 non-null     int64  \n 24  Goals conceded              16 non-null     int64  \n 25  Saves made                  16 non-null     int64  \n 26  Saves-to-shots ratio        16 non-null     object \n 27  Fouls Won                   16 non-null     int64  \n 28  Fouls Conceded              16 non-null     int64  \n 29  Offsides                    16 non-null     int64  \n 30  Yellow Cards                16 non-null     int64  \n 31  Red Cards                   16 non-null     int64  \n 32  Subs on                     16 non-null     int64  \n 33  Subs off                    16 non-null     int64  \n 34  Players Used                16 non-null     int64  \ndtypes: float64(1), int64(29), object(5)\nmemory usage: 4.5+ KB\n\n\n\n\nStep 7. View only the columns Team, Yellow Cards and Red Cards and assign them to a dataframe called discipline\n\ndiscipline = euro12[['Team', 'Yellow Cards', 'Red Cards']]\nprint(discipline)\n\n                   Team  Yellow Cards  Red Cards\n0               Croatia             9          0\n1        Czech Republic             7          0\n2               Denmark             4          0\n3               England             5          0\n4                France             6          0\n5               Germany             4          0\n6                Greece             9          1\n7                 Italy            16          0\n8           Netherlands             5          0\n9                Poland             7          1\n10             Portugal            12          0\n11  Republic of Ireland             6          1\n12               Russia             6          0\n13                Spain            11          0\n14               Sweden             7          0\n15              Ukraine             5          0\n\n\n\n\nStep 8. Sort the teams by Red Cards, then to Yellow Cards\n\nsorted_discipline = discipline.sort_values(by=['Red Cards', 'Yellow Cards'], ascending=[False, False])\nprint(sorted_discipline)\n\n                   Team  Yellow Cards  Red Cards\n6                Greece             9          1\n9                Poland             7          1\n11  Republic of Ireland             6          1\n7                 Italy            16          0\n10             Portugal            12          0\n13                Spain            11          0\n0               Croatia             9          0\n1        Czech Republic             7          0\n14               Sweden             7          0\n4                France             6          0\n12               Russia             6          0\n3               England             5          0\n8           Netherlands             5          0\n15              Ukraine             5          0\n2               Denmark             4          0\n5               Germany             4          0\n\n\n\n\nStep 9. Calculate the mean Yellow Cards given per Team\n\n# Calculate the mean Yellow Cards given per Team and round to 1 decimal place\nmean_yellow_cards = round(euro12['Yellow Cards'].mean(), 1)\n\n# Display the result\nprint(mean_yellow_cards)\n\n\n\n7.4\n\n\n\n\nStep 10. Filter teams that scored more than 6 goals\n\nteams_more_than_6_goals = euro12[euro12['Goals'] &gt; 6]\n\ngermany_spain = teams_more_than_6_goals[teams_more_than_6_goals['Team'].isin(['Germany', 'Spain'])]\n\nprint(germany_spain)\n\n\n       Team  Goals  Shots on target  Shots off target Shooting Accuracy  \\\n5   Germany     10               32                32             47.8%   \n13    Spain     12               42                33             55.9%   \n\n   % Goals-to-shots  Total shots (inc. Blocked)  Hit Woodwork  Penalty goals  \\\n5             15.6%                          80             2              1   \n13            16.0%                         100             0              1   \n\n    Penalties not scored  ...  Saves made  Saves-to-shots ratio  Fouls Won  \\\n5                      0  ...          10                 62.6%         63   \n13                     0  ...          15                 93.8%        102   \n\n   Fouls Conceded  Offsides  Yellow Cards  Red Cards  Subs on  Subs off  \\\n5              49        12             4          0       15        15   \n13             83        19            11          0       17        17   \n\n    Players Used  \n5             17  \n13            18  \n\n[2 rows x 35 columns]\n\n\n\n\nStep 11. Select the teams that start with G\n\nteams_start_with_G = euro12[euro12['Team'].str.startswith('G')]\nprint(teams_start_with_G)\n\n      Team  Goals  Shots on target  Shots off target Shooting Accuracy  \\\n5  Germany     10               32                32             47.8%   \n6   Greece      5                8                18             30.7%   \n\n  % Goals-to-shots  Total shots (inc. Blocked)  Hit Woodwork  Penalty goals  \\\n5            15.6%                          80             2              1   \n6            19.2%                          32             1              1   \n\n   Penalties not scored  ...  Saves made  Saves-to-shots ratio  Fouls Won  \\\n5                     0  ...          10                 62.6%         63   \n6                     1  ...          13                 65.1%         67   \n\n  Fouls Conceded  Offsides  Yellow Cards  Red Cards  Subs on  Subs off  \\\n5             49        12             4          0       15        15   \n6             48        12             9          1       12        12   \n\n   Players Used  \n5            17  \n6            20  \n\n[2 rows x 35 columns]\n\n\n\n\nStep 12. Select the first 7 columns\n\nfirst_7_columns = euro12.iloc[:, :7]\nprint(first_7_columns)\n\n                   Team  Goals  Shots on target  Shots off target  \\\n0               Croatia      4               13                12   \n1        Czech Republic      4               13                18   \n2               Denmark      4               10                10   \n3               England      5               11                18   \n4                France      3               22                24   \n5               Germany     10               32                32   \n6                Greece      5                8                18   \n7                 Italy      6               34                45   \n8           Netherlands      2               12                36   \n9                Poland      2               15                23   \n10             Portugal      6               22                42   \n11  Republic of Ireland      1                7                12   \n12               Russia      5                9                31   \n13                Spain     12               42                33   \n14               Sweden      5               17                19   \n15              Ukraine      2                7                26   \n\n   Shooting Accuracy % Goals-to-shots  Total shots (inc. Blocked)  \n0              51.9%            16.0%                          32  \n1              41.9%            12.9%                          39  \n2              50.0%            20.0%                          27  \n3              50.0%            17.2%                          40  \n4              37.9%             6.5%                          65  \n5              47.8%            15.6%                          80  \n6              30.7%            19.2%                          32  \n7              43.0%             7.5%                         110  \n8              25.0%             4.1%                          60  \n9              39.4%             5.2%                          48  \n10             34.3%             9.3%                          82  \n11             36.8%             5.2%                          28  \n12             22.5%            12.5%                          59  \n13             55.9%            16.0%                         100  \n14             47.2%            13.8%                          39  \n15             21.2%             6.0%                          38  \n\n\n\n\nStep 13. Select all columns except the last 3.\n\ncolumns_excluding_last_3 = euro12.iloc[:, :-3]\nprint(columns_excluding_last_3)\n\n                   Team  Goals  Shots on target  Shots off target  \\\n0               Croatia      4               13                12   \n1        Czech Republic      4               13                18   \n2               Denmark      4               10                10   \n3               England      5               11                18   \n4                France      3               22                24   \n5               Germany     10               32                32   \n6                Greece      5                8                18   \n7                 Italy      6               34                45   \n8           Netherlands      2               12                36   \n9                Poland      2               15                23   \n10             Portugal      6               22                42   \n11  Republic of Ireland      1                7                12   \n12               Russia      5                9                31   \n13                Spain     12               42                33   \n14               Sweden      5               17                19   \n15              Ukraine      2                7                26   \n\n   Shooting Accuracy % Goals-to-shots  Total shots (inc. Blocked)  \\\n0              51.9%            16.0%                          32   \n1              41.9%            12.9%                          39   \n2              50.0%            20.0%                          27   \n3              50.0%            17.2%                          40   \n4              37.9%             6.5%                          65   \n5              47.8%            15.6%                          80   \n6              30.7%            19.2%                          32   \n7              43.0%             7.5%                         110   \n8              25.0%             4.1%                          60   \n9              39.4%             5.2%                          48   \n10             34.3%             9.3%                          82   \n11             36.8%             5.2%                          28   \n12             22.5%            12.5%                          59   \n13             55.9%            16.0%                         100   \n14             47.2%            13.8%                          39   \n15             21.2%             6.0%                          38   \n\n    Hit Woodwork  Penalty goals  Penalties not scored  ...  Clean Sheets  \\\n0              0              0                     0  ...             0   \n1              0              0                     0  ...             1   \n2              1              0                     0  ...             1   \n3              0              0                     0  ...             2   \n4              1              0                     0  ...             1   \n5              2              1                     0  ...             1   \n6              1              1                     1  ...             1   \n7              2              0                     0  ...             2   \n8              2              0                     0  ...             0   \n9              0              0                     0  ...             0   \n10             6              0                     0  ...             2   \n11             0              0                     0  ...             0   \n12             2              0                     0  ...             0   \n13             0              1                     0  ...             5   \n14             3              0                     0  ...             1   \n15             0              0                     0  ...             0   \n\n    Blocks  Goals conceded Saves made  Saves-to-shots ratio  Fouls Won  \\\n0       10               3         13                 81.3%         41   \n1       10               6          9                 60.1%         53   \n2       10               5         10                 66.7%         25   \n3       29               3         22                 88.1%         43   \n4        7               5          6                 54.6%         36   \n5       11               6         10                 62.6%         63   \n6       23               7         13                 65.1%         67   \n7       18               7         20                 74.1%        101   \n8        9               5         12                 70.6%         35   \n9        8               3          6                 66.7%         48   \n10      11               4         10                 71.5%         73   \n11      23               9         17                 65.4%         43   \n12       8               3         10                 77.0%         34   \n13       8               1         15                 93.8%        102   \n14      12               5          8                 61.6%         35   \n15       4               4         13                 76.5%         48   \n\n    Fouls Conceded  Offsides  Yellow Cards  Red Cards  \n0               62         2             9          0  \n1               73         8             7          0  \n2               38         8             4          0  \n3               45         6             5          0  \n4               51         5             6          0  \n5               49        12             4          0  \n6               48        12             9          1  \n7               89        16            16          0  \n8               30         3             5          0  \n9               56         3             7          1  \n10              90        10            12          0  \n11              51        11             6          1  \n12              43         4             6          0  \n13              83        19            11          0  \n14              51         7             7          0  \n15              31         4             5          0  \n\n[16 rows x 32 columns]\n\n\n\n\nStep 14. Present only the Shooting Accuracy from England, Italy and Russia\n\nshooting_accuracy = euro12[euro12['Team'].isin(['England', 'Italy', 'Russia'])][['Team', 'Shooting Accuracy']]\nprint(shooting_accuracy)\n\n       Team Shooting Accuracy\n3   England             50.0%\n7     Italy             43.0%\n12   Russia             22.5%\n\n\n:::\n\n\nOccupation\n\n\nEx3 - Getting and Knowing your Data\nThis time we are going to pull data directly from the internet. Special thanks to: https://github.com/justmarkham for sharing the dataset and materials.\n\nStep 1. Import the necessary libraries\n\nimport pandas as pd\n\n\n\nStep 2. Import the dataset from this address.\n\nurl = 'https://raw.githubusercontent.com/justmarkham/DAT8/master/data/u.user'\n\n\nuser_data = pd.read_csv(url, delimiter='|')\n\n\nprint(user_data.head())\n\n   user_id  age gender  occupation zip_code\n0        1   24      M  technician    85711\n1        2   53      F       other    94043\n2        3   23      M      writer    32067\n3        4   24      M  technician    43537\n4        5   33      F       other    15213\n\n\n\n\nStep 3. Assign it to a variable called users and use the ‘user_id’ as index\n\n\nurl = 'https://raw.githubusercontent.com/justmarkham/DAT8/master/data/u.user'\n\n\nusers = pd.read_csv(url, delimiter='|', index_col='user_id')\n\n\nprint(users.head())\n\n         age gender  occupation zip_code\nuser_id                                 \n1         24      M  technician    85711\n2         53      F       other    94043\n3         23      M      writer    32067\n4         24      M  technician    43537\n5         33      F       other    15213\n\n\n\n\nStep 4. See the first 25 entries\n\n\nprint(users.head(25))\n\n         age gender     occupation zip_code\nuser_id                                    \n1         24      M     technician    85711\n2         53      F          other    94043\n3         23      M         writer    32067\n4         24      M     technician    43537\n5         33      F          other    15213\n6         42      M      executive    98101\n7         57      M  administrator    91344\n8         36      M  administrator    05201\n9         29      M        student    01002\n10        53      M         lawyer    90703\n11        39      F          other    30329\n12        28      F          other    06405\n13        47      M       educator    29206\n14        45      M      scientist    55106\n15        49      F       educator    97301\n16        21      M  entertainment    10309\n17        30      M     programmer    06355\n18        35      F          other    37212\n19        40      M      librarian    02138\n20        42      F      homemaker    95660\n21        26      M         writer    30068\n22        25      M         writer    40206\n23        30      F         artist    48197\n24        21      F         artist    94533\n25        39      M       engineer    55107\n\n\n\n\nStep 5. See the last 10 entries\n\n\nprint(users.tail(10))\n\n         age gender     occupation zip_code\nuser_id                                    \n934       61      M       engineer    22902\n935       42      M         doctor    66221\n936       24      M          other    32789\n937       48      M       educator    98072\n938       38      F     technician    55038\n939       26      F        student    33319\n940       32      M  administrator    02215\n941       20      M        student    97229\n942       48      F      librarian    78209\n943       22      M        student    77841\n\n\n\n\nStep 6. What is the number of observations in the dataset?\n\n# Get the number of observations (rows) in the dataset\nnum_observations = users.shape[0]\n\n# Print the number of observations\nprint(f\"Number of observations in the dataset: {num_observations}\")\n\nNumber of observations in the dataset: 943\n\n\n\n\nStep 7. What is the number of columns in the dataset?\n\n\nnum_columns = users.shape[1]\n\n\nprint(f\"Number of columns in the dataset: {num_columns}\")\n\nNumber of columns in the dataset: 4\n\n\n\n\nStep 8. Print the name of all the columns.\n\n\nprint(users.columns)\n\nIndex(['age', 'gender', 'occupation', 'zip_code'], dtype='object')\n\n\n\n\nStep 9. How is the dataset indexed?\n\n\nprint(users.index)\n\nIndex([  1,   2,   3,   4,   5,   6,   7,   8,   9,  10,\n       ...\n       934, 935, 936, 937, 938, 939, 940, 941, 942, 943],\n      dtype='int64', name='user_id', length=943)\n\n\n\n\nStep 10. What is the data type of each column?\n\n\nprint(users.dtypes)\n\nage            int64\ngender        object\noccupation    object\nzip_code      object\ndtype: object\n\n\n\n\nStep 11. Print only the occupation column\n\n\nprint(users['occupation'])\n\nuser_id\n1         technician\n2              other\n3             writer\n4         technician\n5              other\n           ...      \n939          student\n940    administrator\n941          student\n942        librarian\n943          student\nName: occupation, Length: 943, dtype: object\n\n\n\n\nStep 12. How many different occupations are in this dataset?\n\nnum_occupations = users['occupation'].nunique()\n\nprint(f\"Number of different occupations in the dataset: {num_occupations}\")\n\nNumber of different occupations in the dataset: 21\n\n\n\n\nStep 13. What is the most frequent occupation?\n\nmost_frequent_occupation = users['occupation'].mode()[0]\n\n\nprint(f\"The most frequent occupation in the dataset is: {most_frequent_occupation}\")\n\nThe most frequent occupation in the dataset is: student\n\n\n\n\nStep 14. Summarize the DataFrame.\n\nprint(users.describe())\n\n              age\ncount  943.000000\nmean    34.051962\nstd     12.192740\nmin      7.000000\n25%     25.000000\n50%     31.000000\n75%     43.000000\nmax     73.000000\n\n\n\nprint(users.info())\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nIndex: 943 entries, 1 to 943\nData columns (total 4 columns):\n #   Column      Non-Null Count  Dtype \n---  ------      --------------  ----- \n 0   age         943 non-null    int64 \n 1   gender      943 non-null    object\n 2   occupation  943 non-null    object\n 3   zip_code    943 non-null    object\ndtypes: int64(1), object(3)\nmemory usage: 36.8+ KB\nNone\n\n\n\n\nStep 15. Summarize all the columns\n\nsummary = users.describe(include='all').transpose()\n\n\nprint(summary)\n\n\n\n            count unique      top freq       mean       std  min   25%   50%  \\\nage         943.0    NaN      NaN  NaN  34.051962  12.19274  7.0  25.0  31.0   \ngender        943      2        M  670        NaN       NaN  NaN   NaN   NaN   \noccupation    943     21  student  196        NaN       NaN  NaN   NaN   NaN   \nzip_code      943    795    55414    9        NaN       NaN  NaN   NaN   NaN   \n\n             75%   max  \nage         43.0  73.0  \ngender       NaN   NaN  \noccupation   NaN   NaN  \nzip_code     NaN   NaN  \n\n\n\n\nStep 16. Summarize only the occupation column\n\noccupation_summary = users['occupation'].describe()\n\nprint(occupation_summary)\n\ncount         943\nunique         21\ntop       student\nfreq          196\nName: occupation, dtype: object\n\n\n\n\nStep 17. What is the mean age of users?\n\nmean_age = users['age'].mean()\n\nprint(f\"The mean age of users is: {mean_age}\")\n\nThe mean age of users is: 34.05196182396607\n\n\n\n\nStep 18. What is the age with least occurrence?\n\n\nage_counts = users['age'].value_counts()\n\n\nleast_occurrence_ages = age_counts[age_counts == 1]\n\n\nleast_occurrence_ages.name = 'age'\n\n\nprint(least_occurrence_ages)\n\n\n\n\n\nage\n7     1\n66    1\n11    1\n10    1\n73    1\nName: age, dtype: int64\n\n\n\n\n\nOpen food facts\n\n\nExercise 1\n\nStep 1. Go to https://www.kaggle.com/openfoodfacts/world-food-facts/data\n\n\nStep 2. Download the dataset to your computer and unzip it.\n\nimport pandas as pd\nimport numpy as np\n\n\n\nStep 3. Use the tsv file and assign it to a dataframe called food\n\n\n\nfood  = pd.read_csv('en.openfoodfacts.org.products.tsv.zip', sep='\\t')\n\n\n\nStep 4. See the first 5 entries\n\nfood.head()\n\n\n\n\n\n\n\n\ncode\nurl\ncreator\ncreated_t\ncreated_datetime\nlast_modified_t\nlast_modified_datetime\nproduct_name\ngeneric_name\nquantity\n...\nfruits-vegetables-nuts_100g\nfruits-vegetables-nuts-estimate_100g\ncollagen-meat-protein-ratio_100g\ncocoa_100g\nchlorophyl_100g\ncarbon-footprint_100g\nnutrition-score-fr_100g\nnutrition-score-uk_100g\nglycemic-index_100g\nwater-hardness_100g\n\n\n\n\n0\n3087\nhttp://world-en.openfoodfacts.org/product/0000000003087/farine-de-ble-noir-ferme-t-y-r-nao\nopenfoodfacts-contributors\n1474103866\n2016-09-17T09:17:46Z\n1474103893\n2016-09-17T09:18:13Z\nFarine de blé noir\nNaN\n1kg\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n1\n4530\nhttp://world-en.openfoodfacts.org/product/0000000004530/banana-chips-sweetened-whole\nusda-ndb-import\n1489069957\n2017-03-09T14:32:37Z\n1489069957\n2017-03-09T14:32:37Z\nBanana Chips Sweetened (Whole)\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n14.0\n14.0\nNaN\nNaN\n\n\n2\n4559\nhttp://world-en.openfoodfacts.org/product/0000000004559/peanuts-torn-glasser\nusda-ndb-import\n1489069957\n2017-03-09T14:32:37Z\n1489069957\n2017-03-09T14:32:37Z\nPeanuts\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n0.0\n0.0\nNaN\nNaN\n\n\n3\n16087\nhttp://world-en.openfoodfacts.org/product/0000000016087/organic-salted-nut-mix-grizzlies\nusda-ndb-import\n1489055731\n2017-03-09T10:35:31Z\n1489055731\n2017-03-09T10:35:31Z\nOrganic Salted Nut Mix\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n12.0\n12.0\nNaN\nNaN\n\n\n4\n16094\nhttp://world-en.openfoodfacts.org/product/0000000016094/organic-polenta-bob-s-red-mill\nusda-ndb-import\n1489055653\n2017-03-09T10:34:13Z\n1489055653\n2017-03-09T10:34:13Z\nOrganic Polenta\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n\n\n5 rows × 163 columns\n\n\n\n\n\nStep 5. What is the number of observations in the dataset?\n\nfood.shape\n\n(356027, 163)\n\n\n\nfood.shape[0]\n\n356027\n\n\n\n\nStep 6. What is the number of columns in the dataset?\n\nprint(food.shape)\nprint(food.shape[1])\n\nfood.info()\n\n(356027, 163)\n163\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 356027 entries, 0 to 356026\nColumns: 163 entries, code to water-hardness_100g\ndtypes: float64(107), object(56)\nmemory usage: 442.8+ MB\n\n\n\n\nStep 7. Print the name of all the columns.\n\nfood.columns\n\nIndex(['code', 'url', 'creator', 'created_t', 'created_datetime',\n       'last_modified_t', 'last_modified_datetime', 'product_name',\n       'generic_name', 'quantity',\n       ...\n       'fruits-vegetables-nuts_100g', 'fruits-vegetables-nuts-estimate_100g',\n       'collagen-meat-protein-ratio_100g', 'cocoa_100g', 'chlorophyl_100g',\n       'carbon-footprint_100g', 'nutrition-score-fr_100g',\n       'nutrition-score-uk_100g', 'glycemic-index_100g',\n       'water-hardness_100g'],\n      dtype='object', length=163)\n\n\n\n\nStep 8. What is the name of 105th column?\n\nfood.columns[104]\n\n'-glucose_100g'\n\n\n\n\nStep 9. What is the type of the observations of the 105th column?\n\nfood['-glucose_100g'].dtype\n\ndtype('float64')\n\n\n\n\nStep 10. How is the dataset indexed?\n\nfood.index\n\nRangeIndex(start=0, stop=356027, step=1)\n\n\n\npd.set_option('display.max_colwidth', 300)\n\n\nfood[['code','url']]\n\n\n\n\n\n\n\n\ncode\nurl\n\n\n\n\n0\n3087\nhttp://world-en.openfoodfacts.org/product/0000...\n\n\n1\n4530\nhttp://world-en.openfoodfacts.org/product/0000...\n\n\n2\n4559\nhttp://world-en.openfoodfacts.org/product/0000...\n\n\n3\n16087\nhttp://world-en.openfoodfacts.org/product/0000...\n\n\n4\n16094\nhttp://world-en.openfoodfacts.org/product/0000...\n\n\n...\n...\n...\n\n\n356022\n99567453\nhttp://world-en.openfoodfacts.org/product/9956...\n\n\n356023\n9970229501521\nhttp://world-en.openfoodfacts.org/product/9970...\n\n\n356024\n9977471758307\nhttp://world-en.openfoodfacts.org/product/9977...\n\n\n356025\n9980282863788\nhttp://world-en.openfoodfacts.org/product/9980...\n\n\n356026\n999990026839\nhttp://world-en.openfoodfacts.org/product/9999...\n\n\n\n\n356027 rows × 2 columns\n\n\n\n\n\nStep 11. What is the product name of the 19th observation?\n\nfood.at[18, 'product_name']\n\n'Lotus Organic Brown Jasmine Rice'\n\n\n\n\n\nScores\n\n\nScores\n\nIntroduction:\nThis time you will create the data.\nExercise based on Chris Albon work, the credits belong to him.\n\n\nStep 1. Import the necessary libraries\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\n\nStep 2. Create the DataFrame that should look like the one below.\n\n\ndata = {\n    'first_name': ['Jason', 'Molly', 'Tina', 'Jake', 'Amy'],\n    'last_name': ['Miller', 'Jacobson', 'Ali', 'Milner', 'Cooze'],\n    'age': [42, 52, 36, 24, 73],\n    'female': [0, 1, 1, 0, 1],\n    'preTestScore': [4, 24, 31, 2, 3],\n    'postTestScore': [25, 94, 57, 62, 70]\n}\n\ndf = pd.DataFrame(data)\nprint(df)\n\n  first_name last_name  age  female  preTestScore  postTestScore\n0      Jason    Miller   42       0             4             25\n1      Molly  Jacobson   52       1            24             94\n2       Tina       Ali   36       1            31             57\n3       Jake    Milner   24       0             2             62\n4        Amy     Cooze   73       1             3             70\n\n\n\n\nStep 3. Create a Scatterplot of preTestScore and postTestScore, with the size of each point determined by age\n\nHint: Don’t forget to place the labels\n\nplt.scatter(df['preTestScore'], df['postTestScore'], s=df['age'], alpha=0.5)\n\nplt.xlabel('Pre Test Score')\nplt.ylabel('Post Test Score')\nplt.title('Pre Test Score vs Post Test Score')\n\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\nStep 4. Create a Scatterplot of preTestScore and postTestScore.\n\n\nThis time the size should be 4.5 times the postTestScore and the color determined by sex\n\n\nplt.scatter(df['preTestScore'], df['postTestScore'], \n            s=4.5 * df['postTestScore'], c=df['female'], cmap='coolwarm', alpha=0.5)\n\nplt.xlabel('Pre Test Score')\nplt.ylabel('Post Test Score')\nplt.title('Pre Test Score vs Post Test Score with Size and Color')\n\nplt.show()\n\n\n\n\n\n\n\n\n\n\nBONUS: Create your own question and answer it.\nFind the correlation between preTestScore and postTestScore\n\ncorrelation = df['preTestScore'].corr(df['postTestScore'])\nprint(f\"Correlation between preTestScore and postTestScore: {correlation}\")\n\nCorrelation between preTestScore and postTestScore: 0.37803911777651406\n\n\n\n\n\nVisualizing Chipotle’s Data\n\n\nVisualizing Chipotle’s Data\nThis time we are going to pull data directly from the internet. Special thanks to: https://github.com/justmarkham for sharing the dataset and materials.\n\nStep 1. Import the necessary libraries\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom collections import Counter\n\n\n\nStep 2. Import the dataset from this address.\n\nurl = 'https://raw.githubusercontent.com/justmarkham/DAT8/master/data/chipotle.tsv'\n\n\n\nStep 3. Assign it to a variable called chipo.\n\nchipo = pd.read_csv(url, sep = '\\t')\n\n\n\nStep 4. See the first 10 entries\n\nchipo.head(10)\n\n\n\n\n\n\n\n\norder_id\nquantity\nitem_name\nchoice_description\nitem_price\n\n\n\n\n0\n1\n1\nChips and Fresh Tomato Salsa\nNaN\n$2.39\n\n\n1\n1\n1\nIzze\n[Clementine]\n$3.39\n\n\n2\n1\n1\nNantucket Nectar\n[Apple]\n$3.39\n\n\n3\n1\n1\nChips and Tomatillo-Green Chili Salsa\nNaN\n$2.39\n\n\n4\n2\n2\nChicken Bowl\n[Tomatillo-Red Chili Salsa (Hot), [Black Beans...\n$16.98\n\n\n5\n3\n1\nChicken Bowl\n[Fresh Tomato Salsa (Mild), [Rice, Cheese, Sou...\n$10.98\n\n\n6\n3\n1\nSide of Chips\nNaN\n$1.69\n\n\n7\n4\n1\nSteak Burrito\n[Tomatillo Red Chili Salsa, [Fajita Vegetables...\n$11.75\n\n\n8\n4\n1\nSteak Soft Tacos\n[Tomatillo Green Chili Salsa, [Pinto Beans, Ch...\n$9.25\n\n\n9\n5\n1\nSteak Burrito\n[Fresh Tomato Salsa, [Rice, Black Beans, Pinto...\n$9.25\n\n\n\n\n\n\n\n\n\nStep 5. Create a histogram of the top 5 items bought\n\nx = chipo.item_name\n\nletter_counts = Counter(x)\n\ndf = pd.DataFrame.from_dict(letter_counts, orient='index')\n\ndf = df[0].sort_values(ascending = True)[45:50]\n\ndf.plot(kind='bar')\n\nplt.xlabel('Items')\nplt.ylabel('Number of Times Ordered')\nplt.title('Most ordered Chipotle\\'s Items')\n\nplt.show()\n\n\n\n\n\n\n\n\n\n\nStep 6. Create a scatterplot with the number of items orderered per order price\n\nHint: Price should be in the X-axis and Items ordered in the Y-axis\n\nchipo.item_price = [float(value[1:-1]) for value in chipo.item_price] # strip the dollar sign and trailing space\n\norders = chipo.groupby('order_id').sum()\n\nplt.scatter(x = orders.item_price, y = orders.quantity, s = 50, c = 'green')\n\nplt.xlabel('Order Price')\nplt.ylabel('Items ordered')\nplt.title('Number of items ordered per order price')\nplt.ylim(0)\n\n\n\n\n\n\n\n\n\n\n\nStep 7. BONUS: Create a question and a graph to answer your own question.\nWhich menu items have the highest unit prices and how do the number of orders for these menu items vary?\n\nurl = 'https://raw.githubusercontent.com/justmarkham/DAT8/master/data/chipotle.tsv'\nchipo = pd.read_csv(url, sep = '\\t')\n\nchipo.item_price = [float(value[1:-1]) for value in chipo.item_price]\n\nmost_expensive_items = chipo.groupby('item_name').item_price.mean().sort_values(ascending=False).head(10)\n\ntop_items = chipo[chipo['item_name'].isin(most_expensive_items.index)]\nitem_order_counts = top_items.groupby('item_name')['quantity'].sum()\n\nfig, ax = plt.subplots(figsize=(10, 6))\nitem_order_counts.plot(kind='bar', ax=ax, color='skyblue')\n\nax.set_xlabel('Menu Item')\nax.set_ylabel('Total Quantity Ordered')\nax.set_title('Top 10 Most Expensive Menu Items and Their Order Quantities')\n\nplt.xticks(rotation=45, ha=\"right\")\nplt.show()\n\n\n\n\n\n\n\n\n\n\n: ’’}, regex=True).astype(float)\nprint(f”The data type of ‘item_price’ is: {chipo[‘item_price’].dtype}“)\n\n::: {.cell-output .cell-output-stdout}\nThe data type of ‘item_price’ is: float64\n:::\n:::\n\n\n#### Step 13.b. Create a lambda function and change the type of item price\n\n::: {#cell-30 .cell execution_count=15}\n``` {.python .cell-code}\nchipo = pd.read_csv(url, sep='\\t')\n\nchipo['item_price'] = chipo['item_price'].apply(lambda x: float(x.replace('\n\n\n\n\n\n\n\n\n\n# Euro12\n\n\n\n\n\n:::{.quarto-embed-nb-cell notebook=\"D:\\code\\jiedan\\12-28\\test1\\labs\\Labexercises\\lab1\\Euro12.ipynb\" notebook-title=\"Ex2 - Filtering and Sorting Data\" notebook-cellId=\"cell-0\"}\n\n# Ex2 - Filtering and Sorting Data\n\nThis time we are going to pull data directly from the internet.\n\n### Step 1. Import the necessary libraries\n\n::: {#cell-2 .cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\n:::\n\nStep 2. Import the dataset from this address.\n\n\nStep 3. Assign it to a variable called euro12.\n\n\neuro12 = pd.read_csv('https://raw.githubusercontent.com/guipsamora/pandas_exercises/master/02_Filtering_%26_Sorting/Euro12/Euro_2012_stats_TEAM.csv')\n\nprint(euro12)\n\n                   Team  Goals  Shots on target  Shots off target  \\\n0               Croatia      4               13                12   \n1        Czech Republic      4               13                18   \n2               Denmark      4               10                10   \n3               England      5               11                18   \n4                France      3               22                24   \n5               Germany     10               32                32   \n6                Greece      5                8                18   \n7                 Italy      6               34                45   \n8           Netherlands      2               12                36   \n9                Poland      2               15                23   \n10             Portugal      6               22                42   \n11  Republic of Ireland      1                7                12   \n12               Russia      5                9                31   \n13                Spain     12               42                33   \n14               Sweden      5               17                19   \n15              Ukraine      2                7                26   \n\n   Shooting Accuracy % Goals-to-shots  Total shots (inc. Blocked)  \\\n0              51.9%            16.0%                          32   \n1              41.9%            12.9%                          39   \n2              50.0%            20.0%                          27   \n3              50.0%            17.2%                          40   \n4              37.9%             6.5%                          65   \n5              47.8%            15.6%                          80   \n6              30.7%            19.2%                          32   \n7              43.0%             7.5%                         110   \n8              25.0%             4.1%                          60   \n9              39.4%             5.2%                          48   \n10             34.3%             9.3%                          82   \n11             36.8%             5.2%                          28   \n12             22.5%            12.5%                          59   \n13             55.9%            16.0%                         100   \n14             47.2%            13.8%                          39   \n15             21.2%             6.0%                          38   \n\n    Hit Woodwork  Penalty goals  Penalties not scored  ...  Saves made  \\\n0              0              0                     0  ...          13   \n1              0              0                     0  ...           9   \n2              1              0                     0  ...          10   \n3              0              0                     0  ...          22   \n4              1              0                     0  ...           6   \n5              2              1                     0  ...          10   \n6              1              1                     1  ...          13   \n7              2              0                     0  ...          20   \n8              2              0                     0  ...          12   \n9              0              0                     0  ...           6   \n10             6              0                     0  ...          10   \n11             0              0                     0  ...          17   \n12             2              0                     0  ...          10   \n13             0              1                     0  ...          15   \n14             3              0                     0  ...           8   \n15             0              0                     0  ...          13   \n\n    Saves-to-shots ratio  Fouls Won Fouls Conceded  Offsides  Yellow Cards  \\\n0                  81.3%         41             62         2             9   \n1                  60.1%         53             73         8             7   \n2                  66.7%         25             38         8             4   \n3                  88.1%         43             45         6             5   \n4                  54.6%         36             51         5             6   \n5                  62.6%         63             49        12             4   \n6                  65.1%         67             48        12             9   \n7                  74.1%        101             89        16            16   \n8                  70.6%         35             30         3             5   \n9                  66.7%         48             56         3             7   \n10                 71.5%         73             90        10            12   \n11                 65.4%         43             51        11             6   \n12                 77.0%         34             43         4             6   \n13                 93.8%        102             83        19            11   \n14                 61.6%         35             51         7             7   \n15                 76.5%         48             31         4             5   \n\n    Red Cards  Subs on  Subs off  Players Used  \n0           0        9         9            16  \n1           0       11        11            19  \n2           0        7         7            15  \n3           0       11        11            16  \n4           0       11        11            19  \n5           0       15        15            17  \n6           1       12        12            20  \n7           0       18        18            19  \n8           0        7         7            15  \n9           1        7         7            17  \n10          0       14        14            16  \n11          1       10        10            17  \n12          0        7         7            16  \n13          0       17        17            18  \n14          0        9         9            18  \n15          0        9         9            18  \n\n[16 rows x 35 columns]\n\n\n\n\nStep 4. Select only the Goal column.\n\ngoals = euro12['Goals']\nprint(goals)\n\n0      4\n1      4\n2      4\n3      5\n4      3\n5     10\n6      5\n7      6\n8      2\n9      2\n10     6\n11     1\n12     5\n13    12\n14     5\n15     2\nName: Goals, dtype: int64\n\n\n\n\nStep 5. How many team participated in the Euro2012?\n\nnum_teams = euro12.shape[0]\nprint(f'Number of teams participated: {num_teams}')\n\nNumber of teams participated: 16\n\n\n\n\nStep 6. What is the number of columns in the dataset?\n\n\neuro12.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 16 entries, 0 to 15\nData columns (total 35 columns):\n #   Column                      Non-Null Count  Dtype  \n---  ------                      --------------  -----  \n 0   Team                        16 non-null     object \n 1   Goals                       16 non-null     int64  \n 2   Shots on target             16 non-null     int64  \n 3   Shots off target            16 non-null     int64  \n 4   Shooting Accuracy           16 non-null     object \n 5   % Goals-to-shots            16 non-null     object \n 6   Total shots (inc. Blocked)  16 non-null     int64  \n 7   Hit Woodwork                16 non-null     int64  \n 8   Penalty goals               16 non-null     int64  \n 9   Penalties not scored        16 non-null     int64  \n 10  Headed goals                16 non-null     int64  \n 11  Passes                      16 non-null     int64  \n 12  Passes completed            16 non-null     int64  \n 13  Passing Accuracy            16 non-null     object \n 14  Touches                     16 non-null     int64  \n 15  Crosses                     16 non-null     int64  \n 16  Dribbles                    16 non-null     int64  \n 17  Corners Taken               16 non-null     int64  \n 18  Tackles                     16 non-null     int64  \n 19  Clearances                  16 non-null     int64  \n 20  Interceptions               16 non-null     int64  \n 21  Clearances off line         15 non-null     float64\n 22  Clean Sheets                16 non-null     int64  \n 23  Blocks                      16 non-null     int64  \n 24  Goals conceded              16 non-null     int64  \n 25  Saves made                  16 non-null     int64  \n 26  Saves-to-shots ratio        16 non-null     object \n 27  Fouls Won                   16 non-null     int64  \n 28  Fouls Conceded              16 non-null     int64  \n 29  Offsides                    16 non-null     int64  \n 30  Yellow Cards                16 non-null     int64  \n 31  Red Cards                   16 non-null     int64  \n 32  Subs on                     16 non-null     int64  \n 33  Subs off                    16 non-null     int64  \n 34  Players Used                16 non-null     int64  \ndtypes: float64(1), int64(29), object(5)\nmemory usage: 4.5+ KB\n\n\n\n\nStep 7. View only the columns Team, Yellow Cards and Red Cards and assign them to a dataframe called discipline\n\ndiscipline = euro12[['Team', 'Yellow Cards', 'Red Cards']]\nprint(discipline)\n\n                   Team  Yellow Cards  Red Cards\n0               Croatia             9          0\n1        Czech Republic             7          0\n2               Denmark             4          0\n3               England             5          0\n4                France             6          0\n5               Germany             4          0\n6                Greece             9          1\n7                 Italy            16          0\n8           Netherlands             5          0\n9                Poland             7          1\n10             Portugal            12          0\n11  Republic of Ireland             6          1\n12               Russia             6          0\n13                Spain            11          0\n14               Sweden             7          0\n15              Ukraine             5          0\n\n\n\n\nStep 8. Sort the teams by Red Cards, then to Yellow Cards\n\nsorted_discipline = discipline.sort_values(by=['Red Cards', 'Yellow Cards'], ascending=[False, False])\nprint(sorted_discipline)\n\n                   Team  Yellow Cards  Red Cards\n6                Greece             9          1\n9                Poland             7          1\n11  Republic of Ireland             6          1\n7                 Italy            16          0\n10             Portugal            12          0\n13                Spain            11          0\n0               Croatia             9          0\n1        Czech Republic             7          0\n14               Sweden             7          0\n4                France             6          0\n12               Russia             6          0\n3               England             5          0\n8           Netherlands             5          0\n15              Ukraine             5          0\n2               Denmark             4          0\n5               Germany             4          0\n\n\n\n\nStep 9. Calculate the mean Yellow Cards given per Team\n\n# Calculate the mean Yellow Cards given per Team and round to 1 decimal place\nmean_yellow_cards = round(euro12['Yellow Cards'].mean(), 1)\n\n# Display the result\nprint(mean_yellow_cards)\n\n\n\n7.4\n\n\n\n\nStep 10. Filter teams that scored more than 6 goals\n\nteams_more_than_6_goals = euro12[euro12['Goals'] &gt; 6]\n\ngermany_spain = teams_more_than_6_goals[teams_more_than_6_goals['Team'].isin(['Germany', 'Spain'])]\n\nprint(germany_spain)\n\n\n       Team  Goals  Shots on target  Shots off target Shooting Accuracy  \\\n5   Germany     10               32                32             47.8%   \n13    Spain     12               42                33             55.9%   \n\n   % Goals-to-shots  Total shots (inc. Blocked)  Hit Woodwork  Penalty goals  \\\n5             15.6%                          80             2              1   \n13            16.0%                         100             0              1   \n\n    Penalties not scored  ...  Saves made  Saves-to-shots ratio  Fouls Won  \\\n5                      0  ...          10                 62.6%         63   \n13                     0  ...          15                 93.8%        102   \n\n   Fouls Conceded  Offsides  Yellow Cards  Red Cards  Subs on  Subs off  \\\n5              49        12             4          0       15        15   \n13             83        19            11          0       17        17   \n\n    Players Used  \n5             17  \n13            18  \n\n[2 rows x 35 columns]\n\n\n\n\nStep 11. Select the teams that start with G\n\nteams_start_with_G = euro12[euro12['Team'].str.startswith('G')]\nprint(teams_start_with_G)\n\n      Team  Goals  Shots on target  Shots off target Shooting Accuracy  \\\n5  Germany     10               32                32             47.8%   \n6   Greece      5                8                18             30.7%   \n\n  % Goals-to-shots  Total shots (inc. Blocked)  Hit Woodwork  Penalty goals  \\\n5            15.6%                          80             2              1   \n6            19.2%                          32             1              1   \n\n   Penalties not scored  ...  Saves made  Saves-to-shots ratio  Fouls Won  \\\n5                     0  ...          10                 62.6%         63   \n6                     1  ...          13                 65.1%         67   \n\n  Fouls Conceded  Offsides  Yellow Cards  Red Cards  Subs on  Subs off  \\\n5             49        12             4          0       15        15   \n6             48        12             9          1       12        12   \n\n   Players Used  \n5            17  \n6            20  \n\n[2 rows x 35 columns]\n\n\n\n\nStep 12. Select the first 7 columns\n\nfirst_7_columns = euro12.iloc[:, :7]\nprint(first_7_columns)\n\n                   Team  Goals  Shots on target  Shots off target  \\\n0               Croatia      4               13                12   \n1        Czech Republic      4               13                18   \n2               Denmark      4               10                10   \n3               England      5               11                18   \n4                France      3               22                24   \n5               Germany     10               32                32   \n6                Greece      5                8                18   \n7                 Italy      6               34                45   \n8           Netherlands      2               12                36   \n9                Poland      2               15                23   \n10             Portugal      6               22                42   \n11  Republic of Ireland      1                7                12   \n12               Russia      5                9                31   \n13                Spain     12               42                33   \n14               Sweden      5               17                19   \n15              Ukraine      2                7                26   \n\n   Shooting Accuracy % Goals-to-shots  Total shots (inc. Blocked)  \n0              51.9%            16.0%                          32  \n1              41.9%            12.9%                          39  \n2              50.0%            20.0%                          27  \n3              50.0%            17.2%                          40  \n4              37.9%             6.5%                          65  \n5              47.8%            15.6%                          80  \n6              30.7%            19.2%                          32  \n7              43.0%             7.5%                         110  \n8              25.0%             4.1%                          60  \n9              39.4%             5.2%                          48  \n10             34.3%             9.3%                          82  \n11             36.8%             5.2%                          28  \n12             22.5%            12.5%                          59  \n13             55.9%            16.0%                         100  \n14             47.2%            13.8%                          39  \n15             21.2%             6.0%                          38  \n\n\n\n\nStep 13. Select all columns except the last 3.\n\ncolumns_excluding_last_3 = euro12.iloc[:, :-3]\nprint(columns_excluding_last_3)\n\n                   Team  Goals  Shots on target  Shots off target  \\\n0               Croatia      4               13                12   \n1        Czech Republic      4               13                18   \n2               Denmark      4               10                10   \n3               England      5               11                18   \n4                France      3               22                24   \n5               Germany     10               32                32   \n6                Greece      5                8                18   \n7                 Italy      6               34                45   \n8           Netherlands      2               12                36   \n9                Poland      2               15                23   \n10             Portugal      6               22                42   \n11  Republic of Ireland      1                7                12   \n12               Russia      5                9                31   \n13                Spain     12               42                33   \n14               Sweden      5               17                19   \n15              Ukraine      2                7                26   \n\n   Shooting Accuracy % Goals-to-shots  Total shots (inc. Blocked)  \\\n0              51.9%            16.0%                          32   \n1              41.9%            12.9%                          39   \n2              50.0%            20.0%                          27   \n3              50.0%            17.2%                          40   \n4              37.9%             6.5%                          65   \n5              47.8%            15.6%                          80   \n6              30.7%            19.2%                          32   \n7              43.0%             7.5%                         110   \n8              25.0%             4.1%                          60   \n9              39.4%             5.2%                          48   \n10             34.3%             9.3%                          82   \n11             36.8%             5.2%                          28   \n12             22.5%            12.5%                          59   \n13             55.9%            16.0%                         100   \n14             47.2%            13.8%                          39   \n15             21.2%             6.0%                          38   \n\n    Hit Woodwork  Penalty goals  Penalties not scored  ...  Clean Sheets  \\\n0              0              0                     0  ...             0   \n1              0              0                     0  ...             1   \n2              1              0                     0  ...             1   \n3              0              0                     0  ...             2   \n4              1              0                     0  ...             1   \n5              2              1                     0  ...             1   \n6              1              1                     1  ...             1   \n7              2              0                     0  ...             2   \n8              2              0                     0  ...             0   \n9              0              0                     0  ...             0   \n10             6              0                     0  ...             2   \n11             0              0                     0  ...             0   \n12             2              0                     0  ...             0   \n13             0              1                     0  ...             5   \n14             3              0                     0  ...             1   \n15             0              0                     0  ...             0   \n\n    Blocks  Goals conceded Saves made  Saves-to-shots ratio  Fouls Won  \\\n0       10               3         13                 81.3%         41   \n1       10               6          9                 60.1%         53   \n2       10               5         10                 66.7%         25   \n3       29               3         22                 88.1%         43   \n4        7               5          6                 54.6%         36   \n5       11               6         10                 62.6%         63   \n6       23               7         13                 65.1%         67   \n7       18               7         20                 74.1%        101   \n8        9               5         12                 70.6%         35   \n9        8               3          6                 66.7%         48   \n10      11               4         10                 71.5%         73   \n11      23               9         17                 65.4%         43   \n12       8               3         10                 77.0%         34   \n13       8               1         15                 93.8%        102   \n14      12               5          8                 61.6%         35   \n15       4               4         13                 76.5%         48   \n\n    Fouls Conceded  Offsides  Yellow Cards  Red Cards  \n0               62         2             9          0  \n1               73         8             7          0  \n2               38         8             4          0  \n3               45         6             5          0  \n4               51         5             6          0  \n5               49        12             4          0  \n6               48        12             9          1  \n7               89        16            16          0  \n8               30         3             5          0  \n9               56         3             7          1  \n10              90        10            12          0  \n11              51        11             6          1  \n12              43         4             6          0  \n13              83        19            11          0  \n14              51         7             7          0  \n15              31         4             5          0  \n\n[16 rows x 32 columns]\n\n\n\n\nStep 14. Present only the Shooting Accuracy from England, Italy and Russia\n\nshooting_accuracy = euro12[euro12['Team'].isin(['England', 'Italy', 'Russia'])][['Team', 'Shooting Accuracy']]\nprint(shooting_accuracy)\n\n       Team Shooting Accuracy\n3   England             50.0%\n7     Italy             43.0%\n12   Russia             22.5%\n\n\n:::\n\n\nOccupation\n\n\nEx3 - Getting and Knowing your Data\nThis time we are going to pull data directly from the internet. Special thanks to: https://github.com/justmarkham for sharing the dataset and materials.\n\nStep 1. Import the necessary libraries\n\nimport pandas as pd\n\n\n\nStep 2. Import the dataset from this address.\n\nurl = 'https://raw.githubusercontent.com/justmarkham/DAT8/master/data/u.user'\n\n\nuser_data = pd.read_csv(url, delimiter='|')\n\n\nprint(user_data.head())\n\n   user_id  age gender  occupation zip_code\n0        1   24      M  technician    85711\n1        2   53      F       other    94043\n2        3   23      M      writer    32067\n3        4   24      M  technician    43537\n4        5   33      F       other    15213\n\n\n\n\nStep 3. Assign it to a variable called users and use the ‘user_id’ as index\n\n\nurl = 'https://raw.githubusercontent.com/justmarkham/DAT8/master/data/u.user'\n\n\nusers = pd.read_csv(url, delimiter='|', index_col='user_id')\n\n\nprint(users.head())\n\n         age gender  occupation zip_code\nuser_id                                 \n1         24      M  technician    85711\n2         53      F       other    94043\n3         23      M      writer    32067\n4         24      M  technician    43537\n5         33      F       other    15213\n\n\n\n\nStep 4. See the first 25 entries\n\n\nprint(users.head(25))\n\n         age gender     occupation zip_code\nuser_id                                    \n1         24      M     technician    85711\n2         53      F          other    94043\n3         23      M         writer    32067\n4         24      M     technician    43537\n5         33      F          other    15213\n6         42      M      executive    98101\n7         57      M  administrator    91344\n8         36      M  administrator    05201\n9         29      M        student    01002\n10        53      M         lawyer    90703\n11        39      F          other    30329\n12        28      F          other    06405\n13        47      M       educator    29206\n14        45      M      scientist    55106\n15        49      F       educator    97301\n16        21      M  entertainment    10309\n17        30      M     programmer    06355\n18        35      F          other    37212\n19        40      M      librarian    02138\n20        42      F      homemaker    95660\n21        26      M         writer    30068\n22        25      M         writer    40206\n23        30      F         artist    48197\n24        21      F         artist    94533\n25        39      M       engineer    55107\n\n\n\n\nStep 5. See the last 10 entries\n\n\nprint(users.tail(10))\n\n         age gender     occupation zip_code\nuser_id                                    \n934       61      M       engineer    22902\n935       42      M         doctor    66221\n936       24      M          other    32789\n937       48      M       educator    98072\n938       38      F     technician    55038\n939       26      F        student    33319\n940       32      M  administrator    02215\n941       20      M        student    97229\n942       48      F      librarian    78209\n943       22      M        student    77841\n\n\n\n\nStep 6. What is the number of observations in the dataset?\n\n# Get the number of observations (rows) in the dataset\nnum_observations = users.shape[0]\n\n# Print the number of observations\nprint(f\"Number of observations in the dataset: {num_observations}\")\n\nNumber of observations in the dataset: 943\n\n\n\n\nStep 7. What is the number of columns in the dataset?\n\n\nnum_columns = users.shape[1]\n\n\nprint(f\"Number of columns in the dataset: {num_columns}\")\n\nNumber of columns in the dataset: 4\n\n\n\n\nStep 8. Print the name of all the columns.\n\n\nprint(users.columns)\n\nIndex(['age', 'gender', 'occupation', 'zip_code'], dtype='object')\n\n\n\n\nStep 9. How is the dataset indexed?\n\n\nprint(users.index)\n\nIndex([  1,   2,   3,   4,   5,   6,   7,   8,   9,  10,\n       ...\n       934, 935, 936, 937, 938, 939, 940, 941, 942, 943],\n      dtype='int64', name='user_id', length=943)\n\n\n\n\nStep 10. What is the data type of each column?\n\n\nprint(users.dtypes)\n\nage            int64\ngender        object\noccupation    object\nzip_code      object\ndtype: object\n\n\n\n\nStep 11. Print only the occupation column\n\n\nprint(users['occupation'])\n\nuser_id\n1         technician\n2              other\n3             writer\n4         technician\n5              other\n           ...      \n939          student\n940    administrator\n941          student\n942        librarian\n943          student\nName: occupation, Length: 943, dtype: object\n\n\n\n\nStep 12. How many different occupations are in this dataset?\n\nnum_occupations = users['occupation'].nunique()\n\nprint(f\"Number of different occupations in the dataset: {num_occupations}\")\n\nNumber of different occupations in the dataset: 21\n\n\n\n\nStep 13. What is the most frequent occupation?\n\nmost_frequent_occupation = users['occupation'].mode()[0]\n\n\nprint(f\"The most frequent occupation in the dataset is: {most_frequent_occupation}\")\n\nThe most frequent occupation in the dataset is: student\n\n\n\n\nStep 14. Summarize the DataFrame.\n\nprint(users.describe())\n\n              age\ncount  943.000000\nmean    34.051962\nstd     12.192740\nmin      7.000000\n25%     25.000000\n50%     31.000000\n75%     43.000000\nmax     73.000000\n\n\n\nprint(users.info())\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nIndex: 943 entries, 1 to 943\nData columns (total 4 columns):\n #   Column      Non-Null Count  Dtype \n---  ------      --------------  ----- \n 0   age         943 non-null    int64 \n 1   gender      943 non-null    object\n 2   occupation  943 non-null    object\n 3   zip_code    943 non-null    object\ndtypes: int64(1), object(3)\nmemory usage: 36.8+ KB\nNone\n\n\n\n\nStep 15. Summarize all the columns\n\nsummary = users.describe(include='all').transpose()\n\n\nprint(summary)\n\n\n\n            count unique      top freq       mean       std  min   25%   50%  \\\nage         943.0    NaN      NaN  NaN  34.051962  12.19274  7.0  25.0  31.0   \ngender        943      2        M  670        NaN       NaN  NaN   NaN   NaN   \noccupation    943     21  student  196        NaN       NaN  NaN   NaN   NaN   \nzip_code      943    795    55414    9        NaN       NaN  NaN   NaN   NaN   \n\n             75%   max  \nage         43.0  73.0  \ngender       NaN   NaN  \noccupation   NaN   NaN  \nzip_code     NaN   NaN  \n\n\n\n\nStep 16. Summarize only the occupation column\n\noccupation_summary = users['occupation'].describe()\n\nprint(occupation_summary)\n\ncount         943\nunique         21\ntop       student\nfreq          196\nName: occupation, dtype: object\n\n\n\n\nStep 17. What is the mean age of users?\n\nmean_age = users['age'].mean()\n\nprint(f\"The mean age of users is: {mean_age}\")\n\nThe mean age of users is: 34.05196182396607\n\n\n\n\nStep 18. What is the age with least occurrence?\n\n\nage_counts = users['age'].value_counts()\n\n\nleast_occurrence_ages = age_counts[age_counts == 1]\n\n\nleast_occurrence_ages.name = 'age'\n\n\nprint(least_occurrence_ages)\n\n\n\n\n\nage\n7     1\n66    1\n11    1\n10    1\n73    1\nName: age, dtype: int64\n\n\n\n\n\nOpen food facts\n\n\nExercise 1\n\nStep 1. Go to https://www.kaggle.com/openfoodfacts/world-food-facts/data\n\n\nStep 2. Download the dataset to your computer and unzip it.\n\nimport pandas as pd\nimport numpy as np\n\n\n\nStep 3. Use the tsv file and assign it to a dataframe called food\n\n\n\nfood  = pd.read_csv('en.openfoodfacts.org.products.tsv.zip', sep='\\t')\n\n\n\nStep 4. See the first 5 entries\n\nfood.head()\n\n\n\n\n\n\n\n\ncode\nurl\ncreator\ncreated_t\ncreated_datetime\nlast_modified_t\nlast_modified_datetime\nproduct_name\ngeneric_name\nquantity\n...\nfruits-vegetables-nuts_100g\nfruits-vegetables-nuts-estimate_100g\ncollagen-meat-protein-ratio_100g\ncocoa_100g\nchlorophyl_100g\ncarbon-footprint_100g\nnutrition-score-fr_100g\nnutrition-score-uk_100g\nglycemic-index_100g\nwater-hardness_100g\n\n\n\n\n0\n3087\nhttp://world-en.openfoodfacts.org/product/0000000003087/farine-de-ble-noir-ferme-t-y-r-nao\nopenfoodfacts-contributors\n1474103866\n2016-09-17T09:17:46Z\n1474103893\n2016-09-17T09:18:13Z\nFarine de blé noir\nNaN\n1kg\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n1\n4530\nhttp://world-en.openfoodfacts.org/product/0000000004530/banana-chips-sweetened-whole\nusda-ndb-import\n1489069957\n2017-03-09T14:32:37Z\n1489069957\n2017-03-09T14:32:37Z\nBanana Chips Sweetened (Whole)\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n14.0\n14.0\nNaN\nNaN\n\n\n2\n4559\nhttp://world-en.openfoodfacts.org/product/0000000004559/peanuts-torn-glasser\nusda-ndb-import\n1489069957\n2017-03-09T14:32:37Z\n1489069957\n2017-03-09T14:32:37Z\nPeanuts\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n0.0\n0.0\nNaN\nNaN\n\n\n3\n16087\nhttp://world-en.openfoodfacts.org/product/0000000016087/organic-salted-nut-mix-grizzlies\nusda-ndb-import\n1489055731\n2017-03-09T10:35:31Z\n1489055731\n2017-03-09T10:35:31Z\nOrganic Salted Nut Mix\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n12.0\n12.0\nNaN\nNaN\n\n\n4\n16094\nhttp://world-en.openfoodfacts.org/product/0000000016094/organic-polenta-bob-s-red-mill\nusda-ndb-import\n1489055653\n2017-03-09T10:34:13Z\n1489055653\n2017-03-09T10:34:13Z\nOrganic Polenta\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n\n\n5 rows × 163 columns\n\n\n\n\n\nStep 5. What is the number of observations in the dataset?\n\nfood.shape\n\n(356027, 163)\n\n\n\nfood.shape[0]\n\n356027\n\n\n\n\nStep 6. What is the number of columns in the dataset?\n\nprint(food.shape)\nprint(food.shape[1])\n\nfood.info()\n\n(356027, 163)\n163\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 356027 entries, 0 to 356026\nColumns: 163 entries, code to water-hardness_100g\ndtypes: float64(107), object(56)\nmemory usage: 442.8+ MB\n\n\n\n\nStep 7. Print the name of all the columns.\n\nfood.columns\n\nIndex(['code', 'url', 'creator', 'created_t', 'created_datetime',\n       'last_modified_t', 'last_modified_datetime', 'product_name',\n       'generic_name', 'quantity',\n       ...\n       'fruits-vegetables-nuts_100g', 'fruits-vegetables-nuts-estimate_100g',\n       'collagen-meat-protein-ratio_100g', 'cocoa_100g', 'chlorophyl_100g',\n       'carbon-footprint_100g', 'nutrition-score-fr_100g',\n       'nutrition-score-uk_100g', 'glycemic-index_100g',\n       'water-hardness_100g'],\n      dtype='object', length=163)\n\n\n\n\nStep 8. What is the name of 105th column?\n\nfood.columns[104]\n\n'-glucose_100g'\n\n\n\n\nStep 9. What is the type of the observations of the 105th column?\n\nfood['-glucose_100g'].dtype\n\ndtype('float64')\n\n\n\n\nStep 10. How is the dataset indexed?\n\nfood.index\n\nRangeIndex(start=0, stop=356027, step=1)\n\n\n\npd.set_option('display.max_colwidth', 300)\n\n\nfood[['code','url']]\n\n\n\n\n\n\n\n\ncode\nurl\n\n\n\n\n0\n3087\nhttp://world-en.openfoodfacts.org/product/0000...\n\n\n1\n4530\nhttp://world-en.openfoodfacts.org/product/0000...\n\n\n2\n4559\nhttp://world-en.openfoodfacts.org/product/0000...\n\n\n3\n16087\nhttp://world-en.openfoodfacts.org/product/0000...\n\n\n4\n16094\nhttp://world-en.openfoodfacts.org/product/0000...\n\n\n...\n...\n...\n\n\n356022\n99567453\nhttp://world-en.openfoodfacts.org/product/9956...\n\n\n356023\n9970229501521\nhttp://world-en.openfoodfacts.org/product/9970...\n\n\n356024\n9977471758307\nhttp://world-en.openfoodfacts.org/product/9977...\n\n\n356025\n9980282863788\nhttp://world-en.openfoodfacts.org/product/9980...\n\n\n356026\n999990026839\nhttp://world-en.openfoodfacts.org/product/9999...\n\n\n\n\n356027 rows × 2 columns\n\n\n\n\n\nStep 11. What is the product name of the 19th observation?\n\nfood.at[18, 'product_name']\n\n'Lotus Organic Brown Jasmine Rice'\n\n\n\n\n\nScores\n\n\nScores\n\nIntroduction:\nThis time you will create the data.\nExercise based on Chris Albon work, the credits belong to him.\n\n\nStep 1. Import the necessary libraries\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\n\nStep 2. Create the DataFrame that should look like the one below.\n\n\ndata = {\n    'first_name': ['Jason', 'Molly', 'Tina', 'Jake', 'Amy'],\n    'last_name': ['Miller', 'Jacobson', 'Ali', 'Milner', 'Cooze'],\n    'age': [42, 52, 36, 24, 73],\n    'female': [0, 1, 1, 0, 1],\n    'preTestScore': [4, 24, 31, 2, 3],\n    'postTestScore': [25, 94, 57, 62, 70]\n}\n\ndf = pd.DataFrame(data)\nprint(df)\n\n  first_name last_name  age  female  preTestScore  postTestScore\n0      Jason    Miller   42       0             4             25\n1      Molly  Jacobson   52       1            24             94\n2       Tina       Ali   36       1            31             57\n3       Jake    Milner   24       0             2             62\n4        Amy     Cooze   73       1             3             70\n\n\n\n\nStep 3. Create a Scatterplot of preTestScore and postTestScore, with the size of each point determined by age\n\nHint: Don’t forget to place the labels\n\nplt.scatter(df['preTestScore'], df['postTestScore'], s=df['age'], alpha=0.5)\n\nplt.xlabel('Pre Test Score')\nplt.ylabel('Post Test Score')\nplt.title('Pre Test Score vs Post Test Score')\n\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\nStep 4. Create a Scatterplot of preTestScore and postTestScore.\n\n\nThis time the size should be 4.5 times the postTestScore and the color determined by sex\n\n\nplt.scatter(df['preTestScore'], df['postTestScore'], \n            s=4.5 * df['postTestScore'], c=df['female'], cmap='coolwarm', alpha=0.5)\n\nplt.xlabel('Pre Test Score')\nplt.ylabel('Post Test Score')\nplt.title('Pre Test Score vs Post Test Score with Size and Color')\n\nplt.show()\n\n\n\n\n\n\n\n\n\n\nBONUS: Create your own question and answer it.\nFind the correlation between preTestScore and postTestScore\n\ncorrelation = df['preTestScore'].corr(df['postTestScore'])\nprint(f\"Correlation between preTestScore and postTestScore: {correlation}\")\n\nCorrelation between preTestScore and postTestScore: 0.37803911777651406\n\n\n\n\n\nVisualizing Chipotle’s Data\n\n\nVisualizing Chipotle’s Data\nThis time we are going to pull data directly from the internet. Special thanks to: https://github.com/justmarkham for sharing the dataset and materials.\n\nStep 1. Import the necessary libraries\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom collections import Counter\n\n\n\nStep 2. Import the dataset from this address.\n\nurl = 'https://raw.githubusercontent.com/justmarkham/DAT8/master/data/chipotle.tsv'\n\n\n\nStep 3. Assign it to a variable called chipo.\n\nchipo = pd.read_csv(url, sep = '\\t')\n\n\n\nStep 4. See the first 10 entries\n\nchipo.head(10)\n\n\n\n\n\n\n\n\norder_id\nquantity\nitem_name\nchoice_description\nitem_price\n\n\n\n\n0\n1\n1\nChips and Fresh Tomato Salsa\nNaN\n$2.39\n\n\n1\n1\n1\nIzze\n[Clementine]\n$3.39\n\n\n2\n1\n1\nNantucket Nectar\n[Apple]\n$3.39\n\n\n3\n1\n1\nChips and Tomatillo-Green Chili Salsa\nNaN\n$2.39\n\n\n4\n2\n2\nChicken Bowl\n[Tomatillo-Red Chili Salsa (Hot), [Black Beans...\n$16.98\n\n\n5\n3\n1\nChicken Bowl\n[Fresh Tomato Salsa (Mild), [Rice, Cheese, Sou...\n$10.98\n\n\n6\n3\n1\nSide of Chips\nNaN\n$1.69\n\n\n7\n4\n1\nSteak Burrito\n[Tomatillo Red Chili Salsa, [Fajita Vegetables...\n$11.75\n\n\n8\n4\n1\nSteak Soft Tacos\n[Tomatillo Green Chili Salsa, [Pinto Beans, Ch...\n$9.25\n\n\n9\n5\n1\nSteak Burrito\n[Fresh Tomato Salsa, [Rice, Black Beans, Pinto...\n$9.25\n\n\n\n\n\n\n\n\n\nStep 5. Create a histogram of the top 5 items bought\n\nx = chipo.item_name\n\nletter_counts = Counter(x)\n\ndf = pd.DataFrame.from_dict(letter_counts, orient='index')\n\ndf = df[0].sort_values(ascending = True)[45:50]\n\ndf.plot(kind='bar')\n\nplt.xlabel('Items')\nplt.ylabel('Number of Times Ordered')\nplt.title('Most ordered Chipotle\\'s Items')\n\nplt.show()\n\n\n\n\n\n\n\n\n\n\nStep 6. Create a scatterplot with the number of items orderered per order price\n\nHint: Price should be in the X-axis and Items ordered in the Y-axis\n\nchipo.item_price = [float(value[1:-1]) for value in chipo.item_price] # strip the dollar sign and trailing space\n\norders = chipo.groupby('order_id').sum()\n\nplt.scatter(x = orders.item_price, y = orders.quantity, s = 50, c = 'green')\n\nplt.xlabel('Order Price')\nplt.ylabel('Items ordered')\nplt.title('Number of items ordered per order price')\nplt.ylim(0)\n\n\n\n\n\n\n\n\n\n\n\nStep 7. BONUS: Create a question and a graph to answer your own question.\nWhich menu items have the highest unit prices and how do the number of orders for these menu items vary?\n\nurl = 'https://raw.githubusercontent.com/justmarkham/DAT8/master/data/chipotle.tsv'\nchipo = pd.read_csv(url, sep = '\\t')\n\nchipo.item_price = [float(value[1:-1]) for value in chipo.item_price]\n\nmost_expensive_items = chipo.groupby('item_name').item_price.mean().sort_values(ascending=False).head(10)\n\ntop_items = chipo[chipo['item_name'].isin(most_expensive_items.index)]\nitem_order_counts = top_items.groupby('item_name')['quantity'].sum()\n\nfig, ax = plt.subplots(figsize=(10, 6))\nitem_order_counts.plot(kind='bar', ax=ax, color='skyblue')\n\nax.set_xlabel('Menu Item')\nax.set_ylabel('Total Quantity Ordered')\nax.set_title('Top 10 Most Expensive Menu Items and Their Order Quantities')\n\nplt.xticks(rotation=45, ha=\"right\")\nplt.show()\n\n\n\n\n\n\n\n\n\n\n, ’’)))\nprint(f”The data type of ‘item_price’ is: {chipo[‘item_price’].dtype}“)\n\n::: {.cell-output .cell-output-stdout}\nThe data type of ‘item_price’ is: float64\n:::\n:::\n\n\n#### Step 13.c. Check the item price type\n\n::: {#cell-32 .cell execution_count=16}\n``` {.python .cell-code}\nurl = 'https://raw.githubusercontent.com/justmarkham/DAT8/master/data/chipotle.tsv'\n\nchipo = pd.read_csv(url, sep='\\t')\n\nchipo['item_price'] = chipo['item_price'].apply(lambda x: float(x.replace('\n\n\n\n\n\n\n\n\n\n# Euro12\n\n\n\n\n\n:::{.quarto-embed-nb-cell notebook=\"D:\\code\\jiedan\\12-28\\test1\\labs\\Labexercises\\lab1\\Euro12.ipynb\" notebook-title=\"Ex2 - Filtering and Sorting Data\" notebook-cellId=\"cell-0\"}\n\n# Ex2 - Filtering and Sorting Data\n\nThis time we are going to pull data directly from the internet.\n\n### Step 1. Import the necessary libraries\n\n::: {#cell-2 .cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\n:::\n\nStep 2. Import the dataset from this address.\n\n\nStep 3. Assign it to a variable called euro12.\n\n\neuro12 = pd.read_csv('https://raw.githubusercontent.com/guipsamora/pandas_exercises/master/02_Filtering_%26_Sorting/Euro12/Euro_2012_stats_TEAM.csv')\n\nprint(euro12)\n\n                   Team  Goals  Shots on target  Shots off target  \\\n0               Croatia      4               13                12   \n1        Czech Republic      4               13                18   \n2               Denmark      4               10                10   \n3               England      5               11                18   \n4                France      3               22                24   \n5               Germany     10               32                32   \n6                Greece      5                8                18   \n7                 Italy      6               34                45   \n8           Netherlands      2               12                36   \n9                Poland      2               15                23   \n10             Portugal      6               22                42   \n11  Republic of Ireland      1                7                12   \n12               Russia      5                9                31   \n13                Spain     12               42                33   \n14               Sweden      5               17                19   \n15              Ukraine      2                7                26   \n\n   Shooting Accuracy % Goals-to-shots  Total shots (inc. Blocked)  \\\n0              51.9%            16.0%                          32   \n1              41.9%            12.9%                          39   \n2              50.0%            20.0%                          27   \n3              50.0%            17.2%                          40   \n4              37.9%             6.5%                          65   \n5              47.8%            15.6%                          80   \n6              30.7%            19.2%                          32   \n7              43.0%             7.5%                         110   \n8              25.0%             4.1%                          60   \n9              39.4%             5.2%                          48   \n10             34.3%             9.3%                          82   \n11             36.8%             5.2%                          28   \n12             22.5%            12.5%                          59   \n13             55.9%            16.0%                         100   \n14             47.2%            13.8%                          39   \n15             21.2%             6.0%                          38   \n\n    Hit Woodwork  Penalty goals  Penalties not scored  ...  Saves made  \\\n0              0              0                     0  ...          13   \n1              0              0                     0  ...           9   \n2              1              0                     0  ...          10   \n3              0              0                     0  ...          22   \n4              1              0                     0  ...           6   \n5              2              1                     0  ...          10   \n6              1              1                     1  ...          13   \n7              2              0                     0  ...          20   \n8              2              0                     0  ...          12   \n9              0              0                     0  ...           6   \n10             6              0                     0  ...          10   \n11             0              0                     0  ...          17   \n12             2              0                     0  ...          10   \n13             0              1                     0  ...          15   \n14             3              0                     0  ...           8   \n15             0              0                     0  ...          13   \n\n    Saves-to-shots ratio  Fouls Won Fouls Conceded  Offsides  Yellow Cards  \\\n0                  81.3%         41             62         2             9   \n1                  60.1%         53             73         8             7   \n2                  66.7%         25             38         8             4   \n3                  88.1%         43             45         6             5   \n4                  54.6%         36             51         5             6   \n5                  62.6%         63             49        12             4   \n6                  65.1%         67             48        12             9   \n7                  74.1%        101             89        16            16   \n8                  70.6%         35             30         3             5   \n9                  66.7%         48             56         3             7   \n10                 71.5%         73             90        10            12   \n11                 65.4%         43             51        11             6   \n12                 77.0%         34             43         4             6   \n13                 93.8%        102             83        19            11   \n14                 61.6%         35             51         7             7   \n15                 76.5%         48             31         4             5   \n\n    Red Cards  Subs on  Subs off  Players Used  \n0           0        9         9            16  \n1           0       11        11            19  \n2           0        7         7            15  \n3           0       11        11            16  \n4           0       11        11            19  \n5           0       15        15            17  \n6           1       12        12            20  \n7           0       18        18            19  \n8           0        7         7            15  \n9           1        7         7            17  \n10          0       14        14            16  \n11          1       10        10            17  \n12          0        7         7            16  \n13          0       17        17            18  \n14          0        9         9            18  \n15          0        9         9            18  \n\n[16 rows x 35 columns]\n\n\n\n\nStep 4. Select only the Goal column.\n\ngoals = euro12['Goals']\nprint(goals)\n\n0      4\n1      4\n2      4\n3      5\n4      3\n5     10\n6      5\n7      6\n8      2\n9      2\n10     6\n11     1\n12     5\n13    12\n14     5\n15     2\nName: Goals, dtype: int64\n\n\n\n\nStep 5. How many team participated in the Euro2012?\n\nnum_teams = euro12.shape[0]\nprint(f'Number of teams participated: {num_teams}')\n\nNumber of teams participated: 16\n\n\n\n\nStep 6. What is the number of columns in the dataset?\n\n\neuro12.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 16 entries, 0 to 15\nData columns (total 35 columns):\n #   Column                      Non-Null Count  Dtype  \n---  ------                      --------------  -----  \n 0   Team                        16 non-null     object \n 1   Goals                       16 non-null     int64  \n 2   Shots on target             16 non-null     int64  \n 3   Shots off target            16 non-null     int64  \n 4   Shooting Accuracy           16 non-null     object \n 5   % Goals-to-shots            16 non-null     object \n 6   Total shots (inc. Blocked)  16 non-null     int64  \n 7   Hit Woodwork                16 non-null     int64  \n 8   Penalty goals               16 non-null     int64  \n 9   Penalties not scored        16 non-null     int64  \n 10  Headed goals                16 non-null     int64  \n 11  Passes                      16 non-null     int64  \n 12  Passes completed            16 non-null     int64  \n 13  Passing Accuracy            16 non-null     object \n 14  Touches                     16 non-null     int64  \n 15  Crosses                     16 non-null     int64  \n 16  Dribbles                    16 non-null     int64  \n 17  Corners Taken               16 non-null     int64  \n 18  Tackles                     16 non-null     int64  \n 19  Clearances                  16 non-null     int64  \n 20  Interceptions               16 non-null     int64  \n 21  Clearances off line         15 non-null     float64\n 22  Clean Sheets                16 non-null     int64  \n 23  Blocks                      16 non-null     int64  \n 24  Goals conceded              16 non-null     int64  \n 25  Saves made                  16 non-null     int64  \n 26  Saves-to-shots ratio        16 non-null     object \n 27  Fouls Won                   16 non-null     int64  \n 28  Fouls Conceded              16 non-null     int64  \n 29  Offsides                    16 non-null     int64  \n 30  Yellow Cards                16 non-null     int64  \n 31  Red Cards                   16 non-null     int64  \n 32  Subs on                     16 non-null     int64  \n 33  Subs off                    16 non-null     int64  \n 34  Players Used                16 non-null     int64  \ndtypes: float64(1), int64(29), object(5)\nmemory usage: 4.5+ KB\n\n\n\n\nStep 7. View only the columns Team, Yellow Cards and Red Cards and assign them to a dataframe called discipline\n\ndiscipline = euro12[['Team', 'Yellow Cards', 'Red Cards']]\nprint(discipline)\n\n                   Team  Yellow Cards  Red Cards\n0               Croatia             9          0\n1        Czech Republic             7          0\n2               Denmark             4          0\n3               England             5          0\n4                France             6          0\n5               Germany             4          0\n6                Greece             9          1\n7                 Italy            16          0\n8           Netherlands             5          0\n9                Poland             7          1\n10             Portugal            12          0\n11  Republic of Ireland             6          1\n12               Russia             6          0\n13                Spain            11          0\n14               Sweden             7          0\n15              Ukraine             5          0\n\n\n\n\nStep 8. Sort the teams by Red Cards, then to Yellow Cards\n\nsorted_discipline = discipline.sort_values(by=['Red Cards', 'Yellow Cards'], ascending=[False, False])\nprint(sorted_discipline)\n\n                   Team  Yellow Cards  Red Cards\n6                Greece             9          1\n9                Poland             7          1\n11  Republic of Ireland             6          1\n7                 Italy            16          0\n10             Portugal            12          0\n13                Spain            11          0\n0               Croatia             9          0\n1        Czech Republic             7          0\n14               Sweden             7          0\n4                France             6          0\n12               Russia             6          0\n3               England             5          0\n8           Netherlands             5          0\n15              Ukraine             5          0\n2               Denmark             4          0\n5               Germany             4          0\n\n\n\n\nStep 9. Calculate the mean Yellow Cards given per Team\n\n# Calculate the mean Yellow Cards given per Team and round to 1 decimal place\nmean_yellow_cards = round(euro12['Yellow Cards'].mean(), 1)\n\n# Display the result\nprint(mean_yellow_cards)\n\n\n\n7.4\n\n\n\n\nStep 10. Filter teams that scored more than 6 goals\n\nteams_more_than_6_goals = euro12[euro12['Goals'] &gt; 6]\n\ngermany_spain = teams_more_than_6_goals[teams_more_than_6_goals['Team'].isin(['Germany', 'Spain'])]\n\nprint(germany_spain)\n\n\n       Team  Goals  Shots on target  Shots off target Shooting Accuracy  \\\n5   Germany     10               32                32             47.8%   \n13    Spain     12               42                33             55.9%   \n\n   % Goals-to-shots  Total shots (inc. Blocked)  Hit Woodwork  Penalty goals  \\\n5             15.6%                          80             2              1   \n13            16.0%                         100             0              1   \n\n    Penalties not scored  ...  Saves made  Saves-to-shots ratio  Fouls Won  \\\n5                      0  ...          10                 62.6%         63   \n13                     0  ...          15                 93.8%        102   \n\n   Fouls Conceded  Offsides  Yellow Cards  Red Cards  Subs on  Subs off  \\\n5              49        12             4          0       15        15   \n13             83        19            11          0       17        17   \n\n    Players Used  \n5             17  \n13            18  \n\n[2 rows x 35 columns]\n\n\n\n\nStep 11. Select the teams that start with G\n\nteams_start_with_G = euro12[euro12['Team'].str.startswith('G')]\nprint(teams_start_with_G)\n\n      Team  Goals  Shots on target  Shots off target Shooting Accuracy  \\\n5  Germany     10               32                32             47.8%   \n6   Greece      5                8                18             30.7%   \n\n  % Goals-to-shots  Total shots (inc. Blocked)  Hit Woodwork  Penalty goals  \\\n5            15.6%                          80             2              1   \n6            19.2%                          32             1              1   \n\n   Penalties not scored  ...  Saves made  Saves-to-shots ratio  Fouls Won  \\\n5                     0  ...          10                 62.6%         63   \n6                     1  ...          13                 65.1%         67   \n\n  Fouls Conceded  Offsides  Yellow Cards  Red Cards  Subs on  Subs off  \\\n5             49        12             4          0       15        15   \n6             48        12             9          1       12        12   \n\n   Players Used  \n5            17  \n6            20  \n\n[2 rows x 35 columns]\n\n\n\n\nStep 12. Select the first 7 columns\n\nfirst_7_columns = euro12.iloc[:, :7]\nprint(first_7_columns)\n\n                   Team  Goals  Shots on target  Shots off target  \\\n0               Croatia      4               13                12   \n1        Czech Republic      4               13                18   \n2               Denmark      4               10                10   \n3               England      5               11                18   \n4                France      3               22                24   \n5               Germany     10               32                32   \n6                Greece      5                8                18   \n7                 Italy      6               34                45   \n8           Netherlands      2               12                36   \n9                Poland      2               15                23   \n10             Portugal      6               22                42   \n11  Republic of Ireland      1                7                12   \n12               Russia      5                9                31   \n13                Spain     12               42                33   \n14               Sweden      5               17                19   \n15              Ukraine      2                7                26   \n\n   Shooting Accuracy % Goals-to-shots  Total shots (inc. Blocked)  \n0              51.9%            16.0%                          32  \n1              41.9%            12.9%                          39  \n2              50.0%            20.0%                          27  \n3              50.0%            17.2%                          40  \n4              37.9%             6.5%                          65  \n5              47.8%            15.6%                          80  \n6              30.7%            19.2%                          32  \n7              43.0%             7.5%                         110  \n8              25.0%             4.1%                          60  \n9              39.4%             5.2%                          48  \n10             34.3%             9.3%                          82  \n11             36.8%             5.2%                          28  \n12             22.5%            12.5%                          59  \n13             55.9%            16.0%                         100  \n14             47.2%            13.8%                          39  \n15             21.2%             6.0%                          38  \n\n\n\n\nStep 13. Select all columns except the last 3.\n\ncolumns_excluding_last_3 = euro12.iloc[:, :-3]\nprint(columns_excluding_last_3)\n\n                   Team  Goals  Shots on target  Shots off target  \\\n0               Croatia      4               13                12   \n1        Czech Republic      4               13                18   \n2               Denmark      4               10                10   \n3               England      5               11                18   \n4                France      3               22                24   \n5               Germany     10               32                32   \n6                Greece      5                8                18   \n7                 Italy      6               34                45   \n8           Netherlands      2               12                36   \n9                Poland      2               15                23   \n10             Portugal      6               22                42   \n11  Republic of Ireland      1                7                12   \n12               Russia      5                9                31   \n13                Spain     12               42                33   \n14               Sweden      5               17                19   \n15              Ukraine      2                7                26   \n\n   Shooting Accuracy % Goals-to-shots  Total shots (inc. Blocked)  \\\n0              51.9%            16.0%                          32   \n1              41.9%            12.9%                          39   \n2              50.0%            20.0%                          27   \n3              50.0%            17.2%                          40   \n4              37.9%             6.5%                          65   \n5              47.8%            15.6%                          80   \n6              30.7%            19.2%                          32   \n7              43.0%             7.5%                         110   \n8              25.0%             4.1%                          60   \n9              39.4%             5.2%                          48   \n10             34.3%             9.3%                          82   \n11             36.8%             5.2%                          28   \n12             22.5%            12.5%                          59   \n13             55.9%            16.0%                         100   \n14             47.2%            13.8%                          39   \n15             21.2%             6.0%                          38   \n\n    Hit Woodwork  Penalty goals  Penalties not scored  ...  Clean Sheets  \\\n0              0              0                     0  ...             0   \n1              0              0                     0  ...             1   \n2              1              0                     0  ...             1   \n3              0              0                     0  ...             2   \n4              1              0                     0  ...             1   \n5              2              1                     0  ...             1   \n6              1              1                     1  ...             1   \n7              2              0                     0  ...             2   \n8              2              0                     0  ...             0   \n9              0              0                     0  ...             0   \n10             6              0                     0  ...             2   \n11             0              0                     0  ...             0   \n12             2              0                     0  ...             0   \n13             0              1                     0  ...             5   \n14             3              0                     0  ...             1   \n15             0              0                     0  ...             0   \n\n    Blocks  Goals conceded Saves made  Saves-to-shots ratio  Fouls Won  \\\n0       10               3         13                 81.3%         41   \n1       10               6          9                 60.1%         53   \n2       10               5         10                 66.7%         25   \n3       29               3         22                 88.1%         43   \n4        7               5          6                 54.6%         36   \n5       11               6         10                 62.6%         63   \n6       23               7         13                 65.1%         67   \n7       18               7         20                 74.1%        101   \n8        9               5         12                 70.6%         35   \n9        8               3          6                 66.7%         48   \n10      11               4         10                 71.5%         73   \n11      23               9         17                 65.4%         43   \n12       8               3         10                 77.0%         34   \n13       8               1         15                 93.8%        102   \n14      12               5          8                 61.6%         35   \n15       4               4         13                 76.5%         48   \n\n    Fouls Conceded  Offsides  Yellow Cards  Red Cards  \n0               62         2             9          0  \n1               73         8             7          0  \n2               38         8             4          0  \n3               45         6             5          0  \n4               51         5             6          0  \n5               49        12             4          0  \n6               48        12             9          1  \n7               89        16            16          0  \n8               30         3             5          0  \n9               56         3             7          1  \n10              90        10            12          0  \n11              51        11             6          1  \n12              43         4             6          0  \n13              83        19            11          0  \n14              51         7             7          0  \n15              31         4             5          0  \n\n[16 rows x 32 columns]\n\n\n\n\nStep 14. Present only the Shooting Accuracy from England, Italy and Russia\n\nshooting_accuracy = euro12[euro12['Team'].isin(['England', 'Italy', 'Russia'])][['Team', 'Shooting Accuracy']]\nprint(shooting_accuracy)\n\n       Team Shooting Accuracy\n3   England             50.0%\n7     Italy             43.0%\n12   Russia             22.5%\n\n\n:::\n\n\nOccupation\n\n\nEx3 - Getting and Knowing your Data\nThis time we are going to pull data directly from the internet. Special thanks to: https://github.com/justmarkham for sharing the dataset and materials.\n\nStep 1. Import the necessary libraries\n\nimport pandas as pd\n\n\n\nStep 2. Import the dataset from this address.\n\nurl = 'https://raw.githubusercontent.com/justmarkham/DAT8/master/data/u.user'\n\n\nuser_data = pd.read_csv(url, delimiter='|')\n\n\nprint(user_data.head())\n\n   user_id  age gender  occupation zip_code\n0        1   24      M  technician    85711\n1        2   53      F       other    94043\n2        3   23      M      writer    32067\n3        4   24      M  technician    43537\n4        5   33      F       other    15213\n\n\n\n\nStep 3. Assign it to a variable called users and use the ‘user_id’ as index\n\n\nurl = 'https://raw.githubusercontent.com/justmarkham/DAT8/master/data/u.user'\n\n\nusers = pd.read_csv(url, delimiter='|', index_col='user_id')\n\n\nprint(users.head())\n\n         age gender  occupation zip_code\nuser_id                                 \n1         24      M  technician    85711\n2         53      F       other    94043\n3         23      M      writer    32067\n4         24      M  technician    43537\n5         33      F       other    15213\n\n\n\n\nStep 4. See the first 25 entries\n\n\nprint(users.head(25))\n\n         age gender     occupation zip_code\nuser_id                                    \n1         24      M     technician    85711\n2         53      F          other    94043\n3         23      M         writer    32067\n4         24      M     technician    43537\n5         33      F          other    15213\n6         42      M      executive    98101\n7         57      M  administrator    91344\n8         36      M  administrator    05201\n9         29      M        student    01002\n10        53      M         lawyer    90703\n11        39      F          other    30329\n12        28      F          other    06405\n13        47      M       educator    29206\n14        45      M      scientist    55106\n15        49      F       educator    97301\n16        21      M  entertainment    10309\n17        30      M     programmer    06355\n18        35      F          other    37212\n19        40      M      librarian    02138\n20        42      F      homemaker    95660\n21        26      M         writer    30068\n22        25      M         writer    40206\n23        30      F         artist    48197\n24        21      F         artist    94533\n25        39      M       engineer    55107\n\n\n\n\nStep 5. See the last 10 entries\n\n\nprint(users.tail(10))\n\n         age gender     occupation zip_code\nuser_id                                    \n934       61      M       engineer    22902\n935       42      M         doctor    66221\n936       24      M          other    32789\n937       48      M       educator    98072\n938       38      F     technician    55038\n939       26      F        student    33319\n940       32      M  administrator    02215\n941       20      M        student    97229\n942       48      F      librarian    78209\n943       22      M        student    77841\n\n\n\n\nStep 6. What is the number of observations in the dataset?\n\n# Get the number of observations (rows) in the dataset\nnum_observations = users.shape[0]\n\n# Print the number of observations\nprint(f\"Number of observations in the dataset: {num_observations}\")\n\nNumber of observations in the dataset: 943\n\n\n\n\nStep 7. What is the number of columns in the dataset?\n\n\nnum_columns = users.shape[1]\n\n\nprint(f\"Number of columns in the dataset: {num_columns}\")\n\nNumber of columns in the dataset: 4\n\n\n\n\nStep 8. Print the name of all the columns.\n\n\nprint(users.columns)\n\nIndex(['age', 'gender', 'occupation', 'zip_code'], dtype='object')\n\n\n\n\nStep 9. How is the dataset indexed?\n\n\nprint(users.index)\n\nIndex([  1,   2,   3,   4,   5,   6,   7,   8,   9,  10,\n       ...\n       934, 935, 936, 937, 938, 939, 940, 941, 942, 943],\n      dtype='int64', name='user_id', length=943)\n\n\n\n\nStep 10. What is the data type of each column?\n\n\nprint(users.dtypes)\n\nage            int64\ngender        object\noccupation    object\nzip_code      object\ndtype: object\n\n\n\n\nStep 11. Print only the occupation column\n\n\nprint(users['occupation'])\n\nuser_id\n1         technician\n2              other\n3             writer\n4         technician\n5              other\n           ...      \n939          student\n940    administrator\n941          student\n942        librarian\n943          student\nName: occupation, Length: 943, dtype: object\n\n\n\n\nStep 12. How many different occupations are in this dataset?\n\nnum_occupations = users['occupation'].nunique()\n\nprint(f\"Number of different occupations in the dataset: {num_occupations}\")\n\nNumber of different occupations in the dataset: 21\n\n\n\n\nStep 13. What is the most frequent occupation?\n\nmost_frequent_occupation = users['occupation'].mode()[0]\n\n\nprint(f\"The most frequent occupation in the dataset is: {most_frequent_occupation}\")\n\nThe most frequent occupation in the dataset is: student\n\n\n\n\nStep 14. Summarize the DataFrame.\n\nprint(users.describe())\n\n              age\ncount  943.000000\nmean    34.051962\nstd     12.192740\nmin      7.000000\n25%     25.000000\n50%     31.000000\n75%     43.000000\nmax     73.000000\n\n\n\nprint(users.info())\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nIndex: 943 entries, 1 to 943\nData columns (total 4 columns):\n #   Column      Non-Null Count  Dtype \n---  ------      --------------  ----- \n 0   age         943 non-null    int64 \n 1   gender      943 non-null    object\n 2   occupation  943 non-null    object\n 3   zip_code    943 non-null    object\ndtypes: int64(1), object(3)\nmemory usage: 36.8+ KB\nNone\n\n\n\n\nStep 15. Summarize all the columns\n\nsummary = users.describe(include='all').transpose()\n\n\nprint(summary)\n\n\n\n            count unique      top freq       mean       std  min   25%   50%  \\\nage         943.0    NaN      NaN  NaN  34.051962  12.19274  7.0  25.0  31.0   \ngender        943      2        M  670        NaN       NaN  NaN   NaN   NaN   \noccupation    943     21  student  196        NaN       NaN  NaN   NaN   NaN   \nzip_code      943    795    55414    9        NaN       NaN  NaN   NaN   NaN   \n\n             75%   max  \nage         43.0  73.0  \ngender       NaN   NaN  \noccupation   NaN   NaN  \nzip_code     NaN   NaN  \n\n\n\n\nStep 16. Summarize only the occupation column\n\noccupation_summary = users['occupation'].describe()\n\nprint(occupation_summary)\n\ncount         943\nunique         21\ntop       student\nfreq          196\nName: occupation, dtype: object\n\n\n\n\nStep 17. What is the mean age of users?\n\nmean_age = users['age'].mean()\n\nprint(f\"The mean age of users is: {mean_age}\")\n\nThe mean age of users is: 34.05196182396607\n\n\n\n\nStep 18. What is the age with least occurrence?\n\n\nage_counts = users['age'].value_counts()\n\n\nleast_occurrence_ages = age_counts[age_counts == 1]\n\n\nleast_occurrence_ages.name = 'age'\n\n\nprint(least_occurrence_ages)\n\n\n\n\n\nage\n7     1\n66    1\n11    1\n10    1\n73    1\nName: age, dtype: int64\n\n\n\n\n\nOpen food facts\n\n\nExercise 1\n\nStep 1. Go to https://www.kaggle.com/openfoodfacts/world-food-facts/data\n\n\nStep 2. Download the dataset to your computer and unzip it.\n\nimport pandas as pd\nimport numpy as np\n\n\n\nStep 3. Use the tsv file and assign it to a dataframe called food\n\n\n\nfood  = pd.read_csv('en.openfoodfacts.org.products.tsv.zip', sep='\\t')\n\n\n\nStep 4. See the first 5 entries\n\nfood.head()\n\n\n\n\n\n\n\n\ncode\nurl\ncreator\ncreated_t\ncreated_datetime\nlast_modified_t\nlast_modified_datetime\nproduct_name\ngeneric_name\nquantity\n...\nfruits-vegetables-nuts_100g\nfruits-vegetables-nuts-estimate_100g\ncollagen-meat-protein-ratio_100g\ncocoa_100g\nchlorophyl_100g\ncarbon-footprint_100g\nnutrition-score-fr_100g\nnutrition-score-uk_100g\nglycemic-index_100g\nwater-hardness_100g\n\n\n\n\n0\n3087\nhttp://world-en.openfoodfacts.org/product/0000000003087/farine-de-ble-noir-ferme-t-y-r-nao\nopenfoodfacts-contributors\n1474103866\n2016-09-17T09:17:46Z\n1474103893\n2016-09-17T09:18:13Z\nFarine de blé noir\nNaN\n1kg\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n1\n4530\nhttp://world-en.openfoodfacts.org/product/0000000004530/banana-chips-sweetened-whole\nusda-ndb-import\n1489069957\n2017-03-09T14:32:37Z\n1489069957\n2017-03-09T14:32:37Z\nBanana Chips Sweetened (Whole)\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n14.0\n14.0\nNaN\nNaN\n\n\n2\n4559\nhttp://world-en.openfoodfacts.org/product/0000000004559/peanuts-torn-glasser\nusda-ndb-import\n1489069957\n2017-03-09T14:32:37Z\n1489069957\n2017-03-09T14:32:37Z\nPeanuts\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n0.0\n0.0\nNaN\nNaN\n\n\n3\n16087\nhttp://world-en.openfoodfacts.org/product/0000000016087/organic-salted-nut-mix-grizzlies\nusda-ndb-import\n1489055731\n2017-03-09T10:35:31Z\n1489055731\n2017-03-09T10:35:31Z\nOrganic Salted Nut Mix\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n12.0\n12.0\nNaN\nNaN\n\n\n4\n16094\nhttp://world-en.openfoodfacts.org/product/0000000016094/organic-polenta-bob-s-red-mill\nusda-ndb-import\n1489055653\n2017-03-09T10:34:13Z\n1489055653\n2017-03-09T10:34:13Z\nOrganic Polenta\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n\n\n5 rows × 163 columns\n\n\n\n\n\nStep 5. What is the number of observations in the dataset?\n\nfood.shape\n\n(356027, 163)\n\n\n\nfood.shape[0]\n\n356027\n\n\n\n\nStep 6. What is the number of columns in the dataset?\n\nprint(food.shape)\nprint(food.shape[1])\n\nfood.info()\n\n(356027, 163)\n163\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 356027 entries, 0 to 356026\nColumns: 163 entries, code to water-hardness_100g\ndtypes: float64(107), object(56)\nmemory usage: 442.8+ MB\n\n\n\n\nStep 7. Print the name of all the columns.\n\nfood.columns\n\nIndex(['code', 'url', 'creator', 'created_t', 'created_datetime',\n       'last_modified_t', 'last_modified_datetime', 'product_name',\n       'generic_name', 'quantity',\n       ...\n       'fruits-vegetables-nuts_100g', 'fruits-vegetables-nuts-estimate_100g',\n       'collagen-meat-protein-ratio_100g', 'cocoa_100g', 'chlorophyl_100g',\n       'carbon-footprint_100g', 'nutrition-score-fr_100g',\n       'nutrition-score-uk_100g', 'glycemic-index_100g',\n       'water-hardness_100g'],\n      dtype='object', length=163)\n\n\n\n\nStep 8. What is the name of 105th column?\n\nfood.columns[104]\n\n'-glucose_100g'\n\n\n\n\nStep 9. What is the type of the observations of the 105th column?\n\nfood['-glucose_100g'].dtype\n\ndtype('float64')\n\n\n\n\nStep 10. How is the dataset indexed?\n\nfood.index\n\nRangeIndex(start=0, stop=356027, step=1)\n\n\n\npd.set_option('display.max_colwidth', 300)\n\n\nfood[['code','url']]\n\n\n\n\n\n\n\n\ncode\nurl\n\n\n\n\n0\n3087\nhttp://world-en.openfoodfacts.org/product/0000...\n\n\n1\n4530\nhttp://world-en.openfoodfacts.org/product/0000...\n\n\n2\n4559\nhttp://world-en.openfoodfacts.org/product/0000...\n\n\n3\n16087\nhttp://world-en.openfoodfacts.org/product/0000...\n\n\n4\n16094\nhttp://world-en.openfoodfacts.org/product/0000...\n\n\n...\n...\n...\n\n\n356022\n99567453\nhttp://world-en.openfoodfacts.org/product/9956...\n\n\n356023\n9970229501521\nhttp://world-en.openfoodfacts.org/product/9970...\n\n\n356024\n9977471758307\nhttp://world-en.openfoodfacts.org/product/9977...\n\n\n356025\n9980282863788\nhttp://world-en.openfoodfacts.org/product/9980...\n\n\n356026\n999990026839\nhttp://world-en.openfoodfacts.org/product/9999...\n\n\n\n\n356027 rows × 2 columns\n\n\n\n\n\nStep 11. What is the product name of the 19th observation?\n\nfood.at[18, 'product_name']\n\n'Lotus Organic Brown Jasmine Rice'\n\n\n\n\n\nScores\n\n\nScores\n\nIntroduction:\nThis time you will create the data.\nExercise based on Chris Albon work, the credits belong to him.\n\n\nStep 1. Import the necessary libraries\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\n\nStep 2. Create the DataFrame that should look like the one below.\n\n\ndata = {\n    'first_name': ['Jason', 'Molly', 'Tina', 'Jake', 'Amy'],\n    'last_name': ['Miller', 'Jacobson', 'Ali', 'Milner', 'Cooze'],\n    'age': [42, 52, 36, 24, 73],\n    'female': [0, 1, 1, 0, 1],\n    'preTestScore': [4, 24, 31, 2, 3],\n    'postTestScore': [25, 94, 57, 62, 70]\n}\n\ndf = pd.DataFrame(data)\nprint(df)\n\n  first_name last_name  age  female  preTestScore  postTestScore\n0      Jason    Miller   42       0             4             25\n1      Molly  Jacobson   52       1            24             94\n2       Tina       Ali   36       1            31             57\n3       Jake    Milner   24       0             2             62\n4        Amy     Cooze   73       1             3             70\n\n\n\n\nStep 3. Create a Scatterplot of preTestScore and postTestScore, with the size of each point determined by age\n\nHint: Don’t forget to place the labels\n\nplt.scatter(df['preTestScore'], df['postTestScore'], s=df['age'], alpha=0.5)\n\nplt.xlabel('Pre Test Score')\nplt.ylabel('Post Test Score')\nplt.title('Pre Test Score vs Post Test Score')\n\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\nStep 4. Create a Scatterplot of preTestScore and postTestScore.\n\n\nThis time the size should be 4.5 times the postTestScore and the color determined by sex\n\n\nplt.scatter(df['preTestScore'], df['postTestScore'], \n            s=4.5 * df['postTestScore'], c=df['female'], cmap='coolwarm', alpha=0.5)\n\nplt.xlabel('Pre Test Score')\nplt.ylabel('Post Test Score')\nplt.title('Pre Test Score vs Post Test Score with Size and Color')\n\nplt.show()\n\n\n\n\n\n\n\n\n\n\nBONUS: Create your own question and answer it.\nFind the correlation between preTestScore and postTestScore\n\ncorrelation = df['preTestScore'].corr(df['postTestScore'])\nprint(f\"Correlation between preTestScore and postTestScore: {correlation}\")\n\nCorrelation between preTestScore and postTestScore: 0.37803911777651406\n\n\n\n\n\nVisualizing Chipotle’s Data\n\n\nVisualizing Chipotle’s Data\nThis time we are going to pull data directly from the internet. Special thanks to: https://github.com/justmarkham for sharing the dataset and materials.\n\nStep 1. Import the necessary libraries\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom collections import Counter\n\n\n\nStep 2. Import the dataset from this address.\n\nurl = 'https://raw.githubusercontent.com/justmarkham/DAT8/master/data/chipotle.tsv'\n\n\n\nStep 3. Assign it to a variable called chipo.\n\nchipo = pd.read_csv(url, sep = '\\t')\n\n\n\nStep 4. See the first 10 entries\n\nchipo.head(10)\n\n\n\n\n\n\n\n\norder_id\nquantity\nitem_name\nchoice_description\nitem_price\n\n\n\n\n0\n1\n1\nChips and Fresh Tomato Salsa\nNaN\n$2.39\n\n\n1\n1\n1\nIzze\n[Clementine]\n$3.39\n\n\n2\n1\n1\nNantucket Nectar\n[Apple]\n$3.39\n\n\n3\n1\n1\nChips and Tomatillo-Green Chili Salsa\nNaN\n$2.39\n\n\n4\n2\n2\nChicken Bowl\n[Tomatillo-Red Chili Salsa (Hot), [Black Beans...\n$16.98\n\n\n5\n3\n1\nChicken Bowl\n[Fresh Tomato Salsa (Mild), [Rice, Cheese, Sou...\n$10.98\n\n\n6\n3\n1\nSide of Chips\nNaN\n$1.69\n\n\n7\n4\n1\nSteak Burrito\n[Tomatillo Red Chili Salsa, [Fajita Vegetables...\n$11.75\n\n\n8\n4\n1\nSteak Soft Tacos\n[Tomatillo Green Chili Salsa, [Pinto Beans, Ch...\n$9.25\n\n\n9\n5\n1\nSteak Burrito\n[Fresh Tomato Salsa, [Rice, Black Beans, Pinto...\n$9.25\n\n\n\n\n\n\n\n\n\nStep 5. Create a histogram of the top 5 items bought\n\nx = chipo.item_name\n\nletter_counts = Counter(x)\n\ndf = pd.DataFrame.from_dict(letter_counts, orient='index')\n\ndf = df[0].sort_values(ascending = True)[45:50]\n\ndf.plot(kind='bar')\n\nplt.xlabel('Items')\nplt.ylabel('Number of Times Ordered')\nplt.title('Most ordered Chipotle\\'s Items')\n\nplt.show()\n\n\n\n\n\n\n\n\n\n\nStep 6. Create a scatterplot with the number of items orderered per order price\n\nHint: Price should be in the X-axis and Items ordered in the Y-axis\n\nchipo.item_price = [float(value[1:-1]) for value in chipo.item_price] # strip the dollar sign and trailing space\n\norders = chipo.groupby('order_id').sum()\n\nplt.scatter(x = orders.item_price, y = orders.quantity, s = 50, c = 'green')\n\nplt.xlabel('Order Price')\nplt.ylabel('Items ordered')\nplt.title('Number of items ordered per order price')\nplt.ylim(0)\n\n\n\n\n\n\n\n\n\n\n\nStep 7. BONUS: Create a question and a graph to answer your own question.\nWhich menu items have the highest unit prices and how do the number of orders for these menu items vary?\n\nurl = 'https://raw.githubusercontent.com/justmarkham/DAT8/master/data/chipotle.tsv'\nchipo = pd.read_csv(url, sep = '\\t')\n\nchipo.item_price = [float(value[1:-1]) for value in chipo.item_price]\n\nmost_expensive_items = chipo.groupby('item_name').item_price.mean().sort_values(ascending=False).head(10)\n\ntop_items = chipo[chipo['item_name'].isin(most_expensive_items.index)]\nitem_order_counts = top_items.groupby('item_name')['quantity'].sum()\n\nfig, ax = plt.subplots(figsize=(10, 6))\nitem_order_counts.plot(kind='bar', ax=ax, color='skyblue')\n\nax.set_xlabel('Menu Item')\nax.set_ylabel('Total Quantity Ordered')\nax.set_title('Top 10 Most Expensive Menu Items and Their Order Quantities')\n\nplt.xticks(rotation=45, ha=\"right\")\nplt.show()\n\n\n\n\n\n\n\n\n\n\n, ’’)))\nprint(f”The data type of ‘item_price’ is: {chipo[‘item_price’].dtype}“)\n\n::: {.cell-output .cell-output-stdout}\nThe data type of ‘item_price’ is: float64\n:::\n:::\n\n\n### Step 14. How much was the revenue for the period in the dataset?\n\n::: {#cell-34 .cell execution_count=17}\n``` {.python .cell-code}\nurl = 'https://raw.githubusercontent.com/justmarkham/DAT8/master/data/chipotle.tsv'\nchipo = pd.read_csv(url, sep='\\t')\n\nchipo['item_price'] = chipo['item_price'].apply(lambda x: float(x.replace('\n\n\n\n\n\n\n\n\n\n# Euro12\n\n\n\n\n\n:::{.quarto-embed-nb-cell notebook=\"D:\\code\\jiedan\\12-28\\test1\\labs\\Labexercises\\lab1\\Euro12.ipynb\" notebook-title=\"Ex2 - Filtering and Sorting Data\" notebook-cellId=\"cell-0\"}\n\n# Ex2 - Filtering and Sorting Data\n\nThis time we are going to pull data directly from the internet.\n\n### Step 1. Import the necessary libraries\n\n::: {#cell-2 .cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\n:::\n\nStep 2. Import the dataset from this address.\n\n\nStep 3. Assign it to a variable called euro12.\n\n\neuro12 = pd.read_csv('https://raw.githubusercontent.com/guipsamora/pandas_exercises/master/02_Filtering_%26_Sorting/Euro12/Euro_2012_stats_TEAM.csv')\n\nprint(euro12)\n\n                   Team  Goals  Shots on target  Shots off target  \\\n0               Croatia      4               13                12   \n1        Czech Republic      4               13                18   \n2               Denmark      4               10                10   \n3               England      5               11                18   \n4                France      3               22                24   \n5               Germany     10               32                32   \n6                Greece      5                8                18   \n7                 Italy      6               34                45   \n8           Netherlands      2               12                36   \n9                Poland      2               15                23   \n10             Portugal      6               22                42   \n11  Republic of Ireland      1                7                12   \n12               Russia      5                9                31   \n13                Spain     12               42                33   \n14               Sweden      5               17                19   \n15              Ukraine      2                7                26   \n\n   Shooting Accuracy % Goals-to-shots  Total shots (inc. Blocked)  \\\n0              51.9%            16.0%                          32   \n1              41.9%            12.9%                          39   \n2              50.0%            20.0%                          27   \n3              50.0%            17.2%                          40   \n4              37.9%             6.5%                          65   \n5              47.8%            15.6%                          80   \n6              30.7%            19.2%                          32   \n7              43.0%             7.5%                         110   \n8              25.0%             4.1%                          60   \n9              39.4%             5.2%                          48   \n10             34.3%             9.3%                          82   \n11             36.8%             5.2%                          28   \n12             22.5%            12.5%                          59   \n13             55.9%            16.0%                         100   \n14             47.2%            13.8%                          39   \n15             21.2%             6.0%                          38   \n\n    Hit Woodwork  Penalty goals  Penalties not scored  ...  Saves made  \\\n0              0              0                     0  ...          13   \n1              0              0                     0  ...           9   \n2              1              0                     0  ...          10   \n3              0              0                     0  ...          22   \n4              1              0                     0  ...           6   \n5              2              1                     0  ...          10   \n6              1              1                     1  ...          13   \n7              2              0                     0  ...          20   \n8              2              0                     0  ...          12   \n9              0              0                     0  ...           6   \n10             6              0                     0  ...          10   \n11             0              0                     0  ...          17   \n12             2              0                     0  ...          10   \n13             0              1                     0  ...          15   \n14             3              0                     0  ...           8   \n15             0              0                     0  ...          13   \n\n    Saves-to-shots ratio  Fouls Won Fouls Conceded  Offsides  Yellow Cards  \\\n0                  81.3%         41             62         2             9   \n1                  60.1%         53             73         8             7   \n2                  66.7%         25             38         8             4   \n3                  88.1%         43             45         6             5   \n4                  54.6%         36             51         5             6   \n5                  62.6%         63             49        12             4   \n6                  65.1%         67             48        12             9   \n7                  74.1%        101             89        16            16   \n8                  70.6%         35             30         3             5   \n9                  66.7%         48             56         3             7   \n10                 71.5%         73             90        10            12   \n11                 65.4%         43             51        11             6   \n12                 77.0%         34             43         4             6   \n13                 93.8%        102             83        19            11   \n14                 61.6%         35             51         7             7   \n15                 76.5%         48             31         4             5   \n\n    Red Cards  Subs on  Subs off  Players Used  \n0           0        9         9            16  \n1           0       11        11            19  \n2           0        7         7            15  \n3           0       11        11            16  \n4           0       11        11            19  \n5           0       15        15            17  \n6           1       12        12            20  \n7           0       18        18            19  \n8           0        7         7            15  \n9           1        7         7            17  \n10          0       14        14            16  \n11          1       10        10            17  \n12          0        7         7            16  \n13          0       17        17            18  \n14          0        9         9            18  \n15          0        9         9            18  \n\n[16 rows x 35 columns]\n\n\n\n\nStep 4. Select only the Goal column.\n\ngoals = euro12['Goals']\nprint(goals)\n\n0      4\n1      4\n2      4\n3      5\n4      3\n5     10\n6      5\n7      6\n8      2\n9      2\n10     6\n11     1\n12     5\n13    12\n14     5\n15     2\nName: Goals, dtype: int64\n\n\n\n\nStep 5. How many team participated in the Euro2012?\n\nnum_teams = euro12.shape[0]\nprint(f'Number of teams participated: {num_teams}')\n\nNumber of teams participated: 16\n\n\n\n\nStep 6. What is the number of columns in the dataset?\n\n\neuro12.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 16 entries, 0 to 15\nData columns (total 35 columns):\n #   Column                      Non-Null Count  Dtype  \n---  ------                      --------------  -----  \n 0   Team                        16 non-null     object \n 1   Goals                       16 non-null     int64  \n 2   Shots on target             16 non-null     int64  \n 3   Shots off target            16 non-null     int64  \n 4   Shooting Accuracy           16 non-null     object \n 5   % Goals-to-shots            16 non-null     object \n 6   Total shots (inc. Blocked)  16 non-null     int64  \n 7   Hit Woodwork                16 non-null     int64  \n 8   Penalty goals               16 non-null     int64  \n 9   Penalties not scored        16 non-null     int64  \n 10  Headed goals                16 non-null     int64  \n 11  Passes                      16 non-null     int64  \n 12  Passes completed            16 non-null     int64  \n 13  Passing Accuracy            16 non-null     object \n 14  Touches                     16 non-null     int64  \n 15  Crosses                     16 non-null     int64  \n 16  Dribbles                    16 non-null     int64  \n 17  Corners Taken               16 non-null     int64  \n 18  Tackles                     16 non-null     int64  \n 19  Clearances                  16 non-null     int64  \n 20  Interceptions               16 non-null     int64  \n 21  Clearances off line         15 non-null     float64\n 22  Clean Sheets                16 non-null     int64  \n 23  Blocks                      16 non-null     int64  \n 24  Goals conceded              16 non-null     int64  \n 25  Saves made                  16 non-null     int64  \n 26  Saves-to-shots ratio        16 non-null     object \n 27  Fouls Won                   16 non-null     int64  \n 28  Fouls Conceded              16 non-null     int64  \n 29  Offsides                    16 non-null     int64  \n 30  Yellow Cards                16 non-null     int64  \n 31  Red Cards                   16 non-null     int64  \n 32  Subs on                     16 non-null     int64  \n 33  Subs off                    16 non-null     int64  \n 34  Players Used                16 non-null     int64  \ndtypes: float64(1), int64(29), object(5)\nmemory usage: 4.5+ KB\n\n\n\n\nStep 7. View only the columns Team, Yellow Cards and Red Cards and assign them to a dataframe called discipline\n\ndiscipline = euro12[['Team', 'Yellow Cards', 'Red Cards']]\nprint(discipline)\n\n                   Team  Yellow Cards  Red Cards\n0               Croatia             9          0\n1        Czech Republic             7          0\n2               Denmark             4          0\n3               England             5          0\n4                France             6          0\n5               Germany             4          0\n6                Greece             9          1\n7                 Italy            16          0\n8           Netherlands             5          0\n9                Poland             7          1\n10             Portugal            12          0\n11  Republic of Ireland             6          1\n12               Russia             6          0\n13                Spain            11          0\n14               Sweden             7          0\n15              Ukraine             5          0\n\n\n\n\nStep 8. Sort the teams by Red Cards, then to Yellow Cards\n\nsorted_discipline = discipline.sort_values(by=['Red Cards', 'Yellow Cards'], ascending=[False, False])\nprint(sorted_discipline)\n\n                   Team  Yellow Cards  Red Cards\n6                Greece             9          1\n9                Poland             7          1\n11  Republic of Ireland             6          1\n7                 Italy            16          0\n10             Portugal            12          0\n13                Spain            11          0\n0               Croatia             9          0\n1        Czech Republic             7          0\n14               Sweden             7          0\n4                France             6          0\n12               Russia             6          0\n3               England             5          0\n8           Netherlands             5          0\n15              Ukraine             5          0\n2               Denmark             4          0\n5               Germany             4          0\n\n\n\n\nStep 9. Calculate the mean Yellow Cards given per Team\n\n# Calculate the mean Yellow Cards given per Team and round to 1 decimal place\nmean_yellow_cards = round(euro12['Yellow Cards'].mean(), 1)\n\n# Display the result\nprint(mean_yellow_cards)\n\n\n\n7.4\n\n\n\n\nStep 10. Filter teams that scored more than 6 goals\n\nteams_more_than_6_goals = euro12[euro12['Goals'] &gt; 6]\n\ngermany_spain = teams_more_than_6_goals[teams_more_than_6_goals['Team'].isin(['Germany', 'Spain'])]\n\nprint(germany_spain)\n\n\n       Team  Goals  Shots on target  Shots off target Shooting Accuracy  \\\n5   Germany     10               32                32             47.8%   \n13    Spain     12               42                33             55.9%   \n\n   % Goals-to-shots  Total shots (inc. Blocked)  Hit Woodwork  Penalty goals  \\\n5             15.6%                          80             2              1   \n13            16.0%                         100             0              1   \n\n    Penalties not scored  ...  Saves made  Saves-to-shots ratio  Fouls Won  \\\n5                      0  ...          10                 62.6%         63   \n13                     0  ...          15                 93.8%        102   \n\n   Fouls Conceded  Offsides  Yellow Cards  Red Cards  Subs on  Subs off  \\\n5              49        12             4          0       15        15   \n13             83        19            11          0       17        17   \n\n    Players Used  \n5             17  \n13            18  \n\n[2 rows x 35 columns]\n\n\n\n\nStep 11. Select the teams that start with G\n\nteams_start_with_G = euro12[euro12['Team'].str.startswith('G')]\nprint(teams_start_with_G)\n\n      Team  Goals  Shots on target  Shots off target Shooting Accuracy  \\\n5  Germany     10               32                32             47.8%   \n6   Greece      5                8                18             30.7%   \n\n  % Goals-to-shots  Total shots (inc. Blocked)  Hit Woodwork  Penalty goals  \\\n5            15.6%                          80             2              1   \n6            19.2%                          32             1              1   \n\n   Penalties not scored  ...  Saves made  Saves-to-shots ratio  Fouls Won  \\\n5                     0  ...          10                 62.6%         63   \n6                     1  ...          13                 65.1%         67   \n\n  Fouls Conceded  Offsides  Yellow Cards  Red Cards  Subs on  Subs off  \\\n5             49        12             4          0       15        15   \n6             48        12             9          1       12        12   \n\n   Players Used  \n5            17  \n6            20  \n\n[2 rows x 35 columns]\n\n\n\n\nStep 12. Select the first 7 columns\n\nfirst_7_columns = euro12.iloc[:, :7]\nprint(first_7_columns)\n\n                   Team  Goals  Shots on target  Shots off target  \\\n0               Croatia      4               13                12   \n1        Czech Republic      4               13                18   \n2               Denmark      4               10                10   \n3               England      5               11                18   \n4                France      3               22                24   \n5               Germany     10               32                32   \n6                Greece      5                8                18   \n7                 Italy      6               34                45   \n8           Netherlands      2               12                36   \n9                Poland      2               15                23   \n10             Portugal      6               22                42   \n11  Republic of Ireland      1                7                12   \n12               Russia      5                9                31   \n13                Spain     12               42                33   \n14               Sweden      5               17                19   \n15              Ukraine      2                7                26   \n\n   Shooting Accuracy % Goals-to-shots  Total shots (inc. Blocked)  \n0              51.9%            16.0%                          32  \n1              41.9%            12.9%                          39  \n2              50.0%            20.0%                          27  \n3              50.0%            17.2%                          40  \n4              37.9%             6.5%                          65  \n5              47.8%            15.6%                          80  \n6              30.7%            19.2%                          32  \n7              43.0%             7.5%                         110  \n8              25.0%             4.1%                          60  \n9              39.4%             5.2%                          48  \n10             34.3%             9.3%                          82  \n11             36.8%             5.2%                          28  \n12             22.5%            12.5%                          59  \n13             55.9%            16.0%                         100  \n14             47.2%            13.8%                          39  \n15             21.2%             6.0%                          38  \n\n\n\n\nStep 13. Select all columns except the last 3.\n\ncolumns_excluding_last_3 = euro12.iloc[:, :-3]\nprint(columns_excluding_last_3)\n\n                   Team  Goals  Shots on target  Shots off target  \\\n0               Croatia      4               13                12   \n1        Czech Republic      4               13                18   \n2               Denmark      4               10                10   \n3               England      5               11                18   \n4                France      3               22                24   \n5               Germany     10               32                32   \n6                Greece      5                8                18   \n7                 Italy      6               34                45   \n8           Netherlands      2               12                36   \n9                Poland      2               15                23   \n10             Portugal      6               22                42   \n11  Republic of Ireland      1                7                12   \n12               Russia      5                9                31   \n13                Spain     12               42                33   \n14               Sweden      5               17                19   \n15              Ukraine      2                7                26   \n\n   Shooting Accuracy % Goals-to-shots  Total shots (inc. Blocked)  \\\n0              51.9%            16.0%                          32   \n1              41.9%            12.9%                          39   \n2              50.0%            20.0%                          27   \n3              50.0%            17.2%                          40   \n4              37.9%             6.5%                          65   \n5              47.8%            15.6%                          80   \n6              30.7%            19.2%                          32   \n7              43.0%             7.5%                         110   \n8              25.0%             4.1%                          60   \n9              39.4%             5.2%                          48   \n10             34.3%             9.3%                          82   \n11             36.8%             5.2%                          28   \n12             22.5%            12.5%                          59   \n13             55.9%            16.0%                         100   \n14             47.2%            13.8%                          39   \n15             21.2%             6.0%                          38   \n\n    Hit Woodwork  Penalty goals  Penalties not scored  ...  Clean Sheets  \\\n0              0              0                     0  ...             0   \n1              0              0                     0  ...             1   \n2              1              0                     0  ...             1   \n3              0              0                     0  ...             2   \n4              1              0                     0  ...             1   \n5              2              1                     0  ...             1   \n6              1              1                     1  ...             1   \n7              2              0                     0  ...             2   \n8              2              0                     0  ...             0   \n9              0              0                     0  ...             0   \n10             6              0                     0  ...             2   \n11             0              0                     0  ...             0   \n12             2              0                     0  ...             0   \n13             0              1                     0  ...             5   \n14             3              0                     0  ...             1   \n15             0              0                     0  ...             0   \n\n    Blocks  Goals conceded Saves made  Saves-to-shots ratio  Fouls Won  \\\n0       10               3         13                 81.3%         41   \n1       10               6          9                 60.1%         53   \n2       10               5         10                 66.7%         25   \n3       29               3         22                 88.1%         43   \n4        7               5          6                 54.6%         36   \n5       11               6         10                 62.6%         63   \n6       23               7         13                 65.1%         67   \n7       18               7         20                 74.1%        101   \n8        9               5         12                 70.6%         35   \n9        8               3          6                 66.7%         48   \n10      11               4         10                 71.5%         73   \n11      23               9         17                 65.4%         43   \n12       8               3         10                 77.0%         34   \n13       8               1         15                 93.8%        102   \n14      12               5          8                 61.6%         35   \n15       4               4         13                 76.5%         48   \n\n    Fouls Conceded  Offsides  Yellow Cards  Red Cards  \n0               62         2             9          0  \n1               73         8             7          0  \n2               38         8             4          0  \n3               45         6             5          0  \n4               51         5             6          0  \n5               49        12             4          0  \n6               48        12             9          1  \n7               89        16            16          0  \n8               30         3             5          0  \n9               56         3             7          1  \n10              90        10            12          0  \n11              51        11             6          1  \n12              43         4             6          0  \n13              83        19            11          0  \n14              51         7             7          0  \n15              31         4             5          0  \n\n[16 rows x 32 columns]\n\n\n\n\nStep 14. Present only the Shooting Accuracy from England, Italy and Russia\n\nshooting_accuracy = euro12[euro12['Team'].isin(['England', 'Italy', 'Russia'])][['Team', 'Shooting Accuracy']]\nprint(shooting_accuracy)\n\n       Team Shooting Accuracy\n3   England             50.0%\n7     Italy             43.0%\n12   Russia             22.5%\n\n\n:::\n\n\nOccupation\n\n\nEx3 - Getting and Knowing your Data\nThis time we are going to pull data directly from the internet. Special thanks to: https://github.com/justmarkham for sharing the dataset and materials.\n\nStep 1. Import the necessary libraries\n\nimport pandas as pd\n\n\n\nStep 2. Import the dataset from this address.\n\nurl = 'https://raw.githubusercontent.com/justmarkham/DAT8/master/data/u.user'\n\n\nuser_data = pd.read_csv(url, delimiter='|')\n\n\nprint(user_data.head())\n\n   user_id  age gender  occupation zip_code\n0        1   24      M  technician    85711\n1        2   53      F       other    94043\n2        3   23      M      writer    32067\n3        4   24      M  technician    43537\n4        5   33      F       other    15213\n\n\n\n\nStep 3. Assign it to a variable called users and use the ‘user_id’ as index\n\n\nurl = 'https://raw.githubusercontent.com/justmarkham/DAT8/master/data/u.user'\n\n\nusers = pd.read_csv(url, delimiter='|', index_col='user_id')\n\n\nprint(users.head())\n\n         age gender  occupation zip_code\nuser_id                                 \n1         24      M  technician    85711\n2         53      F       other    94043\n3         23      M      writer    32067\n4         24      M  technician    43537\n5         33      F       other    15213\n\n\n\n\nStep 4. See the first 25 entries\n\n\nprint(users.head(25))\n\n         age gender     occupation zip_code\nuser_id                                    \n1         24      M     technician    85711\n2         53      F          other    94043\n3         23      M         writer    32067\n4         24      M     technician    43537\n5         33      F          other    15213\n6         42      M      executive    98101\n7         57      M  administrator    91344\n8         36      M  administrator    05201\n9         29      M        student    01002\n10        53      M         lawyer    90703\n11        39      F          other    30329\n12        28      F          other    06405\n13        47      M       educator    29206\n14        45      M      scientist    55106\n15        49      F       educator    97301\n16        21      M  entertainment    10309\n17        30      M     programmer    06355\n18        35      F          other    37212\n19        40      M      librarian    02138\n20        42      F      homemaker    95660\n21        26      M         writer    30068\n22        25      M         writer    40206\n23        30      F         artist    48197\n24        21      F         artist    94533\n25        39      M       engineer    55107\n\n\n\n\nStep 5. See the last 10 entries\n\n\nprint(users.tail(10))\n\n         age gender     occupation zip_code\nuser_id                                    \n934       61      M       engineer    22902\n935       42      M         doctor    66221\n936       24      M          other    32789\n937       48      M       educator    98072\n938       38      F     technician    55038\n939       26      F        student    33319\n940       32      M  administrator    02215\n941       20      M        student    97229\n942       48      F      librarian    78209\n943       22      M        student    77841\n\n\n\n\nStep 6. What is the number of observations in the dataset?\n\n# Get the number of observations (rows) in the dataset\nnum_observations = users.shape[0]\n\n# Print the number of observations\nprint(f\"Number of observations in the dataset: {num_observations}\")\n\nNumber of observations in the dataset: 943\n\n\n\n\nStep 7. What is the number of columns in the dataset?\n\n\nnum_columns = users.shape[1]\n\n\nprint(f\"Number of columns in the dataset: {num_columns}\")\n\nNumber of columns in the dataset: 4\n\n\n\n\nStep 8. Print the name of all the columns.\n\n\nprint(users.columns)\n\nIndex(['age', 'gender', 'occupation', 'zip_code'], dtype='object')\n\n\n\n\nStep 9. How is the dataset indexed?\n\n\nprint(users.index)\n\nIndex([  1,   2,   3,   4,   5,   6,   7,   8,   9,  10,\n       ...\n       934, 935, 936, 937, 938, 939, 940, 941, 942, 943],\n      dtype='int64', name='user_id', length=943)\n\n\n\n\nStep 10. What is the data type of each column?\n\n\nprint(users.dtypes)\n\nage            int64\ngender        object\noccupation    object\nzip_code      object\ndtype: object\n\n\n\n\nStep 11. Print only the occupation column\n\n\nprint(users['occupation'])\n\nuser_id\n1         technician\n2              other\n3             writer\n4         technician\n5              other\n           ...      \n939          student\n940    administrator\n941          student\n942        librarian\n943          student\nName: occupation, Length: 943, dtype: object\n\n\n\n\nStep 12. How many different occupations are in this dataset?\n\nnum_occupations = users['occupation'].nunique()\n\nprint(f\"Number of different occupations in the dataset: {num_occupations}\")\n\nNumber of different occupations in the dataset: 21\n\n\n\n\nStep 13. What is the most frequent occupation?\n\nmost_frequent_occupation = users['occupation'].mode()[0]\n\n\nprint(f\"The most frequent occupation in the dataset is: {most_frequent_occupation}\")\n\nThe most frequent occupation in the dataset is: student\n\n\n\n\nStep 14. Summarize the DataFrame.\n\nprint(users.describe())\n\n              age\ncount  943.000000\nmean    34.051962\nstd     12.192740\nmin      7.000000\n25%     25.000000\n50%     31.000000\n75%     43.000000\nmax     73.000000\n\n\n\nprint(users.info())\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nIndex: 943 entries, 1 to 943\nData columns (total 4 columns):\n #   Column      Non-Null Count  Dtype \n---  ------      --------------  ----- \n 0   age         943 non-null    int64 \n 1   gender      943 non-null    object\n 2   occupation  943 non-null    object\n 3   zip_code    943 non-null    object\ndtypes: int64(1), object(3)\nmemory usage: 36.8+ KB\nNone\n\n\n\n\nStep 15. Summarize all the columns\n\nsummary = users.describe(include='all').transpose()\n\n\nprint(summary)\n\n\n\n            count unique      top freq       mean       std  min   25%   50%  \\\nage         943.0    NaN      NaN  NaN  34.051962  12.19274  7.0  25.0  31.0   \ngender        943      2        M  670        NaN       NaN  NaN   NaN   NaN   \noccupation    943     21  student  196        NaN       NaN  NaN   NaN   NaN   \nzip_code      943    795    55414    9        NaN       NaN  NaN   NaN   NaN   \n\n             75%   max  \nage         43.0  73.0  \ngender       NaN   NaN  \noccupation   NaN   NaN  \nzip_code     NaN   NaN  \n\n\n\n\nStep 16. Summarize only the occupation column\n\noccupation_summary = users['occupation'].describe()\n\nprint(occupation_summary)\n\ncount         943\nunique         21\ntop       student\nfreq          196\nName: occupation, dtype: object\n\n\n\n\nStep 17. What is the mean age of users?\n\nmean_age = users['age'].mean()\n\nprint(f\"The mean age of users is: {mean_age}\")\n\nThe mean age of users is: 34.05196182396607\n\n\n\n\nStep 18. What is the age with least occurrence?\n\n\nage_counts = users['age'].value_counts()\n\n\nleast_occurrence_ages = age_counts[age_counts == 1]\n\n\nleast_occurrence_ages.name = 'age'\n\n\nprint(least_occurrence_ages)\n\n\n\n\n\nage\n7     1\n66    1\n11    1\n10    1\n73    1\nName: age, dtype: int64\n\n\n\n\n\nOpen food facts\n\n\nExercise 1\n\nStep 1. Go to https://www.kaggle.com/openfoodfacts/world-food-facts/data\n\n\nStep 2. Download the dataset to your computer and unzip it.\n\nimport pandas as pd\nimport numpy as np\n\n\n\nStep 3. Use the tsv file and assign it to a dataframe called food\n\n\n\nfood  = pd.read_csv('en.openfoodfacts.org.products.tsv.zip', sep='\\t')\n\n\n\nStep 4. See the first 5 entries\n\nfood.head()\n\n\n\n\n\n\n\n\ncode\nurl\ncreator\ncreated_t\ncreated_datetime\nlast_modified_t\nlast_modified_datetime\nproduct_name\ngeneric_name\nquantity\n...\nfruits-vegetables-nuts_100g\nfruits-vegetables-nuts-estimate_100g\ncollagen-meat-protein-ratio_100g\ncocoa_100g\nchlorophyl_100g\ncarbon-footprint_100g\nnutrition-score-fr_100g\nnutrition-score-uk_100g\nglycemic-index_100g\nwater-hardness_100g\n\n\n\n\n0\n3087\nhttp://world-en.openfoodfacts.org/product/0000000003087/farine-de-ble-noir-ferme-t-y-r-nao\nopenfoodfacts-contributors\n1474103866\n2016-09-17T09:17:46Z\n1474103893\n2016-09-17T09:18:13Z\nFarine de blé noir\nNaN\n1kg\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n1\n4530\nhttp://world-en.openfoodfacts.org/product/0000000004530/banana-chips-sweetened-whole\nusda-ndb-import\n1489069957\n2017-03-09T14:32:37Z\n1489069957\n2017-03-09T14:32:37Z\nBanana Chips Sweetened (Whole)\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n14.0\n14.0\nNaN\nNaN\n\n\n2\n4559\nhttp://world-en.openfoodfacts.org/product/0000000004559/peanuts-torn-glasser\nusda-ndb-import\n1489069957\n2017-03-09T14:32:37Z\n1489069957\n2017-03-09T14:32:37Z\nPeanuts\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n0.0\n0.0\nNaN\nNaN\n\n\n3\n16087\nhttp://world-en.openfoodfacts.org/product/0000000016087/organic-salted-nut-mix-grizzlies\nusda-ndb-import\n1489055731\n2017-03-09T10:35:31Z\n1489055731\n2017-03-09T10:35:31Z\nOrganic Salted Nut Mix\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n12.0\n12.0\nNaN\nNaN\n\n\n4\n16094\nhttp://world-en.openfoodfacts.org/product/0000000016094/organic-polenta-bob-s-red-mill\nusda-ndb-import\n1489055653\n2017-03-09T10:34:13Z\n1489055653\n2017-03-09T10:34:13Z\nOrganic Polenta\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n\n\n5 rows × 163 columns\n\n\n\n\n\nStep 5. What is the number of observations in the dataset?\n\nfood.shape\n\n(356027, 163)\n\n\n\nfood.shape[0]\n\n356027\n\n\n\n\nStep 6. What is the number of columns in the dataset?\n\nprint(food.shape)\nprint(food.shape[1])\n\nfood.info()\n\n(356027, 163)\n163\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 356027 entries, 0 to 356026\nColumns: 163 entries, code to water-hardness_100g\ndtypes: float64(107), object(56)\nmemory usage: 442.8+ MB\n\n\n\n\nStep 7. Print the name of all the columns.\n\nfood.columns\n\nIndex(['code', 'url', 'creator', 'created_t', 'created_datetime',\n       'last_modified_t', 'last_modified_datetime', 'product_name',\n       'generic_name', 'quantity',\n       ...\n       'fruits-vegetables-nuts_100g', 'fruits-vegetables-nuts-estimate_100g',\n       'collagen-meat-protein-ratio_100g', 'cocoa_100g', 'chlorophyl_100g',\n       'carbon-footprint_100g', 'nutrition-score-fr_100g',\n       'nutrition-score-uk_100g', 'glycemic-index_100g',\n       'water-hardness_100g'],\n      dtype='object', length=163)\n\n\n\n\nStep 8. What is the name of 105th column?\n\nfood.columns[104]\n\n'-glucose_100g'\n\n\n\n\nStep 9. What is the type of the observations of the 105th column?\n\nfood['-glucose_100g'].dtype\n\ndtype('float64')\n\n\n\n\nStep 10. How is the dataset indexed?\n\nfood.index\n\nRangeIndex(start=0, stop=356027, step=1)\n\n\n\npd.set_option('display.max_colwidth', 300)\n\n\nfood[['code','url']]\n\n\n\n\n\n\n\n\ncode\nurl\n\n\n\n\n0\n3087\nhttp://world-en.openfoodfacts.org/product/0000...\n\n\n1\n4530\nhttp://world-en.openfoodfacts.org/product/0000...\n\n\n2\n4559\nhttp://world-en.openfoodfacts.org/product/0000...\n\n\n3\n16087\nhttp://world-en.openfoodfacts.org/product/0000...\n\n\n4\n16094\nhttp://world-en.openfoodfacts.org/product/0000...\n\n\n...\n...\n...\n\n\n356022\n99567453\nhttp://world-en.openfoodfacts.org/product/9956...\n\n\n356023\n9970229501521\nhttp://world-en.openfoodfacts.org/product/9970...\n\n\n356024\n9977471758307\nhttp://world-en.openfoodfacts.org/product/9977...\n\n\n356025\n9980282863788\nhttp://world-en.openfoodfacts.org/product/9980...\n\n\n356026\n999990026839\nhttp://world-en.openfoodfacts.org/product/9999...\n\n\n\n\n356027 rows × 2 columns\n\n\n\n\n\nStep 11. What is the product name of the 19th observation?\n\nfood.at[18, 'product_name']\n\n'Lotus Organic Brown Jasmine Rice'\n\n\n\n\n\nScores\n\n\nScores\n\nIntroduction:\nThis time you will create the data.\nExercise based on Chris Albon work, the credits belong to him.\n\n\nStep 1. Import the necessary libraries\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\n\nStep 2. Create the DataFrame that should look like the one below.\n\n\ndata = {\n    'first_name': ['Jason', 'Molly', 'Tina', 'Jake', 'Amy'],\n    'last_name': ['Miller', 'Jacobson', 'Ali', 'Milner', 'Cooze'],\n    'age': [42, 52, 36, 24, 73],\n    'female': [0, 1, 1, 0, 1],\n    'preTestScore': [4, 24, 31, 2, 3],\n    'postTestScore': [25, 94, 57, 62, 70]\n}\n\ndf = pd.DataFrame(data)\nprint(df)\n\n  first_name last_name  age  female  preTestScore  postTestScore\n0      Jason    Miller   42       0             4             25\n1      Molly  Jacobson   52       1            24             94\n2       Tina       Ali   36       1            31             57\n3       Jake    Milner   24       0             2             62\n4        Amy     Cooze   73       1             3             70\n\n\n\n\nStep 3. Create a Scatterplot of preTestScore and postTestScore, with the size of each point determined by age\n\nHint: Don’t forget to place the labels\n\nplt.scatter(df['preTestScore'], df['postTestScore'], s=df['age'], alpha=0.5)\n\nplt.xlabel('Pre Test Score')\nplt.ylabel('Post Test Score')\nplt.title('Pre Test Score vs Post Test Score')\n\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\nStep 4. Create a Scatterplot of preTestScore and postTestScore.\n\n\nThis time the size should be 4.5 times the postTestScore and the color determined by sex\n\n\nplt.scatter(df['preTestScore'], df['postTestScore'], \n            s=4.5 * df['postTestScore'], c=df['female'], cmap='coolwarm', alpha=0.5)\n\nplt.xlabel('Pre Test Score')\nplt.ylabel('Post Test Score')\nplt.title('Pre Test Score vs Post Test Score with Size and Color')\n\nplt.show()\n\n\n\n\n\n\n\n\n\n\nBONUS: Create your own question and answer it.\nFind the correlation between preTestScore and postTestScore\n\ncorrelation = df['preTestScore'].corr(df['postTestScore'])\nprint(f\"Correlation between preTestScore and postTestScore: {correlation}\")\n\nCorrelation between preTestScore and postTestScore: 0.37803911777651406\n\n\n\n\n\nVisualizing Chipotle’s Data\n\n\nVisualizing Chipotle’s Data\nThis time we are going to pull data directly from the internet. Special thanks to: https://github.com/justmarkham for sharing the dataset and materials.\n\nStep 1. Import the necessary libraries\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom collections import Counter\n\n\n\nStep 2. Import the dataset from this address.\n\nurl = 'https://raw.githubusercontent.com/justmarkham/DAT8/master/data/chipotle.tsv'\n\n\n\nStep 3. Assign it to a variable called chipo.\n\nchipo = pd.read_csv(url, sep = '\\t')\n\n\n\nStep 4. See the first 10 entries\n\nchipo.head(10)\n\n\n\n\n\n\n\n\norder_id\nquantity\nitem_name\nchoice_description\nitem_price\n\n\n\n\n0\n1\n1\nChips and Fresh Tomato Salsa\nNaN\n$2.39\n\n\n1\n1\n1\nIzze\n[Clementine]\n$3.39\n\n\n2\n1\n1\nNantucket Nectar\n[Apple]\n$3.39\n\n\n3\n1\n1\nChips and Tomatillo-Green Chili Salsa\nNaN\n$2.39\n\n\n4\n2\n2\nChicken Bowl\n[Tomatillo-Red Chili Salsa (Hot), [Black Beans...\n$16.98\n\n\n5\n3\n1\nChicken Bowl\n[Fresh Tomato Salsa (Mild), [Rice, Cheese, Sou...\n$10.98\n\n\n6\n3\n1\nSide of Chips\nNaN\n$1.69\n\n\n7\n4\n1\nSteak Burrito\n[Tomatillo Red Chili Salsa, [Fajita Vegetables...\n$11.75\n\n\n8\n4\n1\nSteak Soft Tacos\n[Tomatillo Green Chili Salsa, [Pinto Beans, Ch...\n$9.25\n\n\n9\n5\n1\nSteak Burrito\n[Fresh Tomato Salsa, [Rice, Black Beans, Pinto...\n$9.25\n\n\n\n\n\n\n\n\n\nStep 5. Create a histogram of the top 5 items bought\n\nx = chipo.item_name\n\nletter_counts = Counter(x)\n\ndf = pd.DataFrame.from_dict(letter_counts, orient='index')\n\ndf = df[0].sort_values(ascending = True)[45:50]\n\ndf.plot(kind='bar')\n\nplt.xlabel('Items')\nplt.ylabel('Number of Times Ordered')\nplt.title('Most ordered Chipotle\\'s Items')\n\nplt.show()\n\n\n\n\n\n\n\n\n\n\nStep 6. Create a scatterplot with the number of items orderered per order price\n\nHint: Price should be in the X-axis and Items ordered in the Y-axis\n\nchipo.item_price = [float(value[1:-1]) for value in chipo.item_price] # strip the dollar sign and trailing space\n\norders = chipo.groupby('order_id').sum()\n\nplt.scatter(x = orders.item_price, y = orders.quantity, s = 50, c = 'green')\n\nplt.xlabel('Order Price')\nplt.ylabel('Items ordered')\nplt.title('Number of items ordered per order price')\nplt.ylim(0)\n\n\n\n\n\n\n\n\n\n\n\nStep 7. BONUS: Create a question and a graph to answer your own question.\nWhich menu items have the highest unit prices and how do the number of orders for these menu items vary?\n\nurl = 'https://raw.githubusercontent.com/justmarkham/DAT8/master/data/chipotle.tsv'\nchipo = pd.read_csv(url, sep = '\\t')\n\nchipo.item_price = [float(value[1:-1]) for value in chipo.item_price]\n\nmost_expensive_items = chipo.groupby('item_name').item_price.mean().sort_values(ascending=False).head(10)\n\ntop_items = chipo[chipo['item_name'].isin(most_expensive_items.index)]\nitem_order_counts = top_items.groupby('item_name')['quantity'].sum()\n\nfig, ax = plt.subplots(figsize=(10, 6))\nitem_order_counts.plot(kind='bar', ax=ax, color='skyblue')\n\nax.set_xlabel('Menu Item')\nax.set_ylabel('Total Quantity Ordered')\nax.set_title('Top 10 Most Expensive Menu Items and Their Order Quantities')\n\nplt.xticks(rotation=45, ha=\"right\")\nplt.show()\n\n\n\n\n\n\n\n\n\n\n, ’’)))\nchipo[‘revenue’] = chipo[‘item_price’] * chipo[‘quantity’]\ntotal_revenue = chipo[‘revenue’].sum()\nprint(f”Total revenue for the period: ${total_revenue:.2f}“)\n\n::: {.cell-output .cell-output-stdout}\nTotal revenue for the period: $39237.02\n:::\n:::\n\n\n### Step 15. How many orders were made in the period?\n\n::: {#cell-36 .cell execution_count=18}\n``` {.python .cell-code}\nurl = 'https://raw.githubusercontent.com/justmarkham/DAT8/master/data/chipotle.tsv'\nchipo = pd.read_csv(url, sep='\\t')\nnum_orders = chipo.shape[0]\nprint(f\"Total number of orders in the period: {num_orders}\")\n\n\nTotal number of orders in the period: 4622\n\n:::\n\nStep 16. What is the average revenue amount per order?\n\nurl = 'https://raw.githubusercontent.com/justmarkham/DAT8/master/data/chipotle.tsv'\nchipo = pd.read_csv(url, sep='\\t')\nchipo['item_price'] = chipo['item_price'].apply(lambda x: float(x.replace('\n\n\n\n\n\n\n\n\n\n# Euro12\n\n\n\n\n\n:::{.quarto-embed-nb-cell notebook=\"D:\\code\\jiedan\\12-28\\test1\\labs\\Labexercises\\lab1\\Euro12.ipynb\" notebook-title=\"Ex2 - Filtering and Sorting Data\" notebook-cellId=\"cell-0\"}\n\n# Ex2 - Filtering and Sorting Data\n\nThis time we are going to pull data directly from the internet.\n\n### Step 1. Import the necessary libraries\n\n::: {#cell-2 .cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\n\n\n\nStep 2. Import the dataset from this address.\n\n\nStep 3. Assign it to a variable called euro12.\n\n\neuro12 = pd.read_csv('https://raw.githubusercontent.com/guipsamora/pandas_exercises/master/02_Filtering_%26_Sorting/Euro12/Euro_2012_stats_TEAM.csv')\n\nprint(euro12)\n\n                   Team  Goals  Shots on target  Shots off target  \\\n0               Croatia      4               13                12   \n1        Czech Republic      4               13                18   \n2               Denmark      4               10                10   \n3               England      5               11                18   \n4                France      3               22                24   \n5               Germany     10               32                32   \n6                Greece      5                8                18   \n7                 Italy      6               34                45   \n8           Netherlands      2               12                36   \n9                Poland      2               15                23   \n10             Portugal      6               22                42   \n11  Republic of Ireland      1                7                12   \n12               Russia      5                9                31   \n13                Spain     12               42                33   \n14               Sweden      5               17                19   \n15              Ukraine      2                7                26   \n\n   Shooting Accuracy % Goals-to-shots  Total shots (inc. Blocked)  \\\n0              51.9%            16.0%                          32   \n1              41.9%            12.9%                          39   \n2              50.0%            20.0%                          27   \n3              50.0%            17.2%                          40   \n4              37.9%             6.5%                          65   \n5              47.8%            15.6%                          80   \n6              30.7%            19.2%                          32   \n7              43.0%             7.5%                         110   \n8              25.0%             4.1%                          60   \n9              39.4%             5.2%                          48   \n10             34.3%             9.3%                          82   \n11             36.8%             5.2%                          28   \n12             22.5%            12.5%                          59   \n13             55.9%            16.0%                         100   \n14             47.2%            13.8%                          39   \n15             21.2%             6.0%                          38   \n\n    Hit Woodwork  Penalty goals  Penalties not scored  ...  Saves made  \\\n0              0              0                     0  ...          13   \n1              0              0                     0  ...           9   \n2              1              0                     0  ...          10   \n3              0              0                     0  ...          22   \n4              1              0                     0  ...           6   \n5              2              1                     0  ...          10   \n6              1              1                     1  ...          13   \n7              2              0                     0  ...          20   \n8              2              0                     0  ...          12   \n9              0              0                     0  ...           6   \n10             6              0                     0  ...          10   \n11             0              0                     0  ...          17   \n12             2              0                     0  ...          10   \n13             0              1                     0  ...          15   \n14             3              0                     0  ...           8   \n15             0              0                     0  ...          13   \n\n    Saves-to-shots ratio  Fouls Won Fouls Conceded  Offsides  Yellow Cards  \\\n0                  81.3%         41             62         2             9   \n1                  60.1%         53             73         8             7   \n2                  66.7%         25             38         8             4   \n3                  88.1%         43             45         6             5   \n4                  54.6%         36             51         5             6   \n5                  62.6%         63             49        12             4   \n6                  65.1%         67             48        12             9   \n7                  74.1%        101             89        16            16   \n8                  70.6%         35             30         3             5   \n9                  66.7%         48             56         3             7   \n10                 71.5%         73             90        10            12   \n11                 65.4%         43             51        11             6   \n12                 77.0%         34             43         4             6   \n13                 93.8%        102             83        19            11   \n14                 61.6%         35             51         7             7   \n15                 76.5%         48             31         4             5   \n\n    Red Cards  Subs on  Subs off  Players Used  \n0           0        9         9            16  \n1           0       11        11            19  \n2           0        7         7            15  \n3           0       11        11            16  \n4           0       11        11            19  \n5           0       15        15            17  \n6           1       12        12            20  \n7           0       18        18            19  \n8           0        7         7            15  \n9           1        7         7            17  \n10          0       14        14            16  \n11          1       10        10            17  \n12          0        7         7            16  \n13          0       17        17            18  \n14          0        9         9            18  \n15          0        9         9            18  \n\n[16 rows x 35 columns]\n\n\n\n\nStep 4. Select only the Goal column.\n\ngoals = euro12['Goals']\nprint(goals)\n\n0      4\n1      4\n2      4\n3      5\n4      3\n5     10\n6      5\n7      6\n8      2\n9      2\n10     6\n11     1\n12     5\n13    12\n14     5\n15     2\nName: Goals, dtype: int64\n\n\n\n\nStep 5. How many team participated in the Euro2012?\n\nnum_teams = euro12.shape[0]\nprint(f'Number of teams participated: {num_teams}')\n\nNumber of teams participated: 16\n\n\n\n\nStep 6. What is the number of columns in the dataset?\n\n\neuro12.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 16 entries, 0 to 15\nData columns (total 35 columns):\n #   Column                      Non-Null Count  Dtype  \n---  ------                      --------------  -----  \n 0   Team                        16 non-null     object \n 1   Goals                       16 non-null     int64  \n 2   Shots on target             16 non-null     int64  \n 3   Shots off target            16 non-null     int64  \n 4   Shooting Accuracy           16 non-null     object \n 5   % Goals-to-shots            16 non-null     object \n 6   Total shots (inc. Blocked)  16 non-null     int64  \n 7   Hit Woodwork                16 non-null     int64  \n 8   Penalty goals               16 non-null     int64  \n 9   Penalties not scored        16 non-null     int64  \n 10  Headed goals                16 non-null     int64  \n 11  Passes                      16 non-null     int64  \n 12  Passes completed            16 non-null     int64  \n 13  Passing Accuracy            16 non-null     object \n 14  Touches                     16 non-null     int64  \n 15  Crosses                     16 non-null     int64  \n 16  Dribbles                    16 non-null     int64  \n 17  Corners Taken               16 non-null     int64  \n 18  Tackles                     16 non-null     int64  \n 19  Clearances                  16 non-null     int64  \n 20  Interceptions               16 non-null     int64  \n 21  Clearances off line         15 non-null     float64\n 22  Clean Sheets                16 non-null     int64  \n 23  Blocks                      16 non-null     int64  \n 24  Goals conceded              16 non-null     int64  \n 25  Saves made                  16 non-null     int64  \n 26  Saves-to-shots ratio        16 non-null     object \n 27  Fouls Won                   16 non-null     int64  \n 28  Fouls Conceded              16 non-null     int64  \n 29  Offsides                    16 non-null     int64  \n 30  Yellow Cards                16 non-null     int64  \n 31  Red Cards                   16 non-null     int64  \n 32  Subs on                     16 non-null     int64  \n 33  Subs off                    16 non-null     int64  \n 34  Players Used                16 non-null     int64  \ndtypes: float64(1), int64(29), object(5)\nmemory usage: 4.5+ KB\n\n\n\n\nStep 7. View only the columns Team, Yellow Cards and Red Cards and assign them to a dataframe called discipline\n\ndiscipline = euro12[['Team', 'Yellow Cards', 'Red Cards']]\nprint(discipline)\n\n                   Team  Yellow Cards  Red Cards\n0               Croatia             9          0\n1        Czech Republic             7          0\n2               Denmark             4          0\n3               England             5          0\n4                France             6          0\n5               Germany             4          0\n6                Greece             9          1\n7                 Italy            16          0\n8           Netherlands             5          0\n9                Poland             7          1\n10             Portugal            12          0\n11  Republic of Ireland             6          1\n12               Russia             6          0\n13                Spain            11          0\n14               Sweden             7          0\n15              Ukraine             5          0\n\n\n\n\nStep 8. Sort the teams by Red Cards, then to Yellow Cards\n\nsorted_discipline = discipline.sort_values(by=['Red Cards', 'Yellow Cards'], ascending=[False, False])\nprint(sorted_discipline)\n\n                   Team  Yellow Cards  Red Cards\n6                Greece             9          1\n9                Poland             7          1\n11  Republic of Ireland             6          1\n7                 Italy            16          0\n10             Portugal            12          0\n13                Spain            11          0\n0               Croatia             9          0\n1        Czech Republic             7          0\n14               Sweden             7          0\n4                France             6          0\n12               Russia             6          0\n3               England             5          0\n8           Netherlands             5          0\n15              Ukraine             5          0\n2               Denmark             4          0\n5               Germany             4          0\n\n\n\n\nStep 9. Calculate the mean Yellow Cards given per Team\n\n# Calculate the mean Yellow Cards given per Team and round to 1 decimal place\nmean_yellow_cards = round(euro12['Yellow Cards'].mean(), 1)\n\n# Display the result\nprint(mean_yellow_cards)\n\n\n\n7.4\n\n\n\n\nStep 10. Filter teams that scored more than 6 goals\n\nteams_more_than_6_goals = euro12[euro12['Goals'] &gt; 6]\n\ngermany_spain = teams_more_than_6_goals[teams_more_than_6_goals['Team'].isin(['Germany', 'Spain'])]\n\nprint(germany_spain)\n\n\n       Team  Goals  Shots on target  Shots off target Shooting Accuracy  \\\n5   Germany     10               32                32             47.8%   \n13    Spain     12               42                33             55.9%   \n\n   % Goals-to-shots  Total shots (inc. Blocked)  Hit Woodwork  Penalty goals  \\\n5             15.6%                          80             2              1   \n13            16.0%                         100             0              1   \n\n    Penalties not scored  ...  Saves made  Saves-to-shots ratio  Fouls Won  \\\n5                      0  ...          10                 62.6%         63   \n13                     0  ...          15                 93.8%        102   \n\n   Fouls Conceded  Offsides  Yellow Cards  Red Cards  Subs on  Subs off  \\\n5              49        12             4          0       15        15   \n13             83        19            11          0       17        17   \n\n    Players Used  \n5             17  \n13            18  \n\n[2 rows x 35 columns]\n\n\n\n\nStep 11. Select the teams that start with G\n\nteams_start_with_G = euro12[euro12['Team'].str.startswith('G')]\nprint(teams_start_with_G)\n\n      Team  Goals  Shots on target  Shots off target Shooting Accuracy  \\\n5  Germany     10               32                32             47.8%   \n6   Greece      5                8                18             30.7%   \n\n  % Goals-to-shots  Total shots (inc. Blocked)  Hit Woodwork  Penalty goals  \\\n5            15.6%                          80             2              1   \n6            19.2%                          32             1              1   \n\n   Penalties not scored  ...  Saves made  Saves-to-shots ratio  Fouls Won  \\\n5                     0  ...          10                 62.6%         63   \n6                     1  ...          13                 65.1%         67   \n\n  Fouls Conceded  Offsides  Yellow Cards  Red Cards  Subs on  Subs off  \\\n5             49        12             4          0       15        15   \n6             48        12             9          1       12        12   \n\n   Players Used  \n5            17  \n6            20  \n\n[2 rows x 35 columns]\n\n\n\n\nStep 12. Select the first 7 columns\n\nfirst_7_columns = euro12.iloc[:, :7]\nprint(first_7_columns)\n\n                   Team  Goals  Shots on target  Shots off target  \\\n0               Croatia      4               13                12   \n1        Czech Republic      4               13                18   \n2               Denmark      4               10                10   \n3               England      5               11                18   \n4                France      3               22                24   \n5               Germany     10               32                32   \n6                Greece      5                8                18   \n7                 Italy      6               34                45   \n8           Netherlands      2               12                36   \n9                Poland      2               15                23   \n10             Portugal      6               22                42   \n11  Republic of Ireland      1                7                12   \n12               Russia      5                9                31   \n13                Spain     12               42                33   \n14               Sweden      5               17                19   \n15              Ukraine      2                7                26   \n\n   Shooting Accuracy % Goals-to-shots  Total shots (inc. Blocked)  \n0              51.9%            16.0%                          32  \n1              41.9%            12.9%                          39  \n2              50.0%            20.0%                          27  \n3              50.0%            17.2%                          40  \n4              37.9%             6.5%                          65  \n5              47.8%            15.6%                          80  \n6              30.7%            19.2%                          32  \n7              43.0%             7.5%                         110  \n8              25.0%             4.1%                          60  \n9              39.4%             5.2%                          48  \n10             34.3%             9.3%                          82  \n11             36.8%             5.2%                          28  \n12             22.5%            12.5%                          59  \n13             55.9%            16.0%                         100  \n14             47.2%            13.8%                          39  \n15             21.2%             6.0%                          38  \n\n\n\n\nStep 13. Select all columns except the last 3.\n\ncolumns_excluding_last_3 = euro12.iloc[:, :-3]\nprint(columns_excluding_last_3)\n\n                   Team  Goals  Shots on target  Shots off target  \\\n0               Croatia      4               13                12   \n1        Czech Republic      4               13                18   \n2               Denmark      4               10                10   \n3               England      5               11                18   \n4                France      3               22                24   \n5               Germany     10               32                32   \n6                Greece      5                8                18   \n7                 Italy      6               34                45   \n8           Netherlands      2               12                36   \n9                Poland      2               15                23   \n10             Portugal      6               22                42   \n11  Republic of Ireland      1                7                12   \n12               Russia      5                9                31   \n13                Spain     12               42                33   \n14               Sweden      5               17                19   \n15              Ukraine      2                7                26   \n\n   Shooting Accuracy % Goals-to-shots  Total shots (inc. Blocked)  \\\n0              51.9%            16.0%                          32   \n1              41.9%            12.9%                          39   \n2              50.0%            20.0%                          27   \n3              50.0%            17.2%                          40   \n4              37.9%             6.5%                          65   \n5              47.8%            15.6%                          80   \n6              30.7%            19.2%                          32   \n7              43.0%             7.5%                         110   \n8              25.0%             4.1%                          60   \n9              39.4%             5.2%                          48   \n10             34.3%             9.3%                          82   \n11             36.8%             5.2%                          28   \n12             22.5%            12.5%                          59   \n13             55.9%            16.0%                         100   \n14             47.2%            13.8%                          39   \n15             21.2%             6.0%                          38   \n\n    Hit Woodwork  Penalty goals  Penalties not scored  ...  Clean Sheets  \\\n0              0              0                     0  ...             0   \n1              0              0                     0  ...             1   \n2              1              0                     0  ...             1   \n3              0              0                     0  ...             2   \n4              1              0                     0  ...             1   \n5              2              1                     0  ...             1   \n6              1              1                     1  ...             1   \n7              2              0                     0  ...             2   \n8              2              0                     0  ...             0   \n9              0              0                     0  ...             0   \n10             6              0                     0  ...             2   \n11             0              0                     0  ...             0   \n12             2              0                     0  ...             0   \n13             0              1                     0  ...             5   \n14             3              0                     0  ...             1   \n15             0              0                     0  ...             0   \n\n    Blocks  Goals conceded Saves made  Saves-to-shots ratio  Fouls Won  \\\n0       10               3         13                 81.3%         41   \n1       10               6          9                 60.1%         53   \n2       10               5         10                 66.7%         25   \n3       29               3         22                 88.1%         43   \n4        7               5          6                 54.6%         36   \n5       11               6         10                 62.6%         63   \n6       23               7         13                 65.1%         67   \n7       18               7         20                 74.1%        101   \n8        9               5         12                 70.6%         35   \n9        8               3          6                 66.7%         48   \n10      11               4         10                 71.5%         73   \n11      23               9         17                 65.4%         43   \n12       8               3         10                 77.0%         34   \n13       8               1         15                 93.8%        102   \n14      12               5          8                 61.6%         35   \n15       4               4         13                 76.5%         48   \n\n    Fouls Conceded  Offsides  Yellow Cards  Red Cards  \n0               62         2             9          0  \n1               73         8             7          0  \n2               38         8             4          0  \n3               45         6             5          0  \n4               51         5             6          0  \n5               49        12             4          0  \n6               48        12             9          1  \n7               89        16            16          0  \n8               30         3             5          0  \n9               56         3             7          1  \n10              90        10            12          0  \n11              51        11             6          1  \n12              43         4             6          0  \n13              83        19            11          0  \n14              51         7             7          0  \n15              31         4             5          0  \n\n[16 rows x 32 columns]\n\n\n\n\nStep 14. Present only the Shooting Accuracy from England, Italy and Russia\n\nshooting_accuracy = euro12[euro12['Team'].isin(['England', 'Italy', 'Russia'])][['Team', 'Shooting Accuracy']]\nprint(shooting_accuracy)\n\n       Team Shooting Accuracy\n3   England             50.0%\n7     Italy             43.0%\n12   Russia             22.5%\n\n\n:::\n\n\nOccupation\n\n\nEx3 - Getting and Knowing your Data\nThis time we are going to pull data directly from the internet. Special thanks to: https://github.com/justmarkham for sharing the dataset and materials.\n\nStep 1. Import the necessary libraries\n\nimport pandas as pd\n\n\n\nStep 2. Import the dataset from this address.\n\nurl = 'https://raw.githubusercontent.com/justmarkham/DAT8/master/data/u.user'\n\n\nuser_data = pd.read_csv(url, delimiter='|')\n\n\nprint(user_data.head())\n\n   user_id  age gender  occupation zip_code\n0        1   24      M  technician    85711\n1        2   53      F       other    94043\n2        3   23      M      writer    32067\n3        4   24      M  technician    43537\n4        5   33      F       other    15213\n\n\n\n\nStep 3. Assign it to a variable called users and use the ‘user_id’ as index\n\n\nurl = 'https://raw.githubusercontent.com/justmarkham/DAT8/master/data/u.user'\n\n\nusers = pd.read_csv(url, delimiter='|', index_col='user_id')\n\n\nprint(users.head())\n\n         age gender  occupation zip_code\nuser_id                                 \n1         24      M  technician    85711\n2         53      F       other    94043\n3         23      M      writer    32067\n4         24      M  technician    43537\n5         33      F       other    15213\n\n\n\n\nStep 4. See the first 25 entries\n\n\nprint(users.head(25))\n\n         age gender     occupation zip_code\nuser_id                                    \n1         24      M     technician    85711\n2         53      F          other    94043\n3         23      M         writer    32067\n4         24      M     technician    43537\n5         33      F          other    15213\n6         42      M      executive    98101\n7         57      M  administrator    91344\n8         36      M  administrator    05201\n9         29      M        student    01002\n10        53      M         lawyer    90703\n11        39      F          other    30329\n12        28      F          other    06405\n13        47      M       educator    29206\n14        45      M      scientist    55106\n15        49      F       educator    97301\n16        21      M  entertainment    10309\n17        30      M     programmer    06355\n18        35      F          other    37212\n19        40      M      librarian    02138\n20        42      F      homemaker    95660\n21        26      M         writer    30068\n22        25      M         writer    40206\n23        30      F         artist    48197\n24        21      F         artist    94533\n25        39      M       engineer    55107\n\n\n\n\nStep 5. See the last 10 entries\n\n\nprint(users.tail(10))\n\n         age gender     occupation zip_code\nuser_id                                    \n934       61      M       engineer    22902\n935       42      M         doctor    66221\n936       24      M          other    32789\n937       48      M       educator    98072\n938       38      F     technician    55038\n939       26      F        student    33319\n940       32      M  administrator    02215\n941       20      M        student    97229\n942       48      F      librarian    78209\n943       22      M        student    77841\n\n\n\n\nStep 6. What is the number of observations in the dataset?\n\n# Get the number of observations (rows) in the dataset\nnum_observations = users.shape[0]\n\n# Print the number of observations\nprint(f\"Number of observations in the dataset: {num_observations}\")\n\nNumber of observations in the dataset: 943\n\n\n\n\nStep 7. What is the number of columns in the dataset?\n\n\nnum_columns = users.shape[1]\n\n\nprint(f\"Number of columns in the dataset: {num_columns}\")\n\nNumber of columns in the dataset: 4\n\n\n\n\nStep 8. Print the name of all the columns.\n\n\nprint(users.columns)\n\nIndex(['age', 'gender', 'occupation', 'zip_code'], dtype='object')\n\n\n\n\nStep 9. How is the dataset indexed?\n\n\nprint(users.index)\n\nIndex([  1,   2,   3,   4,   5,   6,   7,   8,   9,  10,\n       ...\n       934, 935, 936, 937, 938, 939, 940, 941, 942, 943],\n      dtype='int64', name='user_id', length=943)\n\n\n\n\nStep 10. What is the data type of each column?\n\n\nprint(users.dtypes)\n\nage            int64\ngender        object\noccupation    object\nzip_code      object\ndtype: object\n\n\n\n\nStep 11. Print only the occupation column\n\n\nprint(users['occupation'])\n\nuser_id\n1         technician\n2              other\n3             writer\n4         technician\n5              other\n           ...      \n939          student\n940    administrator\n941          student\n942        librarian\n943          student\nName: occupation, Length: 943, dtype: object\n\n\n\n\nStep 12. How many different occupations are in this dataset?\n\nnum_occupations = users['occupation'].nunique()\n\nprint(f\"Number of different occupations in the dataset: {num_occupations}\")\n\nNumber of different occupations in the dataset: 21\n\n\n\n\nStep 13. What is the most frequent occupation?\n\nmost_frequent_occupation = users['occupation'].mode()[0]\n\n\nprint(f\"The most frequent occupation in the dataset is: {most_frequent_occupation}\")\n\nThe most frequent occupation in the dataset is: student\n\n\n\n\nStep 14. Summarize the DataFrame.\n\nprint(users.describe())\n\n              age\ncount  943.000000\nmean    34.051962\nstd     12.192740\nmin      7.000000\n25%     25.000000\n50%     31.000000\n75%     43.000000\nmax     73.000000\n\n\n\nprint(users.info())\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nIndex: 943 entries, 1 to 943\nData columns (total 4 columns):\n #   Column      Non-Null Count  Dtype \n---  ------      --------------  ----- \n 0   age         943 non-null    int64 \n 1   gender      943 non-null    object\n 2   occupation  943 non-null    object\n 3   zip_code    943 non-null    object\ndtypes: int64(1), object(3)\nmemory usage: 36.8+ KB\nNone\n\n\n\n\nStep 15. Summarize all the columns\n\nsummary = users.describe(include='all').transpose()\n\n\nprint(summary)\n\n\n\n            count unique      top freq       mean       std  min   25%   50%  \\\nage         943.0    NaN      NaN  NaN  34.051962  12.19274  7.0  25.0  31.0   \ngender        943      2        M  670        NaN       NaN  NaN   NaN   NaN   \noccupation    943     21  student  196        NaN       NaN  NaN   NaN   NaN   \nzip_code      943    795    55414    9        NaN       NaN  NaN   NaN   NaN   \n\n             75%   max  \nage         43.0  73.0  \ngender       NaN   NaN  \noccupation   NaN   NaN  \nzip_code     NaN   NaN  \n\n\n\n\nStep 16. Summarize only the occupation column\n\noccupation_summary = users['occupation'].describe()\n\nprint(occupation_summary)\n\ncount         943\nunique         21\ntop       student\nfreq          196\nName: occupation, dtype: object\n\n\n\n\nStep 17. What is the mean age of users?\n\nmean_age = users['age'].mean()\n\nprint(f\"The mean age of users is: {mean_age}\")\n\nThe mean age of users is: 34.05196182396607\n\n\n\n\nStep 18. What is the age with least occurrence?\n\n\nage_counts = users['age'].value_counts()\n\n\nleast_occurrence_ages = age_counts[age_counts == 1]\n\n\nleast_occurrence_ages.name = 'age'\n\n\nprint(least_occurrence_ages)\n\n\n\n\n\nage\n7     1\n66    1\n11    1\n10    1\n73    1\nName: age, dtype: int64\n\n\n\n\n\nOpen food facts\n\n\nExercise 1\n\nStep 1. Go to https://www.kaggle.com/openfoodfacts/world-food-facts/data\n\n\nStep 2. Download the dataset to your computer and unzip it.\n\nimport pandas as pd\nimport numpy as np\n\n\n\nStep 3. Use the tsv file and assign it to a dataframe called food\n\n\n\nfood  = pd.read_csv('en.openfoodfacts.org.products.tsv.zip', sep='\\t')\n\n\n\nStep 4. See the first 5 entries\n\nfood.head()\n\n\n\n\n\n\n\n\ncode\nurl\ncreator\ncreated_t\ncreated_datetime\nlast_modified_t\nlast_modified_datetime\nproduct_name\ngeneric_name\nquantity\n...\nfruits-vegetables-nuts_100g\nfruits-vegetables-nuts-estimate_100g\ncollagen-meat-protein-ratio_100g\ncocoa_100g\nchlorophyl_100g\ncarbon-footprint_100g\nnutrition-score-fr_100g\nnutrition-score-uk_100g\nglycemic-index_100g\nwater-hardness_100g\n\n\n\n\n0\n3087\nhttp://world-en.openfoodfacts.org/product/0000000003087/farine-de-ble-noir-ferme-t-y-r-nao\nopenfoodfacts-contributors\n1474103866\n2016-09-17T09:17:46Z\n1474103893\n2016-09-17T09:18:13Z\nFarine de blé noir\nNaN\n1kg\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n1\n4530\nhttp://world-en.openfoodfacts.org/product/0000000004530/banana-chips-sweetened-whole\nusda-ndb-import\n1489069957\n2017-03-09T14:32:37Z\n1489069957\n2017-03-09T14:32:37Z\nBanana Chips Sweetened (Whole)\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n14.0\n14.0\nNaN\nNaN\n\n\n2\n4559\nhttp://world-en.openfoodfacts.org/product/0000000004559/peanuts-torn-glasser\nusda-ndb-import\n1489069957\n2017-03-09T14:32:37Z\n1489069957\n2017-03-09T14:32:37Z\nPeanuts\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n0.0\n0.0\nNaN\nNaN\n\n\n3\n16087\nhttp://world-en.openfoodfacts.org/product/0000000016087/organic-salted-nut-mix-grizzlies\nusda-ndb-import\n1489055731\n2017-03-09T10:35:31Z\n1489055731\n2017-03-09T10:35:31Z\nOrganic Salted Nut Mix\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n12.0\n12.0\nNaN\nNaN\n\n\n4\n16094\nhttp://world-en.openfoodfacts.org/product/0000000016094/organic-polenta-bob-s-red-mill\nusda-ndb-import\n1489055653\n2017-03-09T10:34:13Z\n1489055653\n2017-03-09T10:34:13Z\nOrganic Polenta\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n\n\n5 rows × 163 columns\n\n\n\n\n\nStep 5. What is the number of observations in the dataset?\n\nfood.shape\n\n(356027, 163)\n\n\n\nfood.shape[0]\n\n356027\n\n\n\n\nStep 6. What is the number of columns in the dataset?\n\nprint(food.shape)\nprint(food.shape[1])\n\nfood.info()\n\n(356027, 163)\n163\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 356027 entries, 0 to 356026\nColumns: 163 entries, code to water-hardness_100g\ndtypes: float64(107), object(56)\nmemory usage: 442.8+ MB\n\n\n\n\nStep 7. Print the name of all the columns.\n\nfood.columns\n\nIndex(['code', 'url', 'creator', 'created_t', 'created_datetime',\n       'last_modified_t', 'last_modified_datetime', 'product_name',\n       'generic_name', 'quantity',\n       ...\n       'fruits-vegetables-nuts_100g', 'fruits-vegetables-nuts-estimate_100g',\n       'collagen-meat-protein-ratio_100g', 'cocoa_100g', 'chlorophyl_100g',\n       'carbon-footprint_100g', 'nutrition-score-fr_100g',\n       'nutrition-score-uk_100g', 'glycemic-index_100g',\n       'water-hardness_100g'],\n      dtype='object', length=163)\n\n\n\n\nStep 8. What is the name of 105th column?\n\nfood.columns[104]\n\n'-glucose_100g'\n\n\n\n\nStep 9. What is the type of the observations of the 105th column?\n\nfood['-glucose_100g'].dtype\n\ndtype('float64')\n\n\n\n\nStep 10. How is the dataset indexed?\n\nfood.index\n\nRangeIndex(start=0, stop=356027, step=1)\n\n\n\npd.set_option('display.max_colwidth', 300)\n\n\nfood[['code','url']]\n\n\n\n\n\n\n\n\ncode\nurl\n\n\n\n\n0\n3087\nhttp://world-en.openfoodfacts.org/product/0000...\n\n\n1\n4530\nhttp://world-en.openfoodfacts.org/product/0000...\n\n\n2\n4559\nhttp://world-en.openfoodfacts.org/product/0000...\n\n\n3\n16087\nhttp://world-en.openfoodfacts.org/product/0000...\n\n\n4\n16094\nhttp://world-en.openfoodfacts.org/product/0000...\n\n\n...\n...\n...\n\n\n356022\n99567453\nhttp://world-en.openfoodfacts.org/product/9956...\n\n\n356023\n9970229501521\nhttp://world-en.openfoodfacts.org/product/9970...\n\n\n356024\n9977471758307\nhttp://world-en.openfoodfacts.org/product/9977...\n\n\n356025\n9980282863788\nhttp://world-en.openfoodfacts.org/product/9980...\n\n\n356026\n999990026839\nhttp://world-en.openfoodfacts.org/product/9999...\n\n\n\n\n356027 rows × 2 columns\n\n\n\n\n\nStep 11. What is the product name of the 19th observation?\n\nfood.at[18, 'product_name']\n\n'Lotus Organic Brown Jasmine Rice'\n\n\n\n\n\nScores\n\n\nScores\n\nIntroduction:\nThis time you will create the data.\nExercise based on Chris Albon work, the credits belong to him.\n\n\nStep 1. Import the necessary libraries\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\n\nStep 2. Create the DataFrame that should look like the one below.\n\n\ndata = {\n    'first_name': ['Jason', 'Molly', 'Tina', 'Jake', 'Amy'],\n    'last_name': ['Miller', 'Jacobson', 'Ali', 'Milner', 'Cooze'],\n    'age': [42, 52, 36, 24, 73],\n    'female': [0, 1, 1, 0, 1],\n    'preTestScore': [4, 24, 31, 2, 3],\n    'postTestScore': [25, 94, 57, 62, 70]\n}\n\ndf = pd.DataFrame(data)\nprint(df)\n\n  first_name last_name  age  female  preTestScore  postTestScore\n0      Jason    Miller   42       0             4             25\n1      Molly  Jacobson   52       1            24             94\n2       Tina       Ali   36       1            31             57\n3       Jake    Milner   24       0             2             62\n4        Amy     Cooze   73       1             3             70\n\n\n\n\nStep 3. Create a Scatterplot of preTestScore and postTestScore, with the size of each point determined by age\n\nHint: Don’t forget to place the labels\n\nplt.scatter(df['preTestScore'], df['postTestScore'], s=df['age'], alpha=0.5)\n\nplt.xlabel('Pre Test Score')\nplt.ylabel('Post Test Score')\nplt.title('Pre Test Score vs Post Test Score')\n\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\nStep 4. Create a Scatterplot of preTestScore and postTestScore.\n\n\nThis time the size should be 4.5 times the postTestScore and the color determined by sex\n\n\nplt.scatter(df['preTestScore'], df['postTestScore'], \n            s=4.5 * df['postTestScore'], c=df['female'], cmap='coolwarm', alpha=0.5)\n\nplt.xlabel('Pre Test Score')\nplt.ylabel('Post Test Score')\nplt.title('Pre Test Score vs Post Test Score with Size and Color')\n\nplt.show()\n\n\n\n\n\n\n\n\n\n\nBONUS: Create your own question and answer it.\nFind the correlation between preTestScore and postTestScore\n\ncorrelation = df['preTestScore'].corr(df['postTestScore'])\nprint(f\"Correlation between preTestScore and postTestScore: {correlation}\")\n\nCorrelation between preTestScore and postTestScore: 0.37803911777651406\n\n\n\n\n\nVisualizing Chipotle’s Data\n\n\nVisualizing Chipotle’s Data\nThis time we are going to pull data directly from the internet. Special thanks to: https://github.com/justmarkham for sharing the dataset and materials.\n\nStep 1. Import the necessary libraries\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom collections import Counter\n\n\n\nStep 2. Import the dataset from this address.\n\nurl = 'https://raw.githubusercontent.com/justmarkham/DAT8/master/data/chipotle.tsv'\n\n\n\nStep 3. Assign it to a variable called chipo.\n\nchipo = pd.read_csv(url, sep = '\\t')\n\n\n\nStep 4. See the first 10 entries\n\nchipo.head(10)\n\n\n\n\n\n\n\n\norder_id\nquantity\nitem_name\nchoice_description\nitem_price\n\n\n\n\n0\n1\n1\nChips and Fresh Tomato Salsa\nNaN\n$2.39\n\n\n1\n1\n1\nIzze\n[Clementine]\n$3.39\n\n\n2\n1\n1\nNantucket Nectar\n[Apple]\n$3.39\n\n\n3\n1\n1\nChips and Tomatillo-Green Chili Salsa\nNaN\n$2.39\n\n\n4\n2\n2\nChicken Bowl\n[Tomatillo-Red Chili Salsa (Hot), [Black Beans...\n$16.98\n\n\n5\n3\n1\nChicken Bowl\n[Fresh Tomato Salsa (Mild), [Rice, Cheese, Sou...\n$10.98\n\n\n6\n3\n1\nSide of Chips\nNaN\n$1.69\n\n\n7\n4\n1\nSteak Burrito\n[Tomatillo Red Chili Salsa, [Fajita Vegetables...\n$11.75\n\n\n8\n4\n1\nSteak Soft Tacos\n[Tomatillo Green Chili Salsa, [Pinto Beans, Ch...\n$9.25\n\n\n9\n5\n1\nSteak Burrito\n[Fresh Tomato Salsa, [Rice, Black Beans, Pinto...\n$9.25\n\n\n\n\n\n\n\n\n\nStep 5. Create a histogram of the top 5 items bought\n\nx = chipo.item_name\n\nletter_counts = Counter(x)\n\ndf = pd.DataFrame.from_dict(letter_counts, orient='index')\n\ndf = df[0].sort_values(ascending = True)[45:50]\n\ndf.plot(kind='bar')\n\nplt.xlabel('Items')\nplt.ylabel('Number of Times Ordered')\nplt.title('Most ordered Chipotle\\'s Items')\n\nplt.show()\n\n\n\n\n\n\n\n\n\n\nStep 6. Create a scatterplot with the number of items orderered per order price\n\nHint: Price should be in the X-axis and Items ordered in the Y-axis\n\nchipo.item_price = [float(value[1:-1]) for value in chipo.item_price] # strip the dollar sign and trailing space\n\norders = chipo.groupby('order_id').sum()\n\nplt.scatter(x = orders.item_price, y = orders.quantity, s = 50, c = 'green')\n\nplt.xlabel('Order Price')\nplt.ylabel('Items ordered')\nplt.title('Number of items ordered per order price')\nplt.ylim(0)\n\n\n\n\n\n\n\n\n\n\n\nStep 7. BONUS: Create a question and a graph to answer your own question.\nWhich menu items have the highest unit prices and how do the number of orders for these menu items vary?\n\nurl = 'https://raw.githubusercontent.com/justmarkham/DAT8/master/data/chipotle.tsv'\nchipo = pd.read_csv(url, sep = '\\t')\n\nchipo.item_price = [float(value[1:-1]) for value in chipo.item_price]\n\nmost_expensive_items = chipo.groupby('item_name').item_price.mean().sort_values(ascending=False).head(10)\n\ntop_items = chipo[chipo['item_name'].isin(most_expensive_items.index)]\nitem_order_counts = top_items.groupby('item_name')['quantity'].sum()\n\nfig, ax = plt.subplots(figsize=(10, 6))\nitem_order_counts.plot(kind='bar', ax=ax, color='skyblue')\n\nax.set_xlabel('Menu Item')\nax.set_ylabel('Total Quantity Ordered')\nax.set_title('Top 10 Most Expensive Menu Items and Their Order Quantities')\n\nplt.xticks(rotation=45, ha=\"right\")\nplt.show()\n\n\n\n\n\n\n\n\n\n\n, ’’))) chipo[‘revenue’] = chipo[‘item_price’] * chipo[‘quantity’] total_revenue = chipo[‘revenue’].sum() num_orders = chipo.shape[0] average_revenue_per_order = total_revenue / num_orders print(f”Average revenue per order: ${average_revenue_per_order:.2f}“)\n\n::: {.cell-output .cell-output-stdout}\nAverage revenue per order: $8.49\n:::\n:::\n\n\n### Step 17. How many different items are sold?\n\n::: {#cell-40 .cell execution_count=20}\n``` {.python .cell-code}\nurl = 'https://raw.githubusercontent.com/justmarkham/DAT8/master/data/chipotle.tsv'\nchipo = pd.read_csv(url, sep='\\t')\nnum_different_items = chipo['item_name'].nunique()\nprint(f\"Number of different items sold: {num_different_items}\")\n\n\nNumber of different items sold: 50\n\n:::\n:::\n\nEuro12\n\n\nEx2 - Filtering and Sorting Data\nThis time we are going to pull data directly from the internet.\n\nStep 1. Import the necessary libraries\n\nimport pandas as pd\n\n\n\nStep 2. Import the dataset from this address.\n\n\nStep 3. Assign it to a variable called euro12.\n\n\neuro12 = pd.read_csv('https://raw.githubusercontent.com/guipsamora/pandas_exercises/master/02_Filtering_%26_Sorting/Euro12/Euro_2012_stats_TEAM.csv')\n\nprint(euro12)\n\n                   Team  Goals  Shots on target  Shots off target  \\\n0               Croatia      4               13                12   \n1        Czech Republic      4               13                18   \n2               Denmark      4               10                10   \n3               England      5               11                18   \n4                France      3               22                24   \n5               Germany     10               32                32   \n6                Greece      5                8                18   \n7                 Italy      6               34                45   \n8           Netherlands      2               12                36   \n9                Poland      2               15                23   \n10             Portugal      6               22                42   \n11  Republic of Ireland      1                7                12   \n12               Russia      5                9                31   \n13                Spain     12               42                33   \n14               Sweden      5               17                19   \n15              Ukraine      2                7                26   \n\n   Shooting Accuracy % Goals-to-shots  Total shots (inc. Blocked)  \\\n0              51.9%            16.0%                          32   \n1              41.9%            12.9%                          39   \n2              50.0%            20.0%                          27   \n3              50.0%            17.2%                          40   \n4              37.9%             6.5%                          65   \n5              47.8%            15.6%                          80   \n6              30.7%            19.2%                          32   \n7              43.0%             7.5%                         110   \n8              25.0%             4.1%                          60   \n9              39.4%             5.2%                          48   \n10             34.3%             9.3%                          82   \n11             36.8%             5.2%                          28   \n12             22.5%            12.5%                          59   \n13             55.9%            16.0%                         100   \n14             47.2%            13.8%                          39   \n15             21.2%             6.0%                          38   \n\n    Hit Woodwork  Penalty goals  Penalties not scored  ...  Saves made  \\\n0              0              0                     0  ...          13   \n1              0              0                     0  ...           9   \n2              1              0                     0  ...          10   \n3              0              0                     0  ...          22   \n4              1              0                     0  ...           6   \n5              2              1                     0  ...          10   \n6              1              1                     1  ...          13   \n7              2              0                     0  ...          20   \n8              2              0                     0  ...          12   \n9              0              0                     0  ...           6   \n10             6              0                     0  ...          10   \n11             0              0                     0  ...          17   \n12             2              0                     0  ...          10   \n13             0              1                     0  ...          15   \n14             3              0                     0  ...           8   \n15             0              0                     0  ...          13   \n\n    Saves-to-shots ratio  Fouls Won Fouls Conceded  Offsides  Yellow Cards  \\\n0                  81.3%         41             62         2             9   \n1                  60.1%         53             73         8             7   \n2                  66.7%         25             38         8             4   \n3                  88.1%         43             45         6             5   \n4                  54.6%         36             51         5             6   \n5                  62.6%         63             49        12             4   \n6                  65.1%         67             48        12             9   \n7                  74.1%        101             89        16            16   \n8                  70.6%         35             30         3             5   \n9                  66.7%         48             56         3             7   \n10                 71.5%         73             90        10            12   \n11                 65.4%         43             51        11             6   \n12                 77.0%         34             43         4             6   \n13                 93.8%        102             83        19            11   \n14                 61.6%         35             51         7             7   \n15                 76.5%         48             31         4             5   \n\n    Red Cards  Subs on  Subs off  Players Used  \n0           0        9         9            16  \n1           0       11        11            19  \n2           0        7         7            15  \n3           0       11        11            16  \n4           0       11        11            19  \n5           0       15        15            17  \n6           1       12        12            20  \n7           0       18        18            19  \n8           0        7         7            15  \n9           1        7         7            17  \n10          0       14        14            16  \n11          1       10        10            17  \n12          0        7         7            16  \n13          0       17        17            18  \n14          0        9         9            18  \n15          0        9         9            18  \n\n[16 rows x 35 columns]\n\n\n\n\nStep 4. Select only the Goal column.\n\ngoals = euro12['Goals']\nprint(goals)\n\n0      4\n1      4\n2      4\n3      5\n4      3\n5     10\n6      5\n7      6\n8      2\n9      2\n10     6\n11     1\n12     5\n13    12\n14     5\n15     2\nName: Goals, dtype: int64\n\n\n\n\nStep 5. How many team participated in the Euro2012?\n\nnum_teams = euro12.shape[0]\nprint(f'Number of teams participated: {num_teams}')\n\nNumber of teams participated: 16\n\n\n\n\nStep 6. What is the number of columns in the dataset?\n\n\neuro12.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 16 entries, 0 to 15\nData columns (total 35 columns):\n #   Column                      Non-Null Count  Dtype  \n---  ------                      --------------  -----  \n 0   Team                        16 non-null     object \n 1   Goals                       16 non-null     int64  \n 2   Shots on target             16 non-null     int64  \n 3   Shots off target            16 non-null     int64  \n 4   Shooting Accuracy           16 non-null     object \n 5   % Goals-to-shots            16 non-null     object \n 6   Total shots (inc. Blocked)  16 non-null     int64  \n 7   Hit Woodwork                16 non-null     int64  \n 8   Penalty goals               16 non-null     int64  \n 9   Penalties not scored        16 non-null     int64  \n 10  Headed goals                16 non-null     int64  \n 11  Passes                      16 non-null     int64  \n 12  Passes completed            16 non-null     int64  \n 13  Passing Accuracy            16 non-null     object \n 14  Touches                     16 non-null     int64  \n 15  Crosses                     16 non-null     int64  \n 16  Dribbles                    16 non-null     int64  \n 17  Corners Taken               16 non-null     int64  \n 18  Tackles                     16 non-null     int64  \n 19  Clearances                  16 non-null     int64  \n 20  Interceptions               16 non-null     int64  \n 21  Clearances off line         15 non-null     float64\n 22  Clean Sheets                16 non-null     int64  \n 23  Blocks                      16 non-null     int64  \n 24  Goals conceded              16 non-null     int64  \n 25  Saves made                  16 non-null     int64  \n 26  Saves-to-shots ratio        16 non-null     object \n 27  Fouls Won                   16 non-null     int64  \n 28  Fouls Conceded              16 non-null     int64  \n 29  Offsides                    16 non-null     int64  \n 30  Yellow Cards                16 non-null     int64  \n 31  Red Cards                   16 non-null     int64  \n 32  Subs on                     16 non-null     int64  \n 33  Subs off                    16 non-null     int64  \n 34  Players Used                16 non-null     int64  \ndtypes: float64(1), int64(29), object(5)\nmemory usage: 4.5+ KB\n\n\n\n\nStep 7. View only the columns Team, Yellow Cards and Red Cards and assign them to a dataframe called discipline\n\ndiscipline = euro12[['Team', 'Yellow Cards', 'Red Cards']]\nprint(discipline)\n\n                   Team  Yellow Cards  Red Cards\n0               Croatia             9          0\n1        Czech Republic             7          0\n2               Denmark             4          0\n3               England             5          0\n4                France             6          0\n5               Germany             4          0\n6                Greece             9          1\n7                 Italy            16          0\n8           Netherlands             5          0\n9                Poland             7          1\n10             Portugal            12          0\n11  Republic of Ireland             6          1\n12               Russia             6          0\n13                Spain            11          0\n14               Sweden             7          0\n15              Ukraine             5          0\n\n\n\n\nStep 8. Sort the teams by Red Cards, then to Yellow Cards\n\nsorted_discipline = discipline.sort_values(by=['Red Cards', 'Yellow Cards'], ascending=[False, False])\nprint(sorted_discipline)\n\n                   Team  Yellow Cards  Red Cards\n6                Greece             9          1\n9                Poland             7          1\n11  Republic of Ireland             6          1\n7                 Italy            16          0\n10             Portugal            12          0\n13                Spain            11          0\n0               Croatia             9          0\n1        Czech Republic             7          0\n14               Sweden             7          0\n4                France             6          0\n12               Russia             6          0\n3               England             5          0\n8           Netherlands             5          0\n15              Ukraine             5          0\n2               Denmark             4          0\n5               Germany             4          0\n\n\n\n\nStep 9. Calculate the mean Yellow Cards given per Team\n\n# Calculate the mean Yellow Cards given per Team and round to 1 decimal place\nmean_yellow_cards = round(euro12['Yellow Cards'].mean(), 1)\n\n# Display the result\nprint(mean_yellow_cards)\n\n\n\n7.4\n\n\n\n\nStep 10. Filter teams that scored more than 6 goals\n\nteams_more_than_6_goals = euro12[euro12['Goals'] &gt; 6]\n\ngermany_spain = teams_more_than_6_goals[teams_more_than_6_goals['Team'].isin(['Germany', 'Spain'])]\n\nprint(germany_spain)\n\n\n       Team  Goals  Shots on target  Shots off target Shooting Accuracy  \\\n5   Germany     10               32                32             47.8%   \n13    Spain     12               42                33             55.9%   \n\n   % Goals-to-shots  Total shots (inc. Blocked)  Hit Woodwork  Penalty goals  \\\n5             15.6%                          80             2              1   \n13            16.0%                         100             0              1   \n\n    Penalties not scored  ...  Saves made  Saves-to-shots ratio  Fouls Won  \\\n5                      0  ...          10                 62.6%         63   \n13                     0  ...          15                 93.8%        102   \n\n   Fouls Conceded  Offsides  Yellow Cards  Red Cards  Subs on  Subs off  \\\n5              49        12             4          0       15        15   \n13             83        19            11          0       17        17   \n\n    Players Used  \n5             17  \n13            18  \n\n[2 rows x 35 columns]\n\n\n\n\nStep 11. Select the teams that start with G\n\nteams_start_with_G = euro12[euro12['Team'].str.startswith('G')]\nprint(teams_start_with_G)\n\n      Team  Goals  Shots on target  Shots off target Shooting Accuracy  \\\n5  Germany     10               32                32             47.8%   \n6   Greece      5                8                18             30.7%   \n\n  % Goals-to-shots  Total shots (inc. Blocked)  Hit Woodwork  Penalty goals  \\\n5            15.6%                          80             2              1   \n6            19.2%                          32             1              1   \n\n   Penalties not scored  ...  Saves made  Saves-to-shots ratio  Fouls Won  \\\n5                     0  ...          10                 62.6%         63   \n6                     1  ...          13                 65.1%         67   \n\n  Fouls Conceded  Offsides  Yellow Cards  Red Cards  Subs on  Subs off  \\\n5             49        12             4          0       15        15   \n6             48        12             9          1       12        12   \n\n   Players Used  \n5            17  \n6            20  \n\n[2 rows x 35 columns]\n\n\n\n\nStep 12. Select the first 7 columns\n\nfirst_7_columns = euro12.iloc[:, :7]\nprint(first_7_columns)\n\n                   Team  Goals  Shots on target  Shots off target  \\\n0               Croatia      4               13                12   \n1        Czech Republic      4               13                18   \n2               Denmark      4               10                10   \n3               England      5               11                18   \n4                France      3               22                24   \n5               Germany     10               32                32   \n6                Greece      5                8                18   \n7                 Italy      6               34                45   \n8           Netherlands      2               12                36   \n9                Poland      2               15                23   \n10             Portugal      6               22                42   \n11  Republic of Ireland      1                7                12   \n12               Russia      5                9                31   \n13                Spain     12               42                33   \n14               Sweden      5               17                19   \n15              Ukraine      2                7                26   \n\n   Shooting Accuracy % Goals-to-shots  Total shots (inc. Blocked)  \n0              51.9%            16.0%                          32  \n1              41.9%            12.9%                          39  \n2              50.0%            20.0%                          27  \n3              50.0%            17.2%                          40  \n4              37.9%             6.5%                          65  \n5              47.8%            15.6%                          80  \n6              30.7%            19.2%                          32  \n7              43.0%             7.5%                         110  \n8              25.0%             4.1%                          60  \n9              39.4%             5.2%                          48  \n10             34.3%             9.3%                          82  \n11             36.8%             5.2%                          28  \n12             22.5%            12.5%                          59  \n13             55.9%            16.0%                         100  \n14             47.2%            13.8%                          39  \n15             21.2%             6.0%                          38  \n\n\n\n\nStep 13. Select all columns except the last 3.\n\ncolumns_excluding_last_3 = euro12.iloc[:, :-3]\nprint(columns_excluding_last_3)\n\n                   Team  Goals  Shots on target  Shots off target  \\\n0               Croatia      4               13                12   \n1        Czech Republic      4               13                18   \n2               Denmark      4               10                10   \n3               England      5               11                18   \n4                France      3               22                24   \n5               Germany     10               32                32   \n6                Greece      5                8                18   \n7                 Italy      6               34                45   \n8           Netherlands      2               12                36   \n9                Poland      2               15                23   \n10             Portugal      6               22                42   \n11  Republic of Ireland      1                7                12   \n12               Russia      5                9                31   \n13                Spain     12               42                33   \n14               Sweden      5               17                19   \n15              Ukraine      2                7                26   \n\n   Shooting Accuracy % Goals-to-shots  Total shots (inc. Blocked)  \\\n0              51.9%            16.0%                          32   \n1              41.9%            12.9%                          39   \n2              50.0%            20.0%                          27   \n3              50.0%            17.2%                          40   \n4              37.9%             6.5%                          65   \n5              47.8%            15.6%                          80   \n6              30.7%            19.2%                          32   \n7              43.0%             7.5%                         110   \n8              25.0%             4.1%                          60   \n9              39.4%             5.2%                          48   \n10             34.3%             9.3%                          82   \n11             36.8%             5.2%                          28   \n12             22.5%            12.5%                          59   \n13             55.9%            16.0%                         100   \n14             47.2%            13.8%                          39   \n15             21.2%             6.0%                          38   \n\n    Hit Woodwork  Penalty goals  Penalties not scored  ...  Clean Sheets  \\\n0              0              0                     0  ...             0   \n1              0              0                     0  ...             1   \n2              1              0                     0  ...             1   \n3              0              0                     0  ...             2   \n4              1              0                     0  ...             1   \n5              2              1                     0  ...             1   \n6              1              1                     1  ...             1   \n7              2              0                     0  ...             2   \n8              2              0                     0  ...             0   \n9              0              0                     0  ...             0   \n10             6              0                     0  ...             2   \n11             0              0                     0  ...             0   \n12             2              0                     0  ...             0   \n13             0              1                     0  ...             5   \n14             3              0                     0  ...             1   \n15             0              0                     0  ...             0   \n\n    Blocks  Goals conceded Saves made  Saves-to-shots ratio  Fouls Won  \\\n0       10               3         13                 81.3%         41   \n1       10               6          9                 60.1%         53   \n2       10               5         10                 66.7%         25   \n3       29               3         22                 88.1%         43   \n4        7               5          6                 54.6%         36   \n5       11               6         10                 62.6%         63   \n6       23               7         13                 65.1%         67   \n7       18               7         20                 74.1%        101   \n8        9               5         12                 70.6%         35   \n9        8               3          6                 66.7%         48   \n10      11               4         10                 71.5%         73   \n11      23               9         17                 65.4%         43   \n12       8               3         10                 77.0%         34   \n13       8               1         15                 93.8%        102   \n14      12               5          8                 61.6%         35   \n15       4               4         13                 76.5%         48   \n\n    Fouls Conceded  Offsides  Yellow Cards  Red Cards  \n0               62         2             9          0  \n1               73         8             7          0  \n2               38         8             4          0  \n3               45         6             5          0  \n4               51         5             6          0  \n5               49        12             4          0  \n6               48        12             9          1  \n7               89        16            16          0  \n8               30         3             5          0  \n9               56         3             7          1  \n10              90        10            12          0  \n11              51        11             6          1  \n12              43         4             6          0  \n13              83        19            11          0  \n14              51         7             7          0  \n15              31         4             5          0  \n\n[16 rows x 32 columns]\n\n\n\n\nStep 14. Present only the Shooting Accuracy from England, Italy and Russia\n\nshooting_accuracy = euro12[euro12['Team'].isin(['England', 'Italy', 'Russia'])][['Team', 'Shooting Accuracy']]\nprint(shooting_accuracy)\n\n       Team Shooting Accuracy\n3   England             50.0%\n7     Italy             43.0%\n12   Russia             22.5%\n\n\n\nSource: Ex2 - Filtering and Sorting Data\n\nOccupation\n\n\nEx3 - Getting and Knowing your Data\nThis time we are going to pull data directly from the internet. Special thanks to: https://github.com/justmarkham for sharing the dataset and materials.\n\nStep 1. Import the necessary libraries\n\nimport pandas as pd\n\n\n\nStep 2. Import the dataset from this address.\n\nurl = 'https://raw.githubusercontent.com/justmarkham/DAT8/master/data/u.user'\n\n\nuser_data = pd.read_csv(url, delimiter='|')\n\n\nprint(user_data.head())\n\n   user_id  age gender  occupation zip_code\n0        1   24      M  technician    85711\n1        2   53      F       other    94043\n2        3   23      M      writer    32067\n3        4   24      M  technician    43537\n4        5   33      F       other    15213\n\n\n\n\nStep 3. Assign it to a variable called users and use the ‘user_id’ as index\n\n\nurl = 'https://raw.githubusercontent.com/justmarkham/DAT8/master/data/u.user'\n\n\nusers = pd.read_csv(url, delimiter='|', index_col='user_id')\n\n\nprint(users.head())\n\n         age gender  occupation zip_code\nuser_id                                 \n1         24      M  technician    85711\n2         53      F       other    94043\n3         23      M      writer    32067\n4         24      M  technician    43537\n5         33      F       other    15213\n\n\n\n\nStep 4. See the first 25 entries\n\n\nprint(users.head(25))\n\n         age gender     occupation zip_code\nuser_id                                    \n1         24      M     technician    85711\n2         53      F          other    94043\n3         23      M         writer    32067\n4         24      M     technician    43537\n5         33      F          other    15213\n6         42      M      executive    98101\n7         57      M  administrator    91344\n8         36      M  administrator    05201\n9         29      M        student    01002\n10        53      M         lawyer    90703\n11        39      F          other    30329\n12        28      F          other    06405\n13        47      M       educator    29206\n14        45      M      scientist    55106\n15        49      F       educator    97301\n16        21      M  entertainment    10309\n17        30      M     programmer    06355\n18        35      F          other    37212\n19        40      M      librarian    02138\n20        42      F      homemaker    95660\n21        26      M         writer    30068\n22        25      M         writer    40206\n23        30      F         artist    48197\n24        21      F         artist    94533\n25        39      M       engineer    55107\n\n\n\n\nStep 5. See the last 10 entries\n\n\nprint(users.tail(10))\n\n         age gender     occupation zip_code\nuser_id                                    \n934       61      M       engineer    22902\n935       42      M         doctor    66221\n936       24      M          other    32789\n937       48      M       educator    98072\n938       38      F     technician    55038\n939       26      F        student    33319\n940       32      M  administrator    02215\n941       20      M        student    97229\n942       48      F      librarian    78209\n943       22      M        student    77841\n\n\n\n\nStep 6. What is the number of observations in the dataset?\n\n# Get the number of observations (rows) in the dataset\nnum_observations = users.shape[0]\n\n# Print the number of observations\nprint(f\"Number of observations in the dataset: {num_observations}\")\n\nNumber of observations in the dataset: 943\n\n\n\n\nStep 7. What is the number of columns in the dataset?\n\n\nnum_columns = users.shape[1]\n\n\nprint(f\"Number of columns in the dataset: {num_columns}\")\n\nNumber of columns in the dataset: 4\n\n\n\n\nStep 8. Print the name of all the columns.\n\n\nprint(users.columns)\n\nIndex(['age', 'gender', 'occupation', 'zip_code'], dtype='object')\n\n\n\n\nStep 9. How is the dataset indexed?\n\n\nprint(users.index)\n\nIndex([  1,   2,   3,   4,   5,   6,   7,   8,   9,  10,\n       ...\n       934, 935, 936, 937, 938, 939, 940, 941, 942, 943],\n      dtype='int64', name='user_id', length=943)\n\n\n\n\nStep 10. What is the data type of each column?\n\n\nprint(users.dtypes)\n\nage            int64\ngender        object\noccupation    object\nzip_code      object\ndtype: object\n\n\n\n\nStep 11. Print only the occupation column\n\n\nprint(users['occupation'])\n\nuser_id\n1         technician\n2              other\n3             writer\n4         technician\n5              other\n           ...      \n939          student\n940    administrator\n941          student\n942        librarian\n943          student\nName: occupation, Length: 943, dtype: object\n\n\n\n\nStep 12. How many different occupations are in this dataset?\n\nnum_occupations = users['occupation'].nunique()\n\nprint(f\"Number of different occupations in the dataset: {num_occupations}\")\n\nNumber of different occupations in the dataset: 21\n\n\n\n\nStep 13. What is the most frequent occupation?\n\nmost_frequent_occupation = users['occupation'].mode()[0]\n\n\nprint(f\"The most frequent occupation in the dataset is: {most_frequent_occupation}\")\n\nThe most frequent occupation in the dataset is: student\n\n\n\n\nStep 14. Summarize the DataFrame.\n\nprint(users.describe())\n\n              age\ncount  943.000000\nmean    34.051962\nstd     12.192740\nmin      7.000000\n25%     25.000000\n50%     31.000000\n75%     43.000000\nmax     73.000000\n\n\n\nprint(users.info())\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nIndex: 943 entries, 1 to 943\nData columns (total 4 columns):\n #   Column      Non-Null Count  Dtype \n---  ------      --------------  ----- \n 0   age         943 non-null    int64 \n 1   gender      943 non-null    object\n 2   occupation  943 non-null    object\n 3   zip_code    943 non-null    object\ndtypes: int64(1), object(3)\nmemory usage: 36.8+ KB\nNone\n\n\n\n\nStep 15. Summarize all the columns\n\nsummary = users.describe(include='all').transpose()\n\n\nprint(summary)\n\n\n\n            count unique      top freq       mean       std  min   25%   50%  \\\nage         943.0    NaN      NaN  NaN  34.051962  12.19274  7.0  25.0  31.0   \ngender        943      2        M  670        NaN       NaN  NaN   NaN   NaN   \noccupation    943     21  student  196        NaN       NaN  NaN   NaN   NaN   \nzip_code      943    795    55414    9        NaN       NaN  NaN   NaN   NaN   \n\n             75%   max  \nage         43.0  73.0  \ngender       NaN   NaN  \noccupation   NaN   NaN  \nzip_code     NaN   NaN  \n\n\n\n\nStep 16. Summarize only the occupation column\n\noccupation_summary = users['occupation'].describe()\n\nprint(occupation_summary)\n\ncount         943\nunique         21\ntop       student\nfreq          196\nName: occupation, dtype: object\n\n\n\n\nStep 17. What is the mean age of users?\n\nmean_age = users['age'].mean()\n\nprint(f\"The mean age of users is: {mean_age}\")\n\nThe mean age of users is: 34.05196182396607\n\n\n\n\nStep 18. What is the age with least occurrence?\n\n\nage_counts = users['age'].value_counts()\n\n\nleast_occurrence_ages = age_counts[age_counts == 1]\n\n\nleast_occurrence_ages.name = 'age'\n\n\nprint(least_occurrence_ages)\n\n\n\n\n\nage\n7     1\n66    1\n11    1\n10    1\n73    1\nName: age, dtype: int64\n\n\n\n\n\nOpen food facts\n\n\nExercise 1\n\nStep 1. Go to https://www.kaggle.com/openfoodfacts/world-food-facts/data\n\n\nStep 2. Download the dataset to your computer and unzip it.\n\nimport pandas as pd\nimport numpy as np\n\n\n\nStep 3. Use the tsv file and assign it to a dataframe called food\n\n\n\nfood  = pd.read_csv('en.openfoodfacts.org.products.tsv.zip', sep='\\t')\n\n\n\nStep 4. See the first 5 entries\n\nfood.head()\n\n\n\n\n\n\n\n\ncode\nurl\ncreator\ncreated_t\ncreated_datetime\nlast_modified_t\nlast_modified_datetime\nproduct_name\ngeneric_name\nquantity\n...\nfruits-vegetables-nuts_100g\nfruits-vegetables-nuts-estimate_100g\ncollagen-meat-protein-ratio_100g\ncocoa_100g\nchlorophyl_100g\ncarbon-footprint_100g\nnutrition-score-fr_100g\nnutrition-score-uk_100g\nglycemic-index_100g\nwater-hardness_100g\n\n\n\n\n0\n3087\nhttp://world-en.openfoodfacts.org/product/0000000003087/farine-de-ble-noir-ferme-t-y-r-nao\nopenfoodfacts-contributors\n1474103866\n2016-09-17T09:17:46Z\n1474103893\n2016-09-17T09:18:13Z\nFarine de blé noir\nNaN\n1kg\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n1\n4530\nhttp://world-en.openfoodfacts.org/product/0000000004530/banana-chips-sweetened-whole\nusda-ndb-import\n1489069957\n2017-03-09T14:32:37Z\n1489069957\n2017-03-09T14:32:37Z\nBanana Chips Sweetened (Whole)\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n14.0\n14.0\nNaN\nNaN\n\n\n2\n4559\nhttp://world-en.openfoodfacts.org/product/0000000004559/peanuts-torn-glasser\nusda-ndb-import\n1489069957\n2017-03-09T14:32:37Z\n1489069957\n2017-03-09T14:32:37Z\nPeanuts\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n0.0\n0.0\nNaN\nNaN\n\n\n3\n16087\nhttp://world-en.openfoodfacts.org/product/0000000016087/organic-salted-nut-mix-grizzlies\nusda-ndb-import\n1489055731\n2017-03-09T10:35:31Z\n1489055731\n2017-03-09T10:35:31Z\nOrganic Salted Nut Mix\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n12.0\n12.0\nNaN\nNaN\n\n\n4\n16094\nhttp://world-en.openfoodfacts.org/product/0000000016094/organic-polenta-bob-s-red-mill\nusda-ndb-import\n1489055653\n2017-03-09T10:34:13Z\n1489055653\n2017-03-09T10:34:13Z\nOrganic Polenta\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n\n\n5 rows × 163 columns\n\n\n\n\n\nStep 5. What is the number of observations in the dataset?\n\nfood.shape\n\n(356027, 163)\n\n\n\nfood.shape[0]\n\n356027\n\n\n\n\nStep 6. What is the number of columns in the dataset?\n\nprint(food.shape)\nprint(food.shape[1])\n\nfood.info()\n\n(356027, 163)\n163\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 356027 entries, 0 to 356026\nColumns: 163 entries, code to water-hardness_100g\ndtypes: float64(107), object(56)\nmemory usage: 442.8+ MB\n\n\n\n\nStep 7. Print the name of all the columns.\n\nfood.columns\n\nIndex(['code', 'url', 'creator', 'created_t', 'created_datetime',\n       'last_modified_t', 'last_modified_datetime', 'product_name',\n       'generic_name', 'quantity',\n       ...\n       'fruits-vegetables-nuts_100g', 'fruits-vegetables-nuts-estimate_100g',\n       'collagen-meat-protein-ratio_100g', 'cocoa_100g', 'chlorophyl_100g',\n       'carbon-footprint_100g', 'nutrition-score-fr_100g',\n       'nutrition-score-uk_100g', 'glycemic-index_100g',\n       'water-hardness_100g'],\n      dtype='object', length=163)\n\n\n\n\nStep 8. What is the name of 105th column?\n\nfood.columns[104]\n\n'-glucose_100g'\n\n\n\n\nStep 9. What is the type of the observations of the 105th column?\n\nfood['-glucose_100g'].dtype\n\ndtype('float64')\n\n\n\n\nStep 10. How is the dataset indexed?\n\nfood.index\n\nRangeIndex(start=0, stop=356027, step=1)\n\n\n\npd.set_option('display.max_colwidth', 300)\n\n\nfood[['code','url']]\n\n\n\n\n\n\n\n\ncode\nurl\n\n\n\n\n0\n3087\nhttp://world-en.openfoodfacts.org/product/0000...\n\n\n1\n4530\nhttp://world-en.openfoodfacts.org/product/0000...\n\n\n2\n4559\nhttp://world-en.openfoodfacts.org/product/0000...\n\n\n3\n16087\nhttp://world-en.openfoodfacts.org/product/0000...\n\n\n4\n16094\nhttp://world-en.openfoodfacts.org/product/0000...\n\n\n...\n...\n...\n\n\n356022\n99567453\nhttp://world-en.openfoodfacts.org/product/9956...\n\n\n356023\n9970229501521\nhttp://world-en.openfoodfacts.org/product/9970...\n\n\n356024\n9977471758307\nhttp://world-en.openfoodfacts.org/product/9977...\n\n\n356025\n9980282863788\nhttp://world-en.openfoodfacts.org/product/9980...\n\n\n356026\n999990026839\nhttp://world-en.openfoodfacts.org/product/9999...\n\n\n\n\n356027 rows × 2 columns\n\n\n\n\n\nStep 11. What is the product name of the 19th observation?\n\nfood.at[18, 'product_name']\n\n'Lotus Organic Brown Jasmine Rice'\n\n\n\n\n\nScores\n\n\nScores\n\nIntroduction:\nThis time you will create the data.\nExercise based on Chris Albon work, the credits belong to him.\n\n\nStep 1. Import the necessary libraries\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\n\nStep 2. Create the DataFrame that should look like the one below.\n\n\ndata = {\n    'first_name': ['Jason', 'Molly', 'Tina', 'Jake', 'Amy'],\n    'last_name': ['Miller', 'Jacobson', 'Ali', 'Milner', 'Cooze'],\n    'age': [42, 52, 36, 24, 73],\n    'female': [0, 1, 1, 0, 1],\n    'preTestScore': [4, 24, 31, 2, 3],\n    'postTestScore': [25, 94, 57, 62, 70]\n}\n\ndf = pd.DataFrame(data)\nprint(df)\n\n  first_name last_name  age  female  preTestScore  postTestScore\n0      Jason    Miller   42       0             4             25\n1      Molly  Jacobson   52       1            24             94\n2       Tina       Ali   36       1            31             57\n3       Jake    Milner   24       0             2             62\n4        Amy     Cooze   73       1             3             70\n\n\n\n\nStep 3. Create a Scatterplot of preTestScore and postTestScore, with the size of each point determined by age\n\nHint: Don’t forget to place the labels\n\nplt.scatter(df['preTestScore'], df['postTestScore'], s=df['age'], alpha=0.5)\n\nplt.xlabel('Pre Test Score')\nplt.ylabel('Post Test Score')\nplt.title('Pre Test Score vs Post Test Score')\n\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\nStep 4. Create a Scatterplot of preTestScore and postTestScore.\n\n\nThis time the size should be 4.5 times the postTestScore and the color determined by sex\n\n\nplt.scatter(df['preTestScore'], df['postTestScore'], \n            s=4.5 * df['postTestScore'], c=df['female'], cmap='coolwarm', alpha=0.5)\n\nplt.xlabel('Pre Test Score')\nplt.ylabel('Post Test Score')\nplt.title('Pre Test Score vs Post Test Score with Size and Color')\n\nplt.show()\n\n\n\n\n\n\n\n\n\n\nBONUS: Create your own question and answer it.\nFind the correlation between preTestScore and postTestScore\n\ncorrelation = df['preTestScore'].corr(df['postTestScore'])\nprint(f\"Correlation between preTestScore and postTestScore: {correlation}\")\n\nCorrelation between preTestScore and postTestScore: 0.37803911777651406\n\n\n\n\n\nVisualizing Chipotle’s Data\n\n\nVisualizing Chipotle’s Data\nThis time we are going to pull data directly from the internet. Special thanks to: https://github.com/justmarkham for sharing the dataset and materials.\n\nStep 1. Import the necessary libraries\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom collections import Counter\n\n\n\nStep 2. Import the dataset from this address.\n\nurl = 'https://raw.githubusercontent.com/justmarkham/DAT8/master/data/chipotle.tsv'\n\n\n\nStep 3. Assign it to a variable called chipo.\n\nchipo = pd.read_csv(url, sep = '\\t')\n\n\n\nStep 4. See the first 10 entries\n\nchipo.head(10)\n\n\n\n\n\n\n\n\norder_id\nquantity\nitem_name\nchoice_description\nitem_price\n\n\n\n\n0\n1\n1\nChips and Fresh Tomato Salsa\nNaN\n$2.39\n\n\n1\n1\n1\nIzze\n[Clementine]\n$3.39\n\n\n2\n1\n1\nNantucket Nectar\n[Apple]\n$3.39\n\n\n3\n1\n1\nChips and Tomatillo-Green Chili Salsa\nNaN\n$2.39\n\n\n4\n2\n2\nChicken Bowl\n[Tomatillo-Red Chili Salsa (Hot), [Black Beans...\n$16.98\n\n\n5\n3\n1\nChicken Bowl\n[Fresh Tomato Salsa (Mild), [Rice, Cheese, Sou...\n$10.98\n\n\n6\n3\n1\nSide of Chips\nNaN\n$1.69\n\n\n7\n4\n1\nSteak Burrito\n[Tomatillo Red Chili Salsa, [Fajita Vegetables...\n$11.75\n\n\n8\n4\n1\nSteak Soft Tacos\n[Tomatillo Green Chili Salsa, [Pinto Beans, Ch...\n$9.25\n\n\n9\n5\n1\nSteak Burrito\n[Fresh Tomato Salsa, [Rice, Black Beans, Pinto...\n$9.25\n\n\n\n\n\n\n\n\n\nStep 5. Create a histogram of the top 5 items bought\n\nx = chipo.item_name\n\nletter_counts = Counter(x)\n\ndf = pd.DataFrame.from_dict(letter_counts, orient='index')\n\ndf = df[0].sort_values(ascending = True)[45:50]\n\ndf.plot(kind='bar')\n\nplt.xlabel('Items')\nplt.ylabel('Number of Times Ordered')\nplt.title('Most ordered Chipotle\\'s Items')\n\nplt.show()\n\n\n\n\n\n\n\n\n\n\nStep 6. Create a scatterplot with the number of items orderered per order price\n\nHint: Price should be in the X-axis and Items ordered in the Y-axis\n\nchipo.item_price = [float(value[1:-1]) for value in chipo.item_price] # strip the dollar sign and trailing space\n\norders = chipo.groupby('order_id').sum()\n\nplt.scatter(x = orders.item_price, y = orders.quantity, s = 50, c = 'green')\n\nplt.xlabel('Order Price')\nplt.ylabel('Items ordered')\nplt.title('Number of items ordered per order price')\nplt.ylim(0)\n\n\n\n\n\n\n\n\n\n\n\nStep 7. BONUS: Create a question and a graph to answer your own question.\nWhich menu items have the highest unit prices and how do the number of orders for these menu items vary?\n\nurl = 'https://raw.githubusercontent.com/justmarkham/DAT8/master/data/chipotle.tsv'\nchipo = pd.read_csv(url, sep = '\\t')\n\nchipo.item_price = [float(value[1:-1]) for value in chipo.item_price]\n\nmost_expensive_items = chipo.groupby('item_name').item_price.mean().sort_values(ascending=False).head(10)\n\ntop_items = chipo[chipo['item_name'].isin(most_expensive_items.index)]\nitem_order_counts = top_items.groupby('item_name')['quantity'].sum()\n\nfig, ax = plt.subplots(figsize=(10, 6))\nitem_order_counts.plot(kind='bar', ax=ax, color='skyblue')\n\nax.set_xlabel('Menu Item')\nax.set_ylabel('Total Quantity Ordered')\nax.set_title('Top 10 Most Expensive Menu Items and Their Order Quantities')\n\nplt.xticks(rotation=45, ha=\"right\")\nplt.show()"
  }
]